{stmt_list}: err

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_partition_create () CREATE OBJECT<partitioning>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<partitioning> notnull create_func
    | {name cql_partition_create}: object<partitioning> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<partitioning> notnull create_func
        | {notnull}: object<partitioning> notnull
          | {type_object}: object<partitioning>
            | {name partitioning}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_partition_cursor (p OBJECT<partitioning>!, key CURSOR, value CURSOR) BOOL!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: bool notnull
    | {name cql_partition_cursor}: bool notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: p: object<partitioning> notnull variable in
      | | | {param_detail}: p: object<partitioning> notnull variable in
      | |   | {name p}: p: object<partitioning> notnull variable in
      | |   | {notnull}: object<partitioning> notnull
      | |     | {type_object}: object<partitioning>
      | |       | {name partitioning}
      | | {params}
      |   | {param}: key: cursor variable in
      |   | | {param_detail}: key: cursor variable in
      |   |   | {name key}: key: cursor variable in
      |   |   | {type_cursor}: cursor
      |   | {params}
      |     | {param}: value: cursor variable in
      |       | {param_detail}: value: cursor variable in
      |         | {name value}: value: cursor variable in
      |         | {type_cursor}: cursor
      | {notnull}: bool notnull
        | {type_bool}: bool

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_extract_partition (p OBJECT<partitioning>!, key CURSOR) CREATE OBJECT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object notnull create_func
    | {name cql_extract_partition}: object notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: p: object<partitioning> notnull variable in
      | | | {param_detail}: p: object<partitioning> notnull variable in
      | |   | {name p}: p: object<partitioning> notnull variable in
      | |   | {notnull}: object<partitioning> notnull
      | |     | {type_object}: object<partitioning>
      | |       | {name partitioning}
      | | {params}
      |   | {param}: key: cursor variable in
      |     | {param_detail}: key: cursor variable in
      |       | {name key}: key: cursor variable in
      |       | {type_cursor}: cursor
      | {create_data_type}: object notnull create_func
        | {notnull}: object notnull
          | {type_object}: object

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_string_dictionary_create () CREATE OBJECT<cql_string_dictionary>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_string_dictionary> notnull create_func
    | {name cql_string_dictionary_create}: object<cql_string_dictionary> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<cql_string_dictionary> notnull create_func
        | {notnull}: object<cql_string_dictionary> notnull
          | {type_object}: object<cql_string_dictionary>
            | {name cql_string_dictionary}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_string_dictionary_add (dict OBJECT<cql_string_dictionary>!, key TEXT!, value TEXT!) BOOL!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: bool notnull
    | {name cql_string_dictionary_add}: bool notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: dict: object<cql_string_dictionary> notnull variable in
      | | | {param_detail}: dict: object<cql_string_dictionary> notnull variable in
      | |   | {name dict}: dict: object<cql_string_dictionary> notnull variable in
      | |   | {notnull}: object<cql_string_dictionary> notnull
      | |     | {type_object}: object<cql_string_dictionary>
      | |       | {name cql_string_dictionary}
      | | {params}
      |   | {param}: key: text notnull variable in
      |   | | {param_detail}: key: text notnull variable in
      |   |   | {name key}: key: text notnull variable in
      |   |   | {notnull}: text notnull
      |   |     | {type_text}: text
      |   | {params}
      |     | {param}: value: text notnull variable in
      |       | {param_detail}: value: text notnull variable in
      |         | {name value}: value: text notnull variable in
      |         | {notnull}: text notnull
      |           | {type_text}: text
      | {notnull}: bool notnull
        | {type_bool}: bool

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_string_dictionary_find (dict OBJECT<cql_string_dictionary>!, key TEXT) TEXT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text
    | {name cql_string_dictionary_find}: text
    | {func_params_return}
      | {params}: ok
      | | {param}: dict: object<cql_string_dictionary> notnull variable in
      | | | {param_detail}: dict: object<cql_string_dictionary> notnull variable in
      | |   | {name dict}: dict: object<cql_string_dictionary> notnull variable in
      | |   | {notnull}: object<cql_string_dictionary> notnull
      | |     | {type_object}: object<cql_string_dictionary>
      | |       | {name cql_string_dictionary}
      | | {params}
      |   | {param}: key: text variable in
      |     | {param_detail}: key: text variable in
      |       | {name key}: key: text variable in
      |       | {type_text}: text
      | {type_text}: text

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_string_dictionary> : call add AS cql_string_dictionary_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_string_dictionary>
    | | {name cql_string_dictionary}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name add}
        | {name cql_string_dictionary_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_string_dictionary> : call find AS cql_string_dictionary_find;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_string_dictionary>
    | | {name cql_string_dictionary}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name find}
        | {name cql_string_dictionary_find}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_string_dictionary> : array set AS cql_string_dictionary_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_string_dictionary>
    | | {name cql_string_dictionary}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name set}
        | {name cql_string_dictionary_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_string_dictionary> : array get AS cql_string_dictionary_find;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_string_dictionary>
    | | {name cql_string_dictionary}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name get}
        | {name cql_string_dictionary_find}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_long_dictionary_create () CREATE OBJECT<cql_long_dictionary>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_long_dictionary> notnull create_func
    | {name cql_long_dictionary_create}: object<cql_long_dictionary> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<cql_long_dictionary> notnull create_func
        | {notnull}: object<cql_long_dictionary> notnull
          | {type_object}: object<cql_long_dictionary>
            | {name cql_long_dictionary}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_long_dictionary_add (dict OBJECT<cql_long_dictionary>!, key TEXT!, value LONG!) BOOL!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: bool notnull
    | {name cql_long_dictionary_add}: bool notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: dict: object<cql_long_dictionary> notnull variable in
      | | | {param_detail}: dict: object<cql_long_dictionary> notnull variable in
      | |   | {name dict}: dict: object<cql_long_dictionary> notnull variable in
      | |   | {notnull}: object<cql_long_dictionary> notnull
      | |     | {type_object}: object<cql_long_dictionary>
      | |       | {name cql_long_dictionary}
      | | {params}
      |   | {param}: key: text notnull variable in
      |   | | {param_detail}: key: text notnull variable in
      |   |   | {name key}: key: text notnull variable in
      |   |   | {notnull}: text notnull
      |   |     | {type_text}: text
      |   | {params}
      |     | {param}: value: longint notnull variable in
      |       | {param_detail}: value: longint notnull variable in
      |         | {name value}: value: longint notnull variable in
      |         | {notnull}: longint notnull
      |           | {type_long}: longint
      | {notnull}: bool notnull
        | {type_bool}: bool

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_long_dictionary_find (dict OBJECT<cql_long_dictionary>!, key TEXT) LONG;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: longint
    | {name cql_long_dictionary_find}: longint
    | {func_params_return}
      | {params}: ok
      | | {param}: dict: object<cql_long_dictionary> notnull variable in
      | | | {param_detail}: dict: object<cql_long_dictionary> notnull variable in
      | |   | {name dict}: dict: object<cql_long_dictionary> notnull variable in
      | |   | {notnull}: object<cql_long_dictionary> notnull
      | |     | {type_object}: object<cql_long_dictionary>
      | |       | {name cql_long_dictionary}
      | | {params}
      |   | {param}: key: text variable in
      |     | {param_detail}: key: text variable in
      |       | {name key}: key: text variable in
      |       | {type_text}: text
      | {type_long}: longint

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_long_dictionary> : call add AS cql_long_dictionary_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_long_dictionary>
    | | {name cql_long_dictionary}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name add}
        | {name cql_long_dictionary_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_long_dictionary> : call find AS cql_long_dictionary_find;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_long_dictionary>
    | | {name cql_long_dictionary}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name find}
        | {name cql_long_dictionary_find}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_long_dictionary> : array set AS cql_long_dictionary_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_long_dictionary>
    | | {name cql_long_dictionary}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name set}
        | {name cql_long_dictionary_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_long_dictionary> : array get AS cql_long_dictionary_find;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_long_dictionary>
    | | {name cql_long_dictionary}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name get}
        | {name cql_long_dictionary_find}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_real_dictionary_create () CREATE OBJECT<cql_real_dictionary>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_real_dictionary> notnull create_func
    | {name cql_real_dictionary_create}: object<cql_real_dictionary> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<cql_real_dictionary> notnull create_func
        | {notnull}: object<cql_real_dictionary> notnull
          | {type_object}: object<cql_real_dictionary>
            | {name cql_real_dictionary}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_real_dictionary_add (dict OBJECT<cql_real_dictionary>!, key TEXT!, value REAL!) BOOL!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: bool notnull
    | {name cql_real_dictionary_add}: bool notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: dict: object<cql_real_dictionary> notnull variable in
      | | | {param_detail}: dict: object<cql_real_dictionary> notnull variable in
      | |   | {name dict}: dict: object<cql_real_dictionary> notnull variable in
      | |   | {notnull}: object<cql_real_dictionary> notnull
      | |     | {type_object}: object<cql_real_dictionary>
      | |       | {name cql_real_dictionary}
      | | {params}
      |   | {param}: key: text notnull variable in
      |   | | {param_detail}: key: text notnull variable in
      |   |   | {name key}: key: text notnull variable in
      |   |   | {notnull}: text notnull
      |   |     | {type_text}: text
      |   | {params}
      |     | {param}: value: real notnull variable in
      |       | {param_detail}: value: real notnull variable in
      |         | {name value}: value: real notnull variable in
      |         | {notnull}: real notnull
      |           | {type_real}: real
      | {notnull}: bool notnull
        | {type_bool}: bool

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_real_dictionary_find (dict OBJECT<cql_real_dictionary>!, key TEXT) REAL;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: real
    | {name cql_real_dictionary_find}: real
    | {func_params_return}
      | {params}: ok
      | | {param}: dict: object<cql_real_dictionary> notnull variable in
      | | | {param_detail}: dict: object<cql_real_dictionary> notnull variable in
      | |   | {name dict}: dict: object<cql_real_dictionary> notnull variable in
      | |   | {notnull}: object<cql_real_dictionary> notnull
      | |     | {type_object}: object<cql_real_dictionary>
      | |       | {name cql_real_dictionary}
      | | {params}
      |   | {param}: key: text variable in
      |     | {param_detail}: key: text variable in
      |       | {name key}: key: text variable in
      |       | {type_text}: text
      | {type_real}: real

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_real_dictionary> : call add AS cql_real_dictionary_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_real_dictionary>
    | | {name cql_real_dictionary}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name add}
        | {name cql_real_dictionary_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_real_dictionary> : call find AS cql_real_dictionary_find;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_real_dictionary>
    | | {name cql_real_dictionary}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name find}
        | {name cql_real_dictionary_find}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_real_dictionary> : array set AS cql_real_dictionary_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_real_dictionary>
    | | {name cql_real_dictionary}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name set}
        | {name cql_real_dictionary_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_real_dictionary> : array get AS cql_real_dictionary_find;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_real_dictionary>
    | | {name cql_real_dictionary}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name get}
        | {name cql_real_dictionary_find}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_object_dictionary_create () CREATE OBJECT<cql_object_dictionary>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_object_dictionary> notnull create_func
    | {name cql_object_dictionary_create}: object<cql_object_dictionary> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<cql_object_dictionary> notnull create_func
        | {notnull}: object<cql_object_dictionary> notnull
          | {type_object}: object<cql_object_dictionary>
            | {name cql_object_dictionary}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_object_dictionary_add (dict OBJECT<cql_object_dictionary>!, key TEXT!, value OBJECT!) BOOL!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: bool notnull
    | {name cql_object_dictionary_add}: bool notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: dict: object<cql_object_dictionary> notnull variable in
      | | | {param_detail}: dict: object<cql_object_dictionary> notnull variable in
      | |   | {name dict}: dict: object<cql_object_dictionary> notnull variable in
      | |   | {notnull}: object<cql_object_dictionary> notnull
      | |     | {type_object}: object<cql_object_dictionary>
      | |       | {name cql_object_dictionary}
      | | {params}
      |   | {param}: key: text notnull variable in
      |   | | {param_detail}: key: text notnull variable in
      |   |   | {name key}: key: text notnull variable in
      |   |   | {notnull}: text notnull
      |   |     | {type_text}: text
      |   | {params}
      |     | {param}: value: object notnull variable in
      |       | {param_detail}: value: object notnull variable in
      |         | {name value}: value: object notnull variable in
      |         | {notnull}: object notnull
      |           | {type_object}: object
      | {notnull}: bool notnull
        | {type_bool}: bool

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_object_dictionary_find (dict OBJECT<cql_object_dictionary>!, key TEXT) OBJECT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object
    | {name cql_object_dictionary_find}: object
    | {func_params_return}
      | {params}: ok
      | | {param}: dict: object<cql_object_dictionary> notnull variable in
      | | | {param_detail}: dict: object<cql_object_dictionary> notnull variable in
      | |   | {name dict}: dict: object<cql_object_dictionary> notnull variable in
      | |   | {notnull}: object<cql_object_dictionary> notnull
      | |     | {type_object}: object<cql_object_dictionary>
      | |       | {name cql_object_dictionary}
      | | {params}
      |   | {param}: key: text variable in
      |     | {param_detail}: key: text variable in
      |       | {name key}: key: text variable in
      |       | {type_text}: text
      | {type_object}: object

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_object_dictionary> : call add AS cql_object_dictionary_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_object_dictionary>
    | | {name cql_object_dictionary}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name add}
        | {name cql_object_dictionary_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_object_dictionary> : call find AS cql_object_dictionary_find;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_object_dictionary>
    | | {name cql_object_dictionary}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name find}
        | {name cql_object_dictionary_find}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_object_dictionary> : array set AS cql_object_dictionary_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_object_dictionary>
    | | {name cql_object_dictionary}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name set}
        | {name cql_object_dictionary_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_object_dictionary> : array get AS cql_object_dictionary_find;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_object_dictionary>
    | | {name cql_object_dictionary}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name get}
        | {name cql_object_dictionary_find}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_blob_dictionary_create () CREATE OBJECT<cql_blob_dictionary>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_blob_dictionary> notnull create_func
    | {name cql_blob_dictionary_create}: object<cql_blob_dictionary> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<cql_blob_dictionary> notnull create_func
        | {notnull}: object<cql_blob_dictionary> notnull
          | {type_object}: object<cql_blob_dictionary>
            | {name cql_blob_dictionary}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_blob_dictionary_add (dict OBJECT<cql_blob_dictionary>!, key TEXT!, value BLOB!) BOOL!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: bool notnull
    | {name cql_blob_dictionary_add}: bool notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: dict: object<cql_blob_dictionary> notnull variable in
      | | | {param_detail}: dict: object<cql_blob_dictionary> notnull variable in
      | |   | {name dict}: dict: object<cql_blob_dictionary> notnull variable in
      | |   | {notnull}: object<cql_blob_dictionary> notnull
      | |     | {type_object}: object<cql_blob_dictionary>
      | |       | {name cql_blob_dictionary}
      | | {params}
      |   | {param}: key: text notnull variable in
      |   | | {param_detail}: key: text notnull variable in
      |   |   | {name key}: key: text notnull variable in
      |   |   | {notnull}: text notnull
      |   |     | {type_text}: text
      |   | {params}
      |     | {param}: value: blob notnull variable in
      |       | {param_detail}: value: blob notnull variable in
      |         | {name value}: value: blob notnull variable in
      |         | {notnull}: blob notnull
      |           | {type_blob}: blob
      | {notnull}: bool notnull
        | {type_bool}: bool

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_blob_dictionary_find (dict OBJECT<cql_blob_dictionary>!, key TEXT) BLOB;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: blob
    | {name cql_blob_dictionary_find}: blob
    | {func_params_return}
      | {params}: ok
      | | {param}: dict: object<cql_blob_dictionary> notnull variable in
      | | | {param_detail}: dict: object<cql_blob_dictionary> notnull variable in
      | |   | {name dict}: dict: object<cql_blob_dictionary> notnull variable in
      | |   | {notnull}: object<cql_blob_dictionary> notnull
      | |     | {type_object}: object<cql_blob_dictionary>
      | |       | {name cql_blob_dictionary}
      | | {params}
      |   | {param}: key: text variable in
      |     | {param_detail}: key: text variable in
      |       | {name key}: key: text variable in
      |       | {type_text}: text
      | {type_blob}: blob

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_blob_dictionary> : call add AS cql_blob_dictionary_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_blob_dictionary>
    | | {name cql_blob_dictionary}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name add}
        | {name cql_blob_dictionary_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_blob_dictionary> : call find AS cql_blob_dictionary_find;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_blob_dictionary>
    | | {name cql_blob_dictionary}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name find}
        | {name cql_blob_dictionary_find}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_blob_dictionary> : array set AS cql_blob_dictionary_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_blob_dictionary>
    | | {name cql_blob_dictionary}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name set}
        | {name cql_blob_dictionary_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_blob_dictionary> : array get AS cql_blob_dictionary_find;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_blob_dictionary>
    | | {name cql_blob_dictionary}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name get}
        | {name cql_blob_dictionary_find}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_format (C CURSOR) CREATE TEXT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text notnull create_func
    | {name cql_cursor_format}: text notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      |   | {param_detail}: C: cursor variable in
      |     | {name C}: C: cursor variable in
      |     | {type_cursor}: cursor
      | {create_data_type}: text notnull create_func
        | {notnull}: text notnull
          | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_hash (C CURSOR) LONG!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: longint notnull
    | {name cql_cursor_hash}: longint notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      |   | {param_detail}: C: cursor variable in
      |     | {name C}: C: cursor variable in
      |     | {type_cursor}: cursor
      | {notnull}: longint notnull
        | {type_long}: longint

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursors_equal (l CURSOR, r CURSOR) BOOL!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: bool notnull
    | {name cql_cursors_equal}: bool notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: l: cursor variable in
      | | | {param_detail}: l: cursor variable in
      | |   | {name l}: l: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: r: cursor variable in
      |     | {param_detail}: r: cursor variable in
      |       | {name r}: r: cursor variable in
      |       | {type_cursor}: cursor
      | {notnull}: bool notnull
        | {type_bool}: bool

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_diff_index (l CURSOR, r CURSOR) INT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer notnull
    | {name cql_cursor_diff_index}: integer notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: l: cursor variable in
      | | | {param_detail}: l: cursor variable in
      | |   | {name l}: l: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: r: cursor variable in
      |     | {param_detail}: r: cursor variable in
      |       | {name r}: r: cursor variable in
      |       | {type_cursor}: cursor
      | {notnull}: integer notnull
        | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_diff_col (l CURSOR, r CURSOR) CREATE TEXT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text create_func
    | {name cql_cursor_diff_col}: text create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: l: cursor variable in
      | | | {param_detail}: l: cursor variable in
      | |   | {name l}: l: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: r: cursor variable in
      |     | {param_detail}: r: cursor variable in
      |       | {name r}: r: cursor variable in
      |       | {type_cursor}: cursor
      | {create_data_type}: text create_func
        | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_diff_val (l CURSOR, r CURSOR) CREATE TEXT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text create_func
    | {name cql_cursor_diff_val}: text create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: l: cursor variable in
      | | | {param_detail}: l: cursor variable in
      | |   | {name l}: l: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: r: cursor variable in
      |     | {param_detail}: r: cursor variable in
      |       | {name r}: r: cursor variable in
      |       | {type_cursor}: cursor
      | {create_data_type}: text create_func
        | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_box_int (x INT) CREATE OBJECT<cql_box>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_box> notnull create_func
    | {name cql_box_int}: object<cql_box> notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: x: integer variable in
      |   | {param_detail}: x: integer variable in
      |     | {name x}: x: integer variable in
      |     | {type_int}: integer
      | {create_data_type}: object<cql_box> notnull create_func
        | {notnull}: object<cql_box> notnull
          | {type_object}: object<cql_box>
            | {name cql_box}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_unbox_int (box OBJECT<cql_box>) INT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer
    | {name cql_unbox_int}: integer
    | {func_params_return}
      | {params}: ok
      | | {param}: box: object<cql_box> variable in
      |   | {param_detail}: box: object<cql_box> variable in
      |     | {name box}: box: object<cql_box> variable in
      |     | {type_object}: object<cql_box>
      |       | {name cql_box}
      | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_box_real (x REAL) CREATE OBJECT<cql_box>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_box> notnull create_func
    | {name cql_box_real}: object<cql_box> notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: x: real variable in
      |   | {param_detail}: x: real variable in
      |     | {name x}: x: real variable in
      |     | {type_real}: real
      | {create_data_type}: object<cql_box> notnull create_func
        | {notnull}: object<cql_box> notnull
          | {type_object}: object<cql_box>
            | {name cql_box}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_unbox_real (box OBJECT<cql_box>) REAL;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: real
    | {name cql_unbox_real}: real
    | {func_params_return}
      | {params}: ok
      | | {param}: box: object<cql_box> variable in
      |   | {param_detail}: box: object<cql_box> variable in
      |     | {name box}: box: object<cql_box> variable in
      |     | {type_object}: object<cql_box>
      |       | {name cql_box}
      | {type_real}: real

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_box_bool (x BOOL) CREATE OBJECT<cql_box>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_box> notnull create_func
    | {name cql_box_bool}: object<cql_box> notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: x: bool variable in
      |   | {param_detail}: x: bool variable in
      |     | {name x}: x: bool variable in
      |     | {type_bool}: bool
      | {create_data_type}: object<cql_box> notnull create_func
        | {notnull}: object<cql_box> notnull
          | {type_object}: object<cql_box>
            | {name cql_box}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_unbox_bool (box OBJECT<cql_box>) BOOL;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: bool
    | {name cql_unbox_bool}: bool
    | {func_params_return}
      | {params}: ok
      | | {param}: box: object<cql_box> variable in
      |   | {param_detail}: box: object<cql_box> variable in
      |     | {name box}: box: object<cql_box> variable in
      |     | {type_object}: object<cql_box>
      |       | {name cql_box}
      | {type_bool}: bool

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_box_long (x LONG) CREATE OBJECT<cql_box>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_box> notnull create_func
    | {name cql_box_long}: object<cql_box> notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: x: longint variable in
      |   | {param_detail}: x: longint variable in
      |     | {name x}: x: longint variable in
      |     | {type_long}: longint
      | {create_data_type}: object<cql_box> notnull create_func
        | {notnull}: object<cql_box> notnull
          | {type_object}: object<cql_box>
            | {name cql_box}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_unbox_long (box OBJECT<cql_box>) LONG;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: longint
    | {name cql_unbox_long}: longint
    | {func_params_return}
      | {params}: ok
      | | {param}: box: object<cql_box> variable in
      |   | {param_detail}: box: object<cql_box> variable in
      |     | {name box}: box: object<cql_box> variable in
      |     | {type_object}: object<cql_box>
      |       | {name cql_box}
      | {type_long}: longint

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_box_text (x TEXT) CREATE OBJECT<cql_box>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_box> notnull create_func
    | {name cql_box_text}: object<cql_box> notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: x: text variable in
      |   | {param_detail}: x: text variable in
      |     | {name x}: x: text variable in
      |     | {type_text}: text
      | {create_data_type}: object<cql_box> notnull create_func
        | {notnull}: object<cql_box> notnull
          | {type_object}: object<cql_box>
            | {name cql_box}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_unbox_text (box OBJECT<cql_box>) TEXT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text
    | {name cql_unbox_text}: text
    | {func_params_return}
      | {params}: ok
      | | {param}: box: object<cql_box> variable in
      |   | {param_detail}: box: object<cql_box> variable in
      |     | {name box}: box: object<cql_box> variable in
      |     | {type_object}: object<cql_box>
      |       | {name cql_box}
      | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_box_blob (x BLOB) CREATE OBJECT<cql_box>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_box> notnull create_func
    | {name cql_box_blob}: object<cql_box> notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: x: blob variable in
      |   | {param_detail}: x: blob variable in
      |     | {name x}: x: blob variable in
      |     | {type_blob}: blob
      | {create_data_type}: object<cql_box> notnull create_func
        | {notnull}: object<cql_box> notnull
          | {type_object}: object<cql_box>
            | {name cql_box}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_unbox_blob (box OBJECT<cql_box>) BLOB;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: blob
    | {name cql_unbox_blob}: blob
    | {func_params_return}
      | {params}: ok
      | | {param}: box: object<cql_box> variable in
      |   | {param_detail}: box: object<cql_box> variable in
      |     | {name box}: box: object<cql_box> variable in
      |     | {type_object}: object<cql_box>
      |       | {name cql_box}
      | {type_blob}: blob

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_box_object (x OBJECT) CREATE OBJECT<cql_box>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_box> notnull create_func
    | {name cql_box_object}: object<cql_box> notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: x: object variable in
      |   | {param_detail}: x: object variable in
      |     | {name x}: x: object variable in
      |     | {type_object}: object
      | {create_data_type}: object<cql_box> notnull create_func
        | {notnull}: object<cql_box> notnull
          | {type_object}: object<cql_box>
            | {name cql_box}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_unbox_object (box OBJECT<cql_box>) OBJECT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object
    | {name cql_unbox_object}: object
    | {func_params_return}
      | {params}: ok
      | | {param}: box: object<cql_box> variable in
      |   | {param_detail}: box: object<cql_box> variable in
      |     | {name box}: box: object<cql_box> variable in
      |     | {type_object}: object<cql_box>
      |       | {name cql_box}
      | {type_object}: object

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_box_get_type (box OBJECT<cql_box>) INT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer notnull
    | {name cql_box_get_type}: integer notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: box: object<cql_box> variable in
      |   | {param_detail}: box: object<cql_box> variable in
      |     | {name box}: box: object<cql_box> variable in
      |     | {type_object}: object<cql_box>
      |       | {name cql_box}
      | {notnull}: integer notnull
        | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
@OP BOOL : call box AS cql_box_bool;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_bool}: bool
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name box}
        | {name cql_box_bool}

The statement ending at line XXXX

[[builtin]]
@OP INT : call box AS cql_box_int;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_int}: integer
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name box}
        | {name cql_box_int}

The statement ending at line XXXX

[[builtin]]
@OP LONG : call box AS cql_box_long;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_long}: longint
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name box}
        | {name cql_box_long}

The statement ending at line XXXX

[[builtin]]
@OP REAL : call box AS cql_box_real;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_real}: real
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name box}
        | {name cql_box_real}

The statement ending at line XXXX

[[builtin]]
@OP TEXT : call box AS cql_box_text;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_text}: text
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name box}
        | {name cql_box_text}

The statement ending at line XXXX

[[builtin]]
@OP BLOB : call box AS cql_box_blob;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_blob}: blob
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name box}
        | {name cql_box_blob}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT : call box AS cql_box_object;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name box}
        | {name cql_box_object}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_box> : call to_bool AS cql_unbox_bool;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_box>
    | | {name cql_box}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name to_bool}
        | {name cql_unbox_bool}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_box> : call to_int AS cql_unbox_int;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_box>
    | | {name cql_box}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name to_int}
        | {name cql_unbox_int}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_box> : call to_long AS cql_unbox_long;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_box>
    | | {name cql_box}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name to_long}
        | {name cql_unbox_long}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_box> : call to_real AS cql_unbox_real;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_box>
    | | {name cql_box}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name to_real}
        | {name cql_unbox_real}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_box> : call to_text AS cql_unbox_text;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_box>
    | | {name cql_box}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name to_text}
        | {name cql_unbox_text}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_box> : call to_blob AS cql_unbox_blob;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_box>
    | | {name cql_box}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name to_blob}
        | {name cql_unbox_blob}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_box> : call to_object AS cql_unbox_object;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_box>
    | | {name cql_box}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name to_object}
        | {name cql_unbox_object}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_box> : call type AS cql_box_get_type;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_box>
    | | {name cql_box}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name type}
        | {name cql_box_get_type}

The statement ending at line XXXX

[[builtin]]
TYPE cql_string_list OBJECT<cql_string_list>;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: object<cql_string_list>
    | {name cql_string_list}: object<cql_string_list>
    | {type_object}: object<cql_string_list>
      | {name cql_string_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_string_list_create () CREATE OBJECT<cql_string_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_string_list> notnull create_func
    | {name cql_string_list_create}: object<cql_string_list> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<cql_string_list> notnull create_func
        | {notnull}: object<cql_string_list> notnull
          | {type_object}: object<cql_string_list>
            | {name cql_string_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_string_list_set_at (list OBJECT<cql_string_list>!, index_ INT!, value_ TEXT!) OBJECT<cql_string_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_string_list> notnull
    | {name cql_string_list_set_at}: object<cql_string_list> notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_string_list> notnull variable in
      | | | {param_detail}: list: object<cql_string_list> notnull variable in
      | |   | {name list}: list: object<cql_string_list> notnull variable in
      | |   | {notnull}: object<cql_string_list> notnull
      | |     | {type_object}: object<cql_string_list>
      | |       | {name cql_string_list}
      | | {params}
      |   | {param}: index_: integer notnull variable in
      |   | | {param_detail}: index_: integer notnull variable in
      |   |   | {name index_}: index_: integer notnull variable in
      |   |   | {notnull}: integer notnull
      |   |     | {type_int}: integer
      |   | {params}
      |     | {param}: value_: text notnull variable in
      |       | {param_detail}: value_: text notnull variable in
      |         | {name value_}: value_: text notnull variable in
      |         | {notnull}: text notnull
      |           | {type_text}: text
      | {notnull}: object<cql_string_list> notnull
        | {type_object}: object<cql_string_list>
          | {name cql_string_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_string_list_get_at (list OBJECT<cql_string_list>!, index_ INT!) TEXT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text
    | {name cql_string_list_get_at}: text
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_string_list> notnull variable in
      | | | {param_detail}: list: object<cql_string_list> notnull variable in
      | |   | {name list}: list: object<cql_string_list> notnull variable in
      | |   | {notnull}: object<cql_string_list> notnull
      | |     | {type_object}: object<cql_string_list>
      | |       | {name cql_string_list}
      | | {params}
      |   | {param}: index_: integer notnull variable in
      |     | {param_detail}: index_: integer notnull variable in
      |       | {name index_}: index_: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_string_list_count (list OBJECT<cql_string_list>!) INT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer notnull
    | {name cql_string_list_count}: integer notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_string_list> notnull variable in
      |   | {param_detail}: list: object<cql_string_list> notnull variable in
      |     | {name list}: list: object<cql_string_list> notnull variable in
      |     | {notnull}: object<cql_string_list> notnull
      |       | {type_object}: object<cql_string_list>
      |         | {name cql_string_list}
      | {notnull}: integer notnull
        | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_string_list_add (list OBJECT<cql_string_list>!, string TEXT!) OBJECT<cql_string_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_string_list> notnull
    | {name cql_string_list_add}: object<cql_string_list> notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_string_list> notnull variable in
      | | | {param_detail}: list: object<cql_string_list> notnull variable in
      | |   | {name list}: list: object<cql_string_list> notnull variable in
      | |   | {notnull}: object<cql_string_list> notnull
      | |     | {type_object}: object<cql_string_list>
      | |       | {name cql_string_list}
      | | {params}
      |   | {param}: string: text notnull variable in
      |     | {param_detail}: string: text notnull variable in
      |       | {name string}: string: text notnull variable in
      |       | {notnull}: text notnull
      |         | {type_text}: text
      | {notnull}: object<cql_string_list> notnull
        | {type_object}: object<cql_string_list>
          | {name cql_string_list}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_string_list> : array set AS cql_string_list_set_at;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_string_list>
    | | {name cql_string_list}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name set}
        | {name cql_string_list_set_at}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_string_list> : array get AS cql_string_list_get_at;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_string_list>
    | | {name cql_string_list}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name get}
        | {name cql_string_list_get_at}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_string_list> : call add AS cql_string_list_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_string_list>
    | | {name cql_string_list}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name add}
        | {name cql_string_list_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_string_list> : get count AS cql_string_list_count;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_string_list>
    | | {name cql_string_list}
    | {op_vals}
      | {name get}
      | {op_vals}
        | {name count}
        | {name cql_string_list_count}

The statement ending at line XXXX

[[builtin]]
TYPE cql_blob_list OBJECT<cql_blob_list>;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: object<cql_blob_list>
    | {name cql_blob_list}: object<cql_blob_list>
    | {type_object}: object<cql_blob_list>
      | {name cql_blob_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_blob_list_create () CREATE OBJECT<cql_blob_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_blob_list> notnull create_func
    | {name cql_blob_list_create}: object<cql_blob_list> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<cql_blob_list> notnull create_func
        | {notnull}: object<cql_blob_list> notnull
          | {type_object}: object<cql_blob_list>
            | {name cql_blob_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_blob_list_set_at (list OBJECT<cql_blob_list>!, index_ INT!, value_ BLOB!) OBJECT<cql_blob_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_blob_list> notnull
    | {name cql_blob_list_set_at}: object<cql_blob_list> notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_blob_list> notnull variable in
      | | | {param_detail}: list: object<cql_blob_list> notnull variable in
      | |   | {name list}: list: object<cql_blob_list> notnull variable in
      | |   | {notnull}: object<cql_blob_list> notnull
      | |     | {type_object}: object<cql_blob_list>
      | |       | {name cql_blob_list}
      | | {params}
      |   | {param}: index_: integer notnull variable in
      |   | | {param_detail}: index_: integer notnull variable in
      |   |   | {name index_}: index_: integer notnull variable in
      |   |   | {notnull}: integer notnull
      |   |     | {type_int}: integer
      |   | {params}
      |     | {param}: value_: blob notnull variable in
      |       | {param_detail}: value_: blob notnull variable in
      |         | {name value_}: value_: blob notnull variable in
      |         | {notnull}: blob notnull
      |           | {type_blob}: blob
      | {notnull}: object<cql_blob_list> notnull
        | {type_object}: object<cql_blob_list>
          | {name cql_blob_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_blob_list_get_at (list OBJECT<cql_blob_list>!, index_ INT!) BLOB;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: blob
    | {name cql_blob_list_get_at}: blob
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_blob_list> notnull variable in
      | | | {param_detail}: list: object<cql_blob_list> notnull variable in
      | |   | {name list}: list: object<cql_blob_list> notnull variable in
      | |   | {notnull}: object<cql_blob_list> notnull
      | |     | {type_object}: object<cql_blob_list>
      | |       | {name cql_blob_list}
      | | {params}
      |   | {param}: index_: integer notnull variable in
      |     | {param_detail}: index_: integer notnull variable in
      |       | {name index_}: index_: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {type_blob}: blob

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_blob_list_count (list OBJECT<cql_blob_list>!) INT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer notnull
    | {name cql_blob_list_count}: integer notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_blob_list> notnull variable in
      |   | {param_detail}: list: object<cql_blob_list> notnull variable in
      |     | {name list}: list: object<cql_blob_list> notnull variable in
      |     | {notnull}: object<cql_blob_list> notnull
      |       | {type_object}: object<cql_blob_list>
      |         | {name cql_blob_list}
      | {notnull}: integer notnull
        | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_blob_list_add (list OBJECT<cql_blob_list>!, value BLOB!) OBJECT<cql_blob_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_blob_list> notnull
    | {name cql_blob_list_add}: object<cql_blob_list> notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_blob_list> notnull variable in
      | | | {param_detail}: list: object<cql_blob_list> notnull variable in
      | |   | {name list}: list: object<cql_blob_list> notnull variable in
      | |   | {notnull}: object<cql_blob_list> notnull
      | |     | {type_object}: object<cql_blob_list>
      | |       | {name cql_blob_list}
      | | {params}
      |   | {param}: value: blob notnull variable in
      |     | {param_detail}: value: blob notnull variable in
      |       | {name value}: value: blob notnull variable in
      |       | {notnull}: blob notnull
      |         | {type_blob}: blob
      | {notnull}: object<cql_blob_list> notnull
        | {type_object}: object<cql_blob_list>
          | {name cql_blob_list}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_blob_list> : array set AS cql_blob_list_set_at;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_blob_list>
    | | {name cql_blob_list}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name set}
        | {name cql_blob_list_set_at}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_blob_list> : array get AS cql_blob_list_get_at;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_blob_list>
    | | {name cql_blob_list}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name get}
        | {name cql_blob_list_get_at}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_blob_list> : call add AS cql_blob_list_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_blob_list>
    | | {name cql_blob_list}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name add}
        | {name cql_blob_list_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_blob_list> : get count AS cql_blob_list_count;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_blob_list>
    | | {name cql_blob_list}
    | {op_vals}
      | {name get}
      | {op_vals}
        | {name count}
        | {name cql_blob_list_count}

The statement ending at line XXXX

[[builtin]]
TYPE cql_object_list OBJECT<cql_object_list>;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: object<cql_object_list>
    | {name cql_object_list}: object<cql_object_list>
    | {type_object}: object<cql_object_list>
      | {name cql_object_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_object_list_create () CREATE OBJECT<cql_object_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_object_list> notnull create_func
    | {name cql_object_list_create}: object<cql_object_list> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<cql_object_list> notnull create_func
        | {notnull}: object<cql_object_list> notnull
          | {type_object}: object<cql_object_list>
            | {name cql_object_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_object_list_set_at (list OBJECT<cql_object_list>!, index_ INT!, value_ OBJECT!) OBJECT<cql_object_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_object_list> notnull
    | {name cql_object_list_set_at}: object<cql_object_list> notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_object_list> notnull variable in
      | | | {param_detail}: list: object<cql_object_list> notnull variable in
      | |   | {name list}: list: object<cql_object_list> notnull variable in
      | |   | {notnull}: object<cql_object_list> notnull
      | |     | {type_object}: object<cql_object_list>
      | |       | {name cql_object_list}
      | | {params}
      |   | {param}: index_: integer notnull variable in
      |   | | {param_detail}: index_: integer notnull variable in
      |   |   | {name index_}: index_: integer notnull variable in
      |   |   | {notnull}: integer notnull
      |   |     | {type_int}: integer
      |   | {params}
      |     | {param}: value_: object notnull variable in
      |       | {param_detail}: value_: object notnull variable in
      |         | {name value_}: value_: object notnull variable in
      |         | {notnull}: object notnull
      |           | {type_object}: object
      | {notnull}: object<cql_object_list> notnull
        | {type_object}: object<cql_object_list>
          | {name cql_object_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_object_list_get_at (list OBJECT<cql_object_list>!, index_ INT!) OBJECT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object
    | {name cql_object_list_get_at}: object
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_object_list> notnull variable in
      | | | {param_detail}: list: object<cql_object_list> notnull variable in
      | |   | {name list}: list: object<cql_object_list> notnull variable in
      | |   | {notnull}: object<cql_object_list> notnull
      | |     | {type_object}: object<cql_object_list>
      | |       | {name cql_object_list}
      | | {params}
      |   | {param}: index_: integer notnull variable in
      |     | {param_detail}: index_: integer notnull variable in
      |       | {name index_}: index_: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {type_object}: object

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_object_list_count (list OBJECT<cql_object_list>!) INT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer notnull
    | {name cql_object_list_count}: integer notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_object_list> notnull variable in
      |   | {param_detail}: list: object<cql_object_list> notnull variable in
      |     | {name list}: list: object<cql_object_list> notnull variable in
      |     | {notnull}: object<cql_object_list> notnull
      |       | {type_object}: object<cql_object_list>
      |         | {name cql_object_list}
      | {notnull}: integer notnull
        | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_object_list_add (list OBJECT<cql_object_list>!, value OBJECT!) OBJECT<cql_object_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_object_list> notnull
    | {name cql_object_list_add}: object<cql_object_list> notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_object_list> notnull variable in
      | | | {param_detail}: list: object<cql_object_list> notnull variable in
      | |   | {name list}: list: object<cql_object_list> notnull variable in
      | |   | {notnull}: object<cql_object_list> notnull
      | |     | {type_object}: object<cql_object_list>
      | |       | {name cql_object_list}
      | | {params}
      |   | {param}: value: object notnull variable in
      |     | {param_detail}: value: object notnull variable in
      |       | {name value}: value: object notnull variable in
      |       | {notnull}: object notnull
      |         | {type_object}: object
      | {notnull}: object<cql_object_list> notnull
        | {type_object}: object<cql_object_list>
          | {name cql_object_list}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_object_list> : array set AS cql_object_list_set_at;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_object_list>
    | | {name cql_object_list}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name set}
        | {name cql_object_list_set_at}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_object_list> : array get AS cql_object_list_get_at;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_object_list>
    | | {name cql_object_list}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name get}
        | {name cql_object_list_get_at}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_object_list> : call add AS cql_object_list_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_object_list>
    | | {name cql_object_list}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name add}
        | {name cql_object_list_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_object_list> : get count AS cql_object_list_count;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_object_list>
    | | {name cql_object_list}
    | {op_vals}
      | {name get}
      | {op_vals}
        | {name count}
        | {name cql_object_list_count}

The statement ending at line XXXX

[[builtin]]
TYPE cql_long_list OBJECT<cql_long_list>;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: object<cql_long_list>
    | {name cql_long_list}: object<cql_long_list>
    | {type_object}: object<cql_long_list>
      | {name cql_long_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_long_list_create () CREATE OBJECT<cql_long_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_long_list> notnull create_func
    | {name cql_long_list_create}: object<cql_long_list> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<cql_long_list> notnull create_func
        | {notnull}: object<cql_long_list> notnull
          | {type_object}: object<cql_long_list>
            | {name cql_long_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_long_list_set_at (list OBJECT<cql_long_list>!, index_ INT!, value_ LONG!) OBJECT<cql_long_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_long_list> notnull
    | {name cql_long_list_set_at}: object<cql_long_list> notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_long_list> notnull variable in
      | | | {param_detail}: list: object<cql_long_list> notnull variable in
      | |   | {name list}: list: object<cql_long_list> notnull variable in
      | |   | {notnull}: object<cql_long_list> notnull
      | |     | {type_object}: object<cql_long_list>
      | |       | {name cql_long_list}
      | | {params}
      |   | {param}: index_: integer notnull variable in
      |   | | {param_detail}: index_: integer notnull variable in
      |   |   | {name index_}: index_: integer notnull variable in
      |   |   | {notnull}: integer notnull
      |   |     | {type_int}: integer
      |   | {params}
      |     | {param}: value_: longint notnull variable in
      |       | {param_detail}: value_: longint notnull variable in
      |         | {name value_}: value_: longint notnull variable in
      |         | {notnull}: longint notnull
      |           | {type_long}: longint
      | {notnull}: object<cql_long_list> notnull
        | {type_object}: object<cql_long_list>
          | {name cql_long_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_long_list_get_at (list OBJECT<cql_long_list>!, index_ INT!) LONG!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: longint notnull
    | {name cql_long_list_get_at}: longint notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_long_list> notnull variable in
      | | | {param_detail}: list: object<cql_long_list> notnull variable in
      | |   | {name list}: list: object<cql_long_list> notnull variable in
      | |   | {notnull}: object<cql_long_list> notnull
      | |     | {type_object}: object<cql_long_list>
      | |       | {name cql_long_list}
      | | {params}
      |   | {param}: index_: integer notnull variable in
      |     | {param_detail}: index_: integer notnull variable in
      |       | {name index_}: index_: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {notnull}: longint notnull
        | {type_long}: longint

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_long_list_count (list OBJECT<cql_long_list>!) INT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer notnull
    | {name cql_long_list_count}: integer notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_long_list> notnull variable in
      |   | {param_detail}: list: object<cql_long_list> notnull variable in
      |     | {name list}: list: object<cql_long_list> notnull variable in
      |     | {notnull}: object<cql_long_list> notnull
      |       | {type_object}: object<cql_long_list>
      |         | {name cql_long_list}
      | {notnull}: integer notnull
        | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_long_list_add (list OBJECT<cql_long_list>!, value_ LONG!) OBJECT<cql_long_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_long_list> notnull
    | {name cql_long_list_add}: object<cql_long_list> notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_long_list> notnull variable in
      | | | {param_detail}: list: object<cql_long_list> notnull variable in
      | |   | {name list}: list: object<cql_long_list> notnull variable in
      | |   | {notnull}: object<cql_long_list> notnull
      | |     | {type_object}: object<cql_long_list>
      | |       | {name cql_long_list}
      | | {params}
      |   | {param}: value_: longint notnull variable in
      |     | {param_detail}: value_: longint notnull variable in
      |       | {name value_}: value_: longint notnull variable in
      |       | {notnull}: longint notnull
      |         | {type_long}: longint
      | {notnull}: object<cql_long_list> notnull
        | {type_object}: object<cql_long_list>
          | {name cql_long_list}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_long_list> : array set AS cql_long_list_set_at;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_long_list>
    | | {name cql_long_list}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name set}
        | {name cql_long_list_set_at}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_long_list> : array get AS cql_long_list_get_at;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_long_list>
    | | {name cql_long_list}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name get}
        | {name cql_long_list_get_at}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_long_list> : call add AS cql_long_list_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_long_list>
    | | {name cql_long_list}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name add}
        | {name cql_long_list_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_long_list> : get count AS cql_long_list_count;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_long_list>
    | | {name cql_long_list}
    | {op_vals}
      | {name get}
      | {op_vals}
        | {name count}
        | {name cql_long_list_count}

The statement ending at line XXXX

[[builtin]]
TYPE cql_real_list OBJECT<cql_real_list>;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: object<cql_real_list>
    | {name cql_real_list}: object<cql_real_list>
    | {type_object}: object<cql_real_list>
      | {name cql_real_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_real_list_create () CREATE OBJECT<cql_real_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_real_list> notnull create_func
    | {name cql_real_list_create}: object<cql_real_list> notnull create_func
    | {func_params_return}
      | {create_data_type}: object<cql_real_list> notnull create_func
        | {notnull}: object<cql_real_list> notnull
          | {type_object}: object<cql_real_list>
            | {name cql_real_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_real_list_set_at (list OBJECT<cql_real_list>!, index_ INT!, value_ REAL!) OBJECT<cql_real_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_real_list> notnull
    | {name cql_real_list_set_at}: object<cql_real_list> notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_real_list> notnull variable in
      | | | {param_detail}: list: object<cql_real_list> notnull variable in
      | |   | {name list}: list: object<cql_real_list> notnull variable in
      | |   | {notnull}: object<cql_real_list> notnull
      | |     | {type_object}: object<cql_real_list>
      | |       | {name cql_real_list}
      | | {params}
      |   | {param}: index_: integer notnull variable in
      |   | | {param_detail}: index_: integer notnull variable in
      |   |   | {name index_}: index_: integer notnull variable in
      |   |   | {notnull}: integer notnull
      |   |     | {type_int}: integer
      |   | {params}
      |     | {param}: value_: real notnull variable in
      |       | {param_detail}: value_: real notnull variable in
      |         | {name value_}: value_: real notnull variable in
      |         | {notnull}: real notnull
      |           | {type_real}: real
      | {notnull}: object<cql_real_list> notnull
        | {type_object}: object<cql_real_list>
          | {name cql_real_list}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_real_list_get_at (list OBJECT<cql_real_list>!, index_ INT!) REAL!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: real notnull
    | {name cql_real_list_get_at}: real notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_real_list> notnull variable in
      | | | {param_detail}: list: object<cql_real_list> notnull variable in
      | |   | {name list}: list: object<cql_real_list> notnull variable in
      | |   | {notnull}: object<cql_real_list> notnull
      | |     | {type_object}: object<cql_real_list>
      | |       | {name cql_real_list}
      | | {params}
      |   | {param}: index_: integer notnull variable in
      |     | {param_detail}: index_: integer notnull variable in
      |       | {name index_}: index_: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {notnull}: real notnull
        | {type_real}: real

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_real_list_count (list OBJECT<cql_real_list>!) INT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer notnull
    | {name cql_real_list_count}: integer notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_real_list> notnull variable in
      |   | {param_detail}: list: object<cql_real_list> notnull variable in
      |     | {name list}: list: object<cql_real_list> notnull variable in
      |     | {notnull}: object<cql_real_list> notnull
      |       | {type_object}: object<cql_real_list>
      |         | {name cql_real_list}
      | {notnull}: integer notnull
        | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_real_list_add (list OBJECT<cql_real_list>!, value_ REAL!) OBJECT<cql_real_list>!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object<cql_real_list> notnull
    | {name cql_real_list_add}: object<cql_real_list> notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: list: object<cql_real_list> notnull variable in
      | | | {param_detail}: list: object<cql_real_list> notnull variable in
      | |   | {name list}: list: object<cql_real_list> notnull variable in
      | |   | {notnull}: object<cql_real_list> notnull
      | |     | {type_object}: object<cql_real_list>
      | |       | {name cql_real_list}
      | | {params}
      |   | {param}: value_: real notnull variable in
      |     | {param_detail}: value_: real notnull variable in
      |       | {name value_}: value_: real notnull variable in
      |       | {notnull}: real notnull
      |         | {type_real}: real
      | {notnull}: object<cql_real_list> notnull
        | {type_object}: object<cql_real_list>
          | {name cql_real_list}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_real_list> : array set AS cql_real_list_set_at;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_real_list>
    | | {name cql_real_list}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name set}
        | {name cql_real_list_set_at}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_real_list> : array get AS cql_real_list_get_at;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_real_list>
    | | {name cql_real_list}
    | {op_vals}
      | {name array}
      | {op_vals}
        | {name get}
        | {name cql_real_list_get_at}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_real_list> : call add AS cql_real_list_add;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_real_list>
    | | {name cql_real_list}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name add}
        | {name cql_real_list_add}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT<cql_real_list> : get count AS cql_real_list_count;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object<cql_real_list>
    | | {name cql_real_list}
    | {op_vals}
      | {name get}
      | {op_vals}
        | {name count}
        | {name cql_real_list_count}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_column_count (C CURSOR) INT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer notnull
    | {name cql_cursor_column_count}: integer notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      |   | {param_detail}: C: cursor variable in
      |     | {name C}: C: cursor variable in
      |     | {type_cursor}: cursor
      | {notnull}: integer notnull
        | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_column_type (C CURSOR, icol INT!) INT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer notnull
    | {name cql_cursor_column_type}: integer notnull
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      | | | {param_detail}: C: cursor variable in
      | |   | {name C}: C: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: icol: integer notnull variable in
      |     | {param_detail}: icol: integer notnull variable in
      |       | {name icol}: icol: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {notnull}: integer notnull
        | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_column_name (C CURSOR, icol INT!) CREATE TEXT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text create_func
    | {name cql_cursor_column_name}: text create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      | | | {param_detail}: C: cursor variable in
      | |   | {name C}: C: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: icol: integer notnull variable in
      |     | {param_detail}: icol: integer notnull variable in
      |       | {name icol}: icol: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {create_data_type}: text create_func
        | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_get_bool (C CURSOR, icol INT!) BOOL;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: bool
    | {name cql_cursor_get_bool}: bool
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      | | | {param_detail}: C: cursor variable in
      | |   | {name C}: C: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: icol: integer notnull variable in
      |     | {param_detail}: icol: integer notnull variable in
      |       | {name icol}: icol: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {type_bool}: bool

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_get_int (C CURSOR, icol INT!) INT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: integer
    | {name cql_cursor_get_int}: integer
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      | | | {param_detail}: C: cursor variable in
      | |   | {name C}: C: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: icol: integer notnull variable in
      |     | {param_detail}: icol: integer notnull variable in
      |       | {name icol}: icol: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_get_long (C CURSOR, icol INT!) LONG;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: longint
    | {name cql_cursor_get_long}: longint
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      | | | {param_detail}: C: cursor variable in
      | |   | {name C}: C: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: icol: integer notnull variable in
      |     | {param_detail}: icol: integer notnull variable in
      |       | {name icol}: icol: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {type_long}: longint

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_get_real (C CURSOR, icol INT!) REAL;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: real
    | {name cql_cursor_get_real}: real
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      | | | {param_detail}: C: cursor variable in
      | |   | {name C}: C: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: icol: integer notnull variable in
      |     | {param_detail}: icol: integer notnull variable in
      |       | {name icol}: icol: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {type_real}: real

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_get_text (C CURSOR, icol INT!) TEXT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text
    | {name cql_cursor_get_text}: text
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      | | | {param_detail}: C: cursor variable in
      | |   | {name C}: C: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: icol: integer notnull variable in
      |     | {param_detail}: icol: integer notnull variable in
      |       | {name icol}: icol: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_get_blob (C CURSOR, icol INT!) BLOB;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: blob
    | {name cql_cursor_get_blob}: blob
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      | | | {param_detail}: C: cursor variable in
      | |   | {name C}: C: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: icol: integer notnull variable in
      |     | {param_detail}: icol: integer notnull variable in
      |       | {name icol}: icol: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {type_blob}: blob

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_get_object (C CURSOR, icol INT!) OBJECT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: object
    | {name cql_cursor_get_object}: object
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      | | | {param_detail}: C: cursor variable in
      | |   | {name C}: C: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: icol: integer notnull variable in
      |     | {param_detail}: icol: integer notnull variable in
      |       | {name icol}: icol: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {type_object}: object

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_cursor_format_column (C CURSOR, icol INT!) CREATE TEXT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text notnull create_func
    | {name cql_cursor_format_column}: text notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: C: cursor variable in
      | | | {param_detail}: C: cursor variable in
      | |   | {name C}: C: cursor variable in
      | |   | {type_cursor}: cursor
      | | {params}
      |   | {param}: icol: integer notnull variable in
      |     | {param_detail}: icol: integer notnull variable in
      |       | {name icol}: icol: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {create_data_type}: text notnull create_func
        | {notnull}: text notnull
          | {type_text}: text

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call format AS cql_cursor_format;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name format}
        | {name cql_cursor_format}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call hash AS cql_cursor_hash;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name hash}
        | {name cql_cursor_hash}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call diff_index AS cql_cursor_diff_index;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name diff_index}
        | {name cql_cursor_diff_index}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call diff_col AS cql_cursor_diff_col;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name diff_col}
        | {name cql_cursor_diff_col}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call diff_val AS cql_cursor_diff_val;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name diff_val}
        | {name cql_cursor_diff_val}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call equals AS cql_cursors_equal;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name equals}
        | {name cql_cursors_equal}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call count AS cql_cursor_column_count;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name count}
        | {name cql_cursor_column_count}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call type AS cql_cursor_column_type;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name type}
        | {name cql_cursor_column_type}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call name AS cql_cursor_column_name;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name name}
        | {name cql_cursor_column_name}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call get_bool AS cql_cursor_get_bool;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name get_bool}
        | {name cql_cursor_get_bool}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call get_int AS cql_cursor_get_int;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name get_int}
        | {name cql_cursor_get_int}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call get_long AS cql_cursor_get_long;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name get_long}
        | {name cql_cursor_get_long}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call get_real AS cql_cursor_get_real;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name get_real}
        | {name cql_cursor_get_real}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call get_text AS cql_cursor_get_text;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name get_text}
        | {name cql_cursor_get_text}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call get_blob AS cql_cursor_get_blob;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name get_blob}
        | {name cql_cursor_get_blob}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call get_object AS cql_cursor_get_object;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name get_object}
        | {name cql_cursor_get_object}

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call format_col AS cql_cursor_format_column;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name format_col}
        | {name cql_cursor_format_column}

The statement ending at line XXXX

[[builtin]]
DECLARE PROC cql_throw (code INT!) USING TRANSACTION;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_proc_stmt}: ok dml_proc
    | {proc_name_type}
    | | {name cql_throw}: ok dml_proc
    | | {int 2}
    | {proc_params_stmts}
      | {params}: ok
        | {param}: code: integer notnull variable in
          | {param_detail}: code: integer notnull variable in
            | {name code}: code: integer notnull variable in
            | {notnull}: integer notnull
              | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
TYPE bool BOOL;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: bool
    | {name bool}: bool
    | {type_bool}: bool

The statement ending at line XXXX

[[builtin]]
TYPE int INT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: integer
    | {name int}: integer
    | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
TYPE integer INT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: integer
    | {name integer}: integer
    | {type_int}: integer

The statement ending at line XXXX

[[builtin]]
TYPE long LONG;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: longint
    | {name long}: longint
    | {type_long}: longint

The statement ending at line XXXX

[[builtin]]
TYPE real REAL;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: real
    | {name real}: real
    | {type_real}: real

The statement ending at line XXXX

[[builtin]]
TYPE text TEXT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: text
    | {name text}: text
    | {type_text}: text

The statement ending at line XXXX

[[builtin]]
TYPE object OBJECT;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: object
    | {name object}: object
    | {type_object}: object

The statement ending at line XXXX

[[builtin]]
TYPE blob BLOB;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: blob
    | {name blob}: blob
    | {type_blob}: blob

The statement ending at line XXXX

[[builtin]]
TYPE long_int LONG;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_named_type}: longint
    | {name long_int}: longint
    | {type_long}: longint

The statement ending at line XXXX

[[builtin]]
DECLARE CONST GROUP cql_data_types (
  CQL_DATA_TYPE_NULL = 0,
  CQL_DATA_TYPE_INT32 = 1,
  CQL_DATA_TYPE_INT64 = 2,
  CQL_DATA_TYPE_DOUBLE = 3,
  CQL_DATA_TYPE_BOOL = 4,
  CQL_DATA_TYPE_STRING = 5,
  CQL_DATA_TYPE_BLOB = 6,
  CQL_DATA_TYPE_OBJECT = 7,
  CQL_DATA_TYPE_CORE = 0x3f,
  CQL_DATA_TYPE_ENCODED = 0x40,
  CQL_DATA_TYPE_NOT_NULL = 0x80
);

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_const_stmt}: ok
    | {name cql_data_types}
    | {const_values}
      | {const_value}: integer = 0 notnull
      | | {name CQL_DATA_TYPE_NULL}: integer = 0 notnull
      | | {int 0}: integer = 0 notnull
      | {const_values}
        | {const_value}: integer = 1 notnull
        | | {name CQL_DATA_TYPE_INT32}: integer = 1 notnull
        | | {int 1}: integer = 1 notnull
        | {const_values}
          | {const_value}: integer = 2 notnull
          | | {name CQL_DATA_TYPE_INT64}: integer = 2 notnull
          | | {int 2}: integer = 2 notnull
          | {const_values}
            | {const_value}: integer = 3 notnull
            | | {name CQL_DATA_TYPE_DOUBLE}: integer = 3 notnull
            | | {int 3}: integer = 3 notnull
            | {const_values}
              | {const_value}: integer = 4 notnull
              | | {name CQL_DATA_TYPE_BOOL}: integer = 4 notnull
              | | {int 4}: integer = 4 notnull
              | {const_values}
                | {const_value}: integer = 5 notnull
                | | {name CQL_DATA_TYPE_STRING}: integer = 5 notnull
                | | {int 5}: integer = 5 notnull
                | {const_values}
                  | {const_value}: integer = 6 notnull
                  | | {name CQL_DATA_TYPE_BLOB}: integer = 6 notnull
                  | | {int 6}: integer = 6 notnull
                  | {const_values}
                    | {const_value}: integer = 7 notnull
                    | | {name CQL_DATA_TYPE_OBJECT}: integer = 7 notnull
                    | | {int 7}: integer = 7 notnull
                    | {const_values}
                      | {const_value}: integer = 63 notnull
                      | | {name CQL_DATA_TYPE_CORE}: integer = 63 notnull
                      | | {int 0x3f}: integer = 63 notnull
                      | {const_values}
                        | {const_value}: integer = 64 notnull
                        | | {name CQL_DATA_TYPE_ENCODED}: integer = 64 notnull
                        | | {int 0x40}: integer = 64 notnull
                        | {const_values}
                          | {const_value}: integer = 128 notnull
                            | {name CQL_DATA_TYPE_NOT_NULL}: integer = 128 notnull
                            | {int 0x80}: integer = 128 notnull

The statement ending at line XXXX

[[builtin]]
DECLARE PROC cql_cursor_to_blob (C CURSOR, OUT result BLOB!) USING TRANSACTION;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_proc_stmt}: ok dml_proc
    | {proc_name_type}
    | | {name cql_cursor_to_blob}: ok dml_proc
    | | {int 2}
    | {proc_params_stmts}
      | {params}: ok
        | {param}: C: cursor variable in
        | | {param_detail}: C: cursor variable in
        |   | {name C}: C: cursor variable in
        |   | {type_cursor}: cursor
        | {params}
          | {param}: result: blob notnull variable init_required out
            | {out}
            | {param_detail}: result: blob notnull variable init_required out
              | {name result}: result: blob notnull variable init_required out
              | {notnull}: blob notnull
                | {type_blob}: blob

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call to_blob AS cql_cursor_to_blob;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name to_blob}
        | {name cql_cursor_to_blob}

The statement ending at line XXXX

[[builtin]]
DECLARE PROC cql_cursor_from_blob (C CURSOR, b BLOB) USING TRANSACTION;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_proc_stmt}: ok dml_proc
    | {proc_name_type}
    | | {name cql_cursor_from_blob}: ok dml_proc
    | | {int 2}
    | {proc_params_stmts}
      | {params}: ok
        | {param}: C: cursor variable in
        | | {param_detail}: C: cursor variable in
        |   | {name C}: C: cursor variable in
        |   | {type_cursor}: cursor
        | {params}
          | {param}: b: blob variable in
            | {param_detail}: b: blob variable in
              | {name b}: b: blob variable in
              | {type_blob}: blob

The statement ending at line XXXX

[[builtin]]
@OP CURSOR : call from_blob AS cql_cursor_from_blob;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name CURSOR}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name from_blob}
        | {name cql_cursor_from_blob}

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_blob_from_int (prefix TEXT, val INT!) CREATE BLOB!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: blob notnull create_func
    | {name cql_blob_from_int}: blob notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: prefix: text variable in
      | | | {param_detail}: prefix: text variable in
      | |   | {name prefix}: prefix: text variable in
      | |   | {type_text}: text
      | | {params}
      |   | {param}: val: integer notnull variable in
      |     | {param_detail}: val: integer notnull variable in
      |       | {name val}: val: integer notnull variable in
      |       | {notnull}: integer notnull
      |         | {type_int}: integer
      | {create_data_type}: blob notnull create_func
        | {notnull}: blob notnull
          | {type_blob}: blob

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_format_bool (val BOOL @SENSITIVE) CREATE TEXT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text notnull create_func
    | {name cql_format_bool}: text notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: val: bool variable in sensitive
      |   | {param_detail}: val: bool variable in sensitive
      |     | {name val}: val: bool variable in sensitive
      |     | {sensitive_attr}: bool sensitive
      |       | {type_bool}: bool
      | {create_data_type}: text notnull create_func
        | {notnull}: text notnull
          | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_format_int (val INT @SENSITIVE) CREATE TEXT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text notnull create_func
    | {name cql_format_int}: text notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: val: integer variable in sensitive
      |   | {param_detail}: val: integer variable in sensitive
      |     | {name val}: val: integer variable in sensitive
      |     | {sensitive_attr}: integer sensitive
      |       | {type_int}: integer
      | {create_data_type}: text notnull create_func
        | {notnull}: text notnull
          | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_format_long (val LONG @SENSITIVE) CREATE TEXT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text notnull create_func
    | {name cql_format_long}: text notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: val: longint variable in sensitive
      |   | {param_detail}: val: longint variable in sensitive
      |     | {name val}: val: longint variable in sensitive
      |     | {sensitive_attr}: longint sensitive
      |       | {type_long}: longint
      | {create_data_type}: text notnull create_func
        | {notnull}: text notnull
          | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_format_double (val REAL @SENSITIVE) CREATE TEXT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text notnull create_func
    | {name cql_format_double}: text notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: val: real variable in sensitive
      |   | {param_detail}: val: real variable in sensitive
      |     | {name val}: val: real variable in sensitive
      |     | {sensitive_attr}: real sensitive
      |       | {type_real}: real
      | {create_data_type}: text notnull create_func
        | {notnull}: text notnull
          | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_format_string (val TEXT @SENSITIVE) CREATE TEXT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text notnull create_func
    | {name cql_format_string}: text notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: val: text variable in sensitive
      |   | {param_detail}: val: text variable in sensitive
      |     | {name val}: val: text variable in sensitive
      |     | {sensitive_attr}: text sensitive
      |       | {type_text}: text
      | {create_data_type}: text notnull create_func
        | {notnull}: text notnull
          | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_format_blob (val BLOB @SENSITIVE) CREATE TEXT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text notnull create_func
    | {name cql_format_blob}: text notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: val: blob variable in sensitive
      |   | {param_detail}: val: blob variable in sensitive
      |     | {name val}: val: blob variable in sensitive
      |     | {sensitive_attr}: blob sensitive
      |       | {type_blob}: blob
      | {create_data_type}: text notnull create_func
        | {notnull}: text notnull
          | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_format_object (val OBJECT @SENSITIVE) CREATE TEXT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text notnull create_func
    | {name cql_format_object}: text notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: val: object variable in sensitive
      |   | {param_detail}: val: object variable in sensitive
      |     | {name val}: val: object variable in sensitive
      |     | {sensitive_attr}: object sensitive
      |       | {type_object}: object
      | {create_data_type}: text notnull create_func
        | {notnull}: text notnull
          | {type_text}: text

The statement ending at line XXXX

[[builtin]]
DECLARE FUNC cql_format_null (ignored BOOL @SENSITIVE) CREATE TEXT!;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {declare_func_stmt}: text notnull create_func
    | {name cql_format_null}: text notnull create_func
    | {func_params_return}
      | {params}: ok
      | | {param}: ignored: bool variable in sensitive
      |   | {param_detail}: ignored: bool variable in sensitive
      |     | {name ignored}: ignored: bool variable in sensitive
      |     | {sensitive_attr}: bool sensitive
      |       | {type_bool}: bool
      | {create_data_type}: text notnull create_func
        | {notnull}: text notnull
          | {type_text}: text

The statement ending at line XXXX

[[builtin]]
@OP BOOL : call fmt AS cql_format_bool;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_bool}: bool
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name fmt}
        | {name cql_format_bool}

The statement ending at line XXXX

[[builtin]]
@OP INT : call fmt AS cql_format_int;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_int}: integer
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name fmt}
        | {name cql_format_int}

The statement ending at line XXXX

[[builtin]]
@OP LONG : call fmt AS cql_format_long;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_long}: longint
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name fmt}
        | {name cql_format_long}

The statement ending at line XXXX

[[builtin]]
@OP REAL : call fmt AS cql_format_double;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_real}: real
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name fmt}
        | {name cql_format_double}

The statement ending at line XXXX

[[builtin]]
@OP TEXT : call fmt AS cql_format_string;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_text}: text
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name fmt}
        | {name cql_format_string}

The statement ending at line XXXX

[[builtin]]
@OP BLOB : call fmt AS cql_format_blob;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_blob}: blob
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name fmt}
        | {name cql_format_blob}

The statement ending at line XXXX

[[builtin]]
@OP OBJECT : call fmt AS cql_format_object;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {type_object}: object
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name fmt}
        | {name cql_format_object}

The statement ending at line XXXX

[[builtin]]
@OP NULL : call fmt AS cql_format_null;

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name builtin}
  | {op_stmt}: ok
    | {name NULL}
    | {op_vals}
      | {name call}
      | {op_vals}
        | {name fmt}
        | {name cql_format_null}

The statement ending at line XXXX

@DECLARE_DEPLOYABLE_REGION base;

  {declare_deployable_region_stmt}: base: region deployable
  | {name base}

The statement ending at line XXXX

@DECLARE_DEPLOYABLE_REGION different_region;

  {declare_deployable_region_stmt}: different_region: region deployable
  | {name different_region}

The statement ending at line XXXX

@BEGIN_SCHEMA_REGION base;

  {begin_schema_region_stmt}: ok
  | {name base}

The statement ending at line XXXX

CREATE TABLE foo(
  id INT!,
  rate LONG @DELETE(5, deletor),
  rate_2 LONG @DELETE(4),
  id2 INT @CREATE(4),
  name TEXT @CREATE(5),
  name_2 TEXT @CREATE(6)
);

  {create_table_stmt}: foo: { id: integer notnull, id2: integer, name: text, name_2: text } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name foo}
  | {col_key_list}
    | {col_def}: id: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: rate: longint deleted @delete(5)
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name rate}
      |   | | {type_long}: longint
      |   | {delete_attr}: ok
      |     | {version_annotation}
      |       | {int 5}
      |       | {name deletor}
      | {col_key_list}
        | {col_def}: rate_2: longint deleted @delete(4)
        | | {col_def_type_attrs}: ok
        |   | {col_def_name_type}
        |   | | {name rate_2}
        |   | | {type_long}: longint
        |   | {delete_attr}: ok
        |     | {version_annotation}
        |       | {int 4}
        | {col_key_list}
          | {col_def}: id2: integer @create(4)
          | | {col_def_type_attrs}: ok
          |   | {col_def_name_type}
          |   | | {name id2}
          |   | | {type_int}: integer
          |   | {create_attr}: ok
          |     | {version_annotation}
          |       | {int 4}
          | {col_key_list}
            | {col_def}: name: text @create(5)
            | | {col_def_type_attrs}: ok
            |   | {col_def_name_type}
            |   | | {name name}
            |   | | {type_text}: text
            |   | {create_attr}: ok
            |     | {version_annotation}
            |       | {int 5}
            | {col_key_list}
              | {col_def}: name_2: text @create(6)
                | {col_def_type_attrs}: ok
                  | {col_def_name_type}
                  | | {name name_2}
                  | | {type_text}: text
                  | {create_attr}: ok
                    | {version_annotation}
                      | {int 6}

The statement ending at line XXXX

CREATE TABLE column_deleted_in_this_table(
  id INT,
  being_deleted TEXT @DELETE(6)
);

  {create_table_stmt}: column_deleted_in_this_table: { id: integer } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name column_deleted_in_this_table}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: being_deleted: text deleted @delete(6)
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name being_deleted}
          | | {type_text}: text
          | {delete_attr}: ok
            | {version_annotation}
              | {int 6}

The statement ending at line XXXX

CREATE TABLE column_undeleted_in_this_table(
  id INT,
  being_undeleted TEXT
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name column_undeleted_in_this_table}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: being_undeleted: text
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name being_undeleted}
            | {type_text}: text

The statement ending at line XXXX

CREATE TABLE become_sensitive(
  id2 INT @SENSITIVE,
  name TEXT @SENSITIVE
);

  {create_table_stmt}: become_sensitive: { id2: integer sensitive, name: text sensitive } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name become_sensitive}
  | {col_key_list}
    | {col_def}: id2: integer sensitive
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id2}
    |   | | {type_int}: integer
    |   | {sensitive_attr}: ok
    | {col_key_list}
      | {col_def}: name: text sensitive
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name name}
          | | {type_text}: text
          | {sensitive_attr}: ok

The statement ending at line XXXX

CREATE TABLE t_create_verison_changed(
  id INT
) @CREATE(1);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | | {name t_create_verison_changed}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_delete_verison_changed(
  id INT
) @DELETE(1);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {delete_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | | {name t_delete_verison_changed}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE VIEW t_became_a_view AS
  SELECT 1 AS id;

  {create_view_stmt}: err
  | {int 0}
  | {view_and_attrs}
    | {view_details_select}
      | {view_details}
      | | {name t_became_a_view}
      | {select_stmt}: t_became_a_view: { id: integer notnull }
        | {select_core_list}: t_became_a_view: { id: integer notnull }
        | | {select_core}: t_became_a_view: { id: integer notnull }
        |   | {select_expr_list_con}: t_became_a_view: { id: integer notnull }
        |     | {select_expr_list}: t_became_a_view: { id: integer notnull }
        |     | | {select_expr}: id: integer notnull
        |     |   | {int 1}: integer notnull
        |     |   | {opt_as_alias}
        |     |     | {name id}
        |     | {select_from_etc}: ok
        |       | {select_where}
        |         | {select_groupby}
        |           | {select_having}
        | {select_orderby}
          | {select_limit}
            | {select_offset}

The statement ending at line XXXX

CREATE TABLE t_created_in_wrong_version(
  id INT
) @CREATE(1);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | | {name t_created_in_wrong_version}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_was_correctly_deleted(
  id INT
) @DELETE(1);

  {create_table_stmt}: t_was_correctly_deleted: { id: integer } deleted validated @delete(1)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {delete_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | | {name t_was_correctly_deleted}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_column_name_changed(
  id_ INT
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_name_changed}
  | {col_key_list}
    | {col_def}: id_: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id_}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_column_type_changed(
  id REAL
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_type_changed}
  | {col_key_list}
    | {col_def}: id: real
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_real}: real

The statement ending at line XXXX

CREATE TABLE t_column_attribute_changed(
  id INT!
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_attribute_changed}
  | {col_key_list}
    | {col_def}: id: integer notnull
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name id}
        | | {type_int}: integer
        | {col_attrs_not_null}: ok

The statement ending at line XXXX

CREATE TABLE t_column_delete_version_changed(
  id INT,
  id2 INT @DELETE(1)
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_delete_version_changed}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: id2: integer deleted @delete(1)
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {delete_attr}: ok
            | {version_annotation}
              | {int 1}

The statement ending at line XXXX

CREATE TABLE t_column_create_version_changed(
  id INT,
  id2 INT @CREATE(1)
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_create_version_changed}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: id2: integer @create(1)
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {create_attr}: ok
            | {version_annotation}
              | {int 1}

The statement ending at line XXXX

CREATE TABLE t_column_default_value_changed(
  id INT,
  id2 INT! DEFAULT 2
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_default_value_changed}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: id2: integer notnull has_default
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {col_attrs_not_null}: ok
            | {col_attrs_default}
              | {int 2}: integer notnull

The statement ending at line XXXX

CREATE TABLE t_column_default_value_ok(
  id INT,
  id2 INT! DEFAULT 1
);

  {create_table_stmt}: t_column_default_value_ok: { id: integer, id2: integer notnull has_default } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_default_value_ok}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: id2: integer notnull has_default
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {col_attrs_not_null}: ok
            | {col_attrs_default}
              | {int 1}: integer notnull

The statement ending at line XXXX

CREATE TABLE t_additional_attribute_present(
  a INT!,
  b INT,
  PRIMARY KEY (a, b)
);

  {create_table_stmt}: t_additional_attribute_present: { a: integer notnull partial_pk, b: integer notnull partial_pk } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_additional_attribute_present}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |     | {name b}
      |     | {type_int}: integer
      | {col_key_list}
        | {pk_def}
          | {indexed_columns_conflict_clause}
            | {indexed_columns}
              | {indexed_column}
              | | {name a}: a: integer notnull
              | {indexed_columns}
                | {indexed_column}
                  | {name b}: b: integer

The statement ending at line XXXX

CREATE TABLE t_additional_attribute_mismatch(
  a INT!,
  b INT!,
  PRIMARY KEY (a)
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_additional_attribute_mismatch}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer notnull
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name b}
      |   | | {type_int}: integer
      |   | {col_attrs_not_null}: ok
      | {col_key_list}
        | {pk_def}
          | {indexed_columns_conflict_clause}
            | {indexed_columns}
              | {indexed_column}
                | {name a}: a: integer notnull

The statement ending at line XXXX

CREATE TABLE t_columns_removed(
  id INT
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_columns_removed}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_attribute_added(
  a INT!,
  UNIQUE (a)
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_attribute_added}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {unq_def}
        | {indexed_columns_conflict_clause}
          | {indexed_columns}
            | {indexed_column}
              | {name a}: a: integer notnull

The statement ending at line XXXX

CREATE TABLE t_additional_column(
  a INT!,
  b INT
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_additional_column}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name b}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_additional_column_ok(
  a INT!,
  b INT @CREATE(2),
  c INT @CREATE(6)
);

  {create_table_stmt}: t_additional_column_ok: { a: integer notnull, b: integer, c: integer } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_additional_column_ok}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer @create(2)
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name b}
      |   | | {type_int}: integer
      |   | {create_attr}: ok
      |     | {version_annotation}
      |       | {int 2}
      | {col_key_list}
        | {col_def}: err
          | {col_def_type_attrs}: ok
            | {col_def_name_type}
            | | {name c}
            | | {type_int}: integer
            | {create_attr}: ok
              | {version_annotation}
                | {int 6}

The statement ending at line XXXX

CREATE TEMP TABLE t_becomes_temp_table(
  a INT!,
  b INT
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 1}
  | | {name t_becomes_temp_table}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name b}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_new_table_ok(
  a INT!,
  b INT
) @CREATE(26);

  {create_table_stmt}: t_new_table_ok: { a: integer notnull, b: integer } @create(26)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 26}
  | | {name t_new_table_ok}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name b}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_new_table_no_annotation(
  a INT!,
  b INT
);

test/sem_test_prev.sql:XXXX:1: error: in create_table_stmt : CQL0309: new table must be added with @create(26) or later 't_new_table_no_annotation'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_new_table_no_annotation}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name b}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_new_table_stale_annotation(
  a INT!,
  b INT
) @CREATE(2);

test/sem_test_prev.sql:XXXX:1: error: in create_table_stmt : CQL0309: new table must be added with @create(26) or later 't_new_table_stale_annotation'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 2}
  | | {name t_new_table_stale_annotation}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name b}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_new_table_create_and_delete(
  a INT!,
  b INT @CREATE(6) @DELETE(7)
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_new_table_create_and_delete}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer deleted @create(6) @delete(7)
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name b}
          | | {type_int}: integer
          | {create_attr}: ok
            | {version_annotation}
            | | {int 6}
            | {delete_attr}
              | {version_annotation}
                | {int 7}

The statement ending at line XXXX

CREATE TABLE t_new_legit_column(
  a INT!,
  b INT @CREATE(6)
);

  {create_table_stmt}: t_new_legit_column: { a: integer notnull, b: integer } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_new_legit_column}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: err
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name b}
          | | {type_int}: integer
          | {create_attr}: ok
            | {version_annotation}
              | {int 6}

The statement ending at line XXXX

CREATE TABLE with_create_migrator(
  id INT
) @CREATE(1, ACreateMigrator);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | |     | {name ACreateMigrator}
  | | {name with_create_migrator}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE with_delete_migrator(
  id INT
) @DELETE(1, ADeleteMigrator);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {delete_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | |     | {name ADeleteMigrator}
  | | {name with_delete_migrator}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE view_becomes_a_table(
  id INT
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name view_becomes_a_table}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE VIEW view_was_temp_but_now_it_is_not AS
  SELECT 1 AS X;

  {create_view_stmt}: view_was_temp_but_now_it_is_not: { X: integer notnull }
  | {int 0}
  | {view_and_attrs}
    | {view_details_select}
      | {view_details}
      | | {name view_was_temp_but_now_it_is_not}
      | {select_stmt}: view_was_temp_but_now_it_is_not: { X: integer notnull }
        | {select_core_list}: view_was_temp_but_now_it_is_not: { X: integer notnull }
        | | {select_core}: view_was_temp_but_now_it_is_not: { X: integer notnull }
        |   | {select_expr_list_con}: view_was_temp_but_now_it_is_not: { X: integer notnull }
        |     | {select_expr_list}: view_was_temp_but_now_it_is_not: { X: integer notnull }
        |     | | {select_expr}: X: integer notnull
        |     |   | {int 1}: integer notnull
        |     |   | {opt_as_alias}
        |     |     | {name X}
        |     | {select_from_etc}: ok
        |       | {select_where}
        |         | {select_groupby}
        |           | {select_having}
        | {select_orderby}
          | {select_limit}
            | {select_offset}

The statement ending at line XXXX

CREATE VIEW view_created_with_no_annotation AS
  SELECT 1 AS X;

  {create_view_stmt}: view_created_with_no_annotation: { X: integer notnull }
  | {int 0}
  | {view_and_attrs}
    | {view_details_select}
      | {view_details}
      | | {name view_created_with_no_annotation}
      | {select_stmt}: view_created_with_no_annotation: { X: integer notnull }
        | {select_core_list}: view_created_with_no_annotation: { X: integer notnull }
        | | {select_core}: view_created_with_no_annotation: { X: integer notnull }
        |   | {select_expr_list_con}: view_created_with_no_annotation: { X: integer notnull }
        |     | {select_expr_list}: view_created_with_no_annotation: { X: integer notnull }
        |     | | {select_expr}: X: integer notnull
        |     |   | {int 1}: integer notnull
        |     |   | {opt_as_alias}
        |     |     | {name X}
        |     | {select_from_etc}: ok
        |       | {select_where}
        |         | {select_groupby}
        |           | {select_having}
        | {select_orderby}
          | {select_limit}
            | {select_offset}

The statement ending at line XXXX

CREATE INDEX this_index_was_created_with_no_annotation ON foo (id);

  {create_index_stmt}: ok
  | {create_index_on_list}
  | | {name this_index_was_created_with_no_annotation}
  | | {name foo}
  | {flags_names_attrs}
    | {int 0}
    | {connector}
      | {index_names_and_attrs}
        | {indexed_columns}
          | {indexed_column}
            | {name id}: id: integer notnull

The statement ending at line XXXX

CREATE TABLE create_column_migrate_test(
  id INT UNIQUE,
  id2 INT @CREATE(2, ChangedColumnCreateMigrator)
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name create_column_migrate_test}
  | {col_key_list}
    | {col_def}: id: integer unique_key
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_unique}: ok
    | {col_key_list}
      | {col_def}: id2: integer @create(2)
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {create_attr}: ok
            | {version_annotation}
              | {int 2}
              | {name ChangedColumnCreateMigrator}

The statement ending at line XXXX

CREATE TABLE delete_column_migrate_test(
  id INT,
  id2 INT @DELETE(2, ChangedColumnDeleteMigrator)
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name delete_column_migrate_test}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: id2: integer deleted @delete(2)
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {delete_attr}: ok
            | {version_annotation}
              | {int 2}
              | {name ChangedColumnDeleteMigrator}

The statement ending at line XXXX

CREATE TABLE fk_facet(
  id INT,
  FOREIGN KEY (id) REFERENCES create_column_migrate_test (id) ON DELETE CASCADE
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name fk_facet}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {fk_def}: ok
        | {fk_info}
          | {name_list}
          | | {name id}: id: integer
          | {fk_target_options}
            | {fk_target}
            | | {name create_column_migrate_test}
            | | {name_list}
            |   | {name id}: id: integer
            | {int 3}

The statement ending at line XXXX

CREATE TABLE cannot_change_to_recreate(
  id INT
) @RECREATE;

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name cannot_change_to_recreate}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE ok_to_delete_recreate_table(
  id INT
) @RECREATE @DELETE;

  {create_table_stmt}: ok_to_delete_recreate_table: { id: integer } deleted validated @delete(1) @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | |   | {delete_attr}
  | | {name ok_to_delete_recreate_table}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE ok_to_create_recreate_table(
  id INT
) @CREATE(26, cql:from_recreate);

  {create_table_stmt}: ok_to_create_recreate_table: { id: integer } validated @create(26)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 26}
  | |     | {dot}: ok
  | |       | {name cql}
  | |       | {name from_recreate}
  | | {name ok_to_create_recreate_table}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE not_ok_to_create_recreate_table(
  id INT
) @CREATE(6);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 6}
  | | {name not_ok_to_create_recreate_table}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE recreate_deleted_in_the_past(
  id INT
) @RECREATE @DELETE;

  {create_table_stmt}: recreate_deleted_in_the_past: { id: integer } deleted validated @delete(1) @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | |   | {delete_attr}
  | | {name recreate_deleted_in_the_past}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE recreate_created_in_the_past(
  id INT
) @CREATE(2, cql:from_recreate);

test/sem_test_prev.sql:XXXX:1: error: in create_table_stmt : CQL0399: table must leave @recreate management with @create(26) or later 'recreate_created_in_the_past'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 2}
  | |     | {dot}: ok
  | |       | {name cql}
  | |       | {name from_recreate}
  | | {name recreate_created_in_the_past}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE recreate_feel_the_power(
  id INT,
  payload REAL,
  whatever TEXT
) @RECREATE;

  {create_table_stmt}: recreate_feel_the_power: { id: integer, payload: real, whatever: text } validated @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name recreate_feel_the_power}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: payload: real
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |     | {name payload}
      |     | {type_real}: real
      | {col_key_list}
        | {col_def}: whatever: text
          | {col_def_type_attrs}: ok
            | {col_def_name_type}
              | {name whatever}
              | {type_text}: text

The statement ending at line XXXX

CREATE TABLE direct_to_recreate(
  id INT
) @RECREATE;

  {create_table_stmt}: direct_to_recreate: { id: integer } @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name direct_to_recreate}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TRIGGER trigger_added_no_problemo
  BEFORE DELETE ON foo
BEGIN
  SELECT old.id;
END;

  {create_trigger_stmt}: ok
  | {int 0}
  | {trigger_body_vers}
    | {trigger_def}
      | {name trigger_added_no_problemo}
      | {trigger_condition}
        | {int 4}
        | {trigger_op_target}
          | {trigger_operation}
          | | {int 64}
          | {trigger_target_action}
            | {name foo}: foo: { id: integer notnull, id2: integer, name: text, name_2: text }
            | {trigger_action}
              | {int 0}
              | {trigger_when_stmts}
                | {stmt_list}: ok
                  | {select_stmt}: _select_: { id: integer notnull }
                    | {select_core_list}: _select_: { id: integer notnull }
                    | | {select_core}: _select_: { id: integer notnull }
                    |   | {select_expr_list_con}: _select_: { id: integer notnull }
                    |     | {select_expr_list}: _select_: { id: integer notnull }
                    |     | | {select_expr}: id: integer notnull
                    |     |   | {dot}: id: integer notnull
                    |     |     | {name old}
                    |     |     | {name id}
                    |     | {select_from_etc}: ok
                    |       | {select_where}
                    |         | {select_groupby}
                    |           | {select_having}
                    | {select_orderby}
                      | {select_limit}
                        | {select_offset}

The statement ending at line XXXX

CREATE TRIGGER trigger_will_be_deleted
  BEFORE DELETE ON foo
BEGIN
  SELECT old.id;
END @DELETE(2);

  {create_trigger_stmt}: ok deleted @delete(2)
  | {int 0}
  | {trigger_body_vers}
    | {trigger_def}
    | | {name trigger_will_be_deleted}
    | | {trigger_condition}
    |   | {int 4}
    |   | {trigger_op_target}
    |     | {trigger_operation}
    |     | | {int 64}
    |     | {trigger_target_action}
    |       | {name foo}: foo: { id: integer notnull, id2: integer, name: text, name_2: text }
    |       | {trigger_action}
    |         | {int 0}
    |         | {trigger_when_stmts}
    |           | {stmt_list}: ok
    |             | {select_stmt}: _select_: { id: integer notnull }
    |               | {select_core_list}: _select_: { id: integer notnull }
    |               | | {select_core}: _select_: { id: integer notnull }
    |               |   | {select_expr_list_con}: _select_: { id: integer notnull }
    |               |     | {select_expr_list}: _select_: { id: integer notnull }
    |               |     | | {select_expr}: id: integer notnull
    |               |     |   | {dot}: id: integer notnull
    |               |     |     | {name old}
    |               |     |     | {name id}
    |               |     | {select_from_etc}: ok
    |               |       | {select_where}
    |               |         | {select_groupby}
    |               |           | {select_having}
    |               | {select_orderby}
    |                 | {select_limit}
    |                   | {select_offset}
    | {delete_attr}
      | {version_annotation}
        | {int 2}

The statement ending at line XXXX

CREATE TABLE t_removed_facet(
  id INT!
);

  {create_table_stmt}: t_removed_facet: { id: integer notnull } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_removed_facet}
  | {col_key_list}
    | {col_def}: id: integer notnull
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name id}
        | | {type_int}: integer
        | {col_attrs_not_null}: ok

The statement ending at line XXXX

CREATE TABLE t_subtle_column_change(
  id INT REFERENCES create_column_migrate_test (id)
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_subtle_column_change}
  | {col_key_list}
    | {col_def}: id: integer foreign_key
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name id}
        | | {type_int}: integer
        | {col_attrs_fk}: ok
          | {fk_target_options}
            | {fk_target}
            | | {name create_column_migrate_test}
            | | {name_list}
            |   | {name id}: id: integer
            | {int 0}

The statement ending at line XXXX

CREATE TABLE t_several_columns_added_interleaved(
  col1 INT,
  col2 INT @CREATE(2),
  col3 INT @CREATE(2),
  PRIMARY KEY (col1)
);

  {create_table_stmt}: t_several_columns_added_interleaved: { col1: integer notnull partial_pk, col2: integer, col3: integer } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_several_columns_added_interleaved}
  | {col_key_list}
    | {col_def}: col1: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name col1}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: err
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name col2}
      |   | | {type_int}: integer
      |   | {create_attr}: ok
      |     | {version_annotation}
      |       | {int 2}
      | {col_key_list}
        | {col_def}: err
        | | {col_def_type_attrs}: ok
        |   | {col_def_name_type}
        |   | | {name col3}
        |   | | {type_int}: integer
        |   | {create_attr}: ok
        |     | {version_annotation}
        |       | {int 2}
        | {col_key_list}
          | {pk_def}
            | {indexed_columns_conflict_clause}
              | {indexed_columns}
                | {indexed_column}
                  | {name col1}: col1: integer

The statement ending at line XXXX

@SCHEMA_AD_HOC_MIGRATION(2, WhoopsItChanged);

  {schema_ad_hoc_migration_stmt}: err
  | {version_annotation}
    | {int 2}
    | {name WhoopsItChanged}

The statement ending at line XXXX

@SCHEMA_AD_HOC_MIGRATION(3, MigrateGoodToGo);

  {schema_ad_hoc_migration_stmt}: ok validated @create(3)
  | {version_annotation}
    | {int 3}
    | {name MigrateGoodToGo}

The statement ending at line XXXX

@SCHEMA_AD_HOC_MIGRATION(3, MigrateInThePast);

test/sem_test_prev.sql:XXXX:1: error: in schema_ad_hoc_migration_stmt : new ad hoc rule must be added at version 26 or later 'MigrateInThePast'

  {schema_ad_hoc_migration_stmt}: err
  | {version_annotation}
    | {int 3}
    | {name MigrateInThePast}

The statement ending at line XXXX

@SCHEMA_AD_HOC_MIGRATION(26, MigrateNewCurrent);

  {schema_ad_hoc_migration_stmt}: ok @create(26)
  | {version_annotation}
    | {int 26}
    | {name MigrateNewCurrent}

The statement ending at line XXXX

CREATE TABLE TChanging(
  id INT
);

test/sem_test_prev.sql:XXXX:1: error: in create_table_stmt : CQL0311: object's deployment region changed from 'different_region' to 'base' 'TChanging'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name TChanging}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE INDEX IChanging ON TChanging (id);

test/sem_test_prev.sql:XXXX:1: error: in create_index_stmt : CQL0311: object's deployment region changed from 'different_region' to 'base' 'IChanging'

  {create_index_stmt}: err
  | {create_index_on_list}
  | | {name IChanging}
  | | {name TChanging}
  | {flags_names_attrs}
    | {int 0}
    | {connector}
      | {index_names_and_attrs}
        | {indexed_columns}
          | {indexed_column}
            | {name id}: id: integer

The statement ending at line XXXX

CREATE VIEW VChanging AS
  SELECT TChanging.id
    FROM TChanging;

test/sem_test_prev.sql:XXXX:1: error: in create_view_stmt : CQL0311: object's deployment region changed from 'different_region' to 'base' 'VChanging'

  {create_view_stmt}: err
  | {int 0}
  | {view_and_attrs}
    | {view_details_select}
      | {view_details}
      | | {name VChanging}
      | {select_stmt}: VChanging: { id: integer }
        | {select_core_list}: VChanging: { id: integer }
        | | {select_core}: VChanging: { id: integer }
        |   | {select_expr_list_con}: VChanging: { id: integer }
        |     | {select_expr_list}: VChanging: { id: integer }
        |     | | {select_expr}: id: integer
        |     |   | {dot}: id: integer
        |     |     | {name TChanging}
        |     |     | {name id}
        |     | {select_from_etc}: TABLE { TChanging: TChanging }
        |       | {table_or_subquery_list}: TABLE { TChanging: TChanging }
        |       | | {table_or_subquery}: TABLE { TChanging: TChanging }
        |       |   | {name TChanging}: TABLE { TChanging: TChanging }
        |       | {select_where}
        |         | {select_groupby}
        |           | {select_having}
        | {select_orderby}
          | {select_limit}
            | {select_offset}

The statement ending at line XXXX

CREATE TRIGGER TrigChanging
  BEFORE DELETE ON foo
BEGIN
  SELECT old.id;
END;

test/sem_test_prev.sql:XXXX:1: error: in create_trigger_stmt : CQL0311: object's deployment region changed from 'different_region' to 'base' 'TrigChanging'

  {create_trigger_stmt}: err
  | {int 0}
  | {trigger_body_vers}
    | {trigger_def}
      | {name TrigChanging}
      | {trigger_condition}
        | {int 4}
        | {trigger_op_target}
          | {trigger_operation}
          | | {int 64}
          | {trigger_target_action}
            | {name foo}: foo: { id: integer notnull, id2: integer, name: text, name_2: text }
            | {trigger_action}
              | {int 0}
              | {trigger_when_stmts}
                | {stmt_list}: ok
                  | {select_stmt}: _select_: { id: integer notnull }
                    | {select_core_list}: _select_: { id: integer notnull }
                    | | {select_core}: _select_: { id: integer notnull }
                    |   | {select_expr_list_con}: _select_: { id: integer notnull }
                    |     | {select_expr_list}: _select_: { id: integer notnull }
                    |     | | {select_expr}: id: integer notnull
                    |     |   | {dot}: id: integer notnull
                    |     |     | {name old}
                    |     |     | {name id}
                    |     | {select_from_etc}: ok
                    |       | {select_where}
                    |         | {select_groupby}
                    |           | {select_having}
                    | {select_orderby}
                      | {select_limit}
                        | {select_offset}

The statement ending at line XXXX

@SCHEMA_AD_HOC_MIGRATION(2, AdHocChanging);

test/sem_test_prev.sql:XXXX:1: error: in schema_ad_hoc_migration_stmt : CQL0311: object's deployment region changed from 'different_region' to 'base' 'AdHocChanging'

  {schema_ad_hoc_migration_stmt}: err
  | {version_annotation}
    | {int 2}
    | {name AdHocChanging}

The statement ending at line XXXX

@END_SCHEMA_REGION;

  {end_schema_region_stmt}: ok

The statement ending at line XXXX

@DECLARE_SCHEMA_REGION SomeLeaf;

  {declare_schema_region_stmt}: SomeLeaf: region
  | {name SomeLeaf}

The statement ending at line XXXX

@BEGIN_SCHEMA_REGION SomeLeaf;

  {begin_schema_region_stmt}: ok
  | {name SomeLeaf}

The statement ending at line XXXX

CREATE TABLE TableWithDeferredOwner(
  id INT
);

test/sem_test_prev.sql:XXXX:1: error: in create_table_stmt : CQL0311: object's deployment region changed from 'DeployableRegion1' to 'DeployableRegion2' 'TableWithDeferredOwner'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name TableWithDeferredOwner}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

@END_SCHEMA_REGION;

  {end_schema_region_stmt}: ok

The statement ending at line XXXX

@DECLARE_DEPLOYABLE_REGION DeployableRegion2 USING SomeLeaf;

  {declare_deployable_region_stmt}: DeployableRegion2: region deployable
  | {name DeployableRegion2}
  | {region_list}
    | {region_spec}
      | {name SomeLeaf}
      | {int 0}

The statement ending at line XXXX

@DECLARE_SCHEMA_REGION simple_region_1;

  {declare_schema_region_stmt}: simple_region_1: region
  | {name simple_region_1}

The statement ending at line XXXX

@BEGIN_SCHEMA_REGION simple_region_1;

  {begin_schema_region_stmt}: ok
  | {name simple_region_1}

The statement ending at line XXXX

CREATE TABLE logical_moving_T1(
  id INT PRIMARY KEY
);

  {create_table_stmt}: logical_moving_T1: { id: integer notnull primary_key } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name logical_moving_T1}
  | {col_key_list}
    | {col_def}: id: integer notnull primary_key
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name id}
        | | {type_int}: integer
        | {col_attrs_pk}: ok
          | {autoinc_and_conflict_clause}

The statement ending at line XXXX

CREATE TABLE logical_moving_T2(
  id INT REFERENCES logical_moving_T1 (id),
  name TEXT
);

  {create_table_stmt}: logical_moving_T2: { id: integer foreign_key, name: text } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name logical_moving_T2}
  | {col_key_list}
    | {col_def}: id: integer foreign_key
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_fk}: ok
    |     | {fk_target_options}
    |       | {fk_target}
    |       | | {name logical_moving_T1}
    |       | | {name_list}
    |       |   | {name id}: id: integer notnull
    |       | {int 0}
    | {col_key_list}
      | {col_def}: name: text
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name name}
            | {type_text}: text

The statement ending at line XXXX

@END_SCHEMA_REGION;

  {end_schema_region_stmt}: ok

The statement ending at line XXXX

@DECLARE_SCHEMA_REGION high_numbered_thing;

  {declare_schema_region_stmt}: high_numbered_thing: region
  | {name high_numbered_thing}

The statement ending at line XXXX

@BEGIN_SCHEMA_REGION high_numbered_thing;

  {begin_schema_region_stmt}: ok
  | {name high_numbered_thing}

The statement ending at line XXXX

CREATE TABLE high_numbered_thing(
  id INT
) @CREATE(9999);

  {create_table_stmt}: high_numbered_thing: { id: integer } validated @create(9999)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 9999}
  | | {name high_numbered_thing}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

@END_SCHEMA_REGION;

  {end_schema_region_stmt}: ok

The statement ending at line XXXX

CREATE TABLE table_staying(
  col1 INT PRIMARY KEY!
) @RECREATE(my_recreate_group);

  {create_table_stmt}: table_staying: { col1: integer notnull primary_key } validated @recreate(my_recreate_group)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | |   | {name my_recreate_group}
  | | {name table_staying}
  | {col_key_list}
    | {col_def}: col1: integer notnull primary_key
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name col1}
        | | {type_int}: integer
        | {col_attrs_pk}: ok
          | {autoinc_and_conflict_clause}
          | {col_attrs_not_null}

The statement ending at line XXXX

CREATE TABLE table_going(
  col1 TEXT,
  col2 INT,
  FOREIGN KEY (col2) REFERENCES table_staying (col1) ON UPDATE CASCADE ON DELETE CASCADE
) @RECREATE(my_recreate_group) @DELETE;

  {create_table_stmt}: table_going: { col1: text, col2: integer foreign_key } deleted validated @delete(1) @recreate(my_recreate_group)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | |   | {name my_recreate_group}
  | |   | {delete_attr}
  | | {name table_going}
  | {col_key_list}
    | {col_def}: col1: text
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name col1}
    |     | {type_text}: text
    | {col_key_list}
      | {col_def}: col2: integer
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |     | {name col2}
      |     | {type_int}: integer
      | {col_key_list}
        | {fk_def}: ok
          | {fk_info}
            | {name_list}
            | | {name col2}: col2: integer
            | {fk_target_options}
              | {fk_target}
              | | {name table_staying}
              | | {name_list}
              |   | {name col1}: col1: integer notnull
              | {int 51}

The statement ending at line XXXX

CREATE TABLE adding_with_migrators_ok(
  id INT PRIMARY KEY,
  id2 INT @DELETE(3, delete_me),
  id3 INT @CREATE(3, create_me)
) @CREATE(2);

  {create_table_stmt}: adding_with_migrators_ok: { id: integer notnull primary_key, id3: integer } validated @create(2)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 2}
  | | {name adding_with_migrators_ok}
  | {col_key_list}
    | {col_def}: id: integer notnull primary_key
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_pk}: ok
    |     | {autoinc_and_conflict_clause}
    | {col_key_list}
      | {col_def}: id2: integer deleted @delete(3)
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name id2}
      |   | | {type_int}: integer
      |   | {delete_attr}: ok
      |     | {version_annotation}
      |       | {int 3}
      |       | {name delete_me}
      | {col_key_list}
        | {col_def}: err
          | {col_def_type_attrs}: ok
            | {col_def_name_type}
            | | {name id3}
            | | {type_int}: integer
            | {create_attr}: ok
              | {version_annotation}
                | {int 3}
                | {name create_me}

The statement ending at line XXXX

DECLARE ENUM foo_enum INT (
  a = 1,
  b = 2
);

  {declare_enum_stmt}: foo_enum: integer<foo_enum> notnull
  | {typed_name}: foo_enum: integer<foo_enum> notnull
  | | {name foo_enum}
  | | {type_int}: foo_enum: integer<foo_enum> notnull
  | {enum_values}
    | {enum_value}
    | | {name a}: integer = 1 notnull
    | | {int 1}: integer notnull
    | {enum_values}
      | {enum_value}
        | {name b}: integer = 2 notnull
        | {int 2}: integer notnull

The statement ending at line XXXX

CREATE TABLE foo_with_check(
  x INT CHECK(x = 1) 
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name foo_with_check}
  | {col_key_list}
    | {col_def}: x: integer has_check
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name x}
        | | {type_int}: integer
        | {col_attrs_check}: ok
          | {eq}: bool
            | {name x}: x: integer has_check
            | {int 1}: integer<foo_enum> notnull

The statement ending at line XXXX

CREATE VIRTUAL TABLE unchanged_virtual USING my_virtual (goo) AS (
  id INT
);

  {create_virtual_table_stmt}: unchanged_virtual: { id: integer } virtual @recreate
  | {module_info}
  | | {name my_virtual}
  | | {misc_attr_value_list}
  |   | {name goo}
  | {create_table_stmt}: unchanged_virtual: { id: integer } validated virtual @recreate
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | | {recreate_attr}
    | | {name unchanged_virtual}
    | {col_key_list}
      | {col_def}: id: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id}
            | {type_int}: integer

The statement ending at line XXXX

CREATE VIRTUAL TABLE deleted_virtual USING my_virtual (goo) AS (
  id INT
) @DELETE(3, cql:module_must_not_be_deleted_see_docs_for_CQL0392);

  {create_virtual_table_stmt}: deleted_virtual: { id: integer } deleted virtual @delete(3)
  | {module_info}
  | | {name my_virtual}
  | | {misc_attr_value_list}
  |   | {name goo}
  | {create_table_stmt}: deleted_virtual: { id: integer } deleted validated virtual @delete(3)
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | | {delete_attr}
    | |   | {version_annotation}
    | |     | {int 3}
    | |     | {dot}: ok
    | |       | {name cql}
    | |       | {name module_must_not_be_deleted_see_docs_for_CQL0392}
    | | {name deleted_virtual}
    | {col_key_list}
      | {col_def}: id: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id}
            | {type_int}: integer

The statement ending at line XXXX

CREATE VIRTUAL TABLE undead_virtual USING my_virtual (goo) AS (
  id INT
);

  {create_virtual_table_stmt}: undead_virtual: { id: integer } virtual @recreate
  | {module_info}
  | | {name my_virtual}
  | | {misc_attr_value_list}
  |   | {name goo}
  | {create_table_stmt}: err
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | | {recreate_attr}
    | | {name undead_virtual}
    | {col_key_list}
      | {col_def}: id: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id}
            | {type_int}: integer

The statement ending at line XXXX

CREATE VIRTUAL TABLE changing_virtual USING my_virtual (goo, goo) AS (
  id INT,
  t TEXT
);

  {create_virtual_table_stmt}: changing_virtual: { id: integer, t: text } virtual @recreate
  | {module_info}
  | | {name my_virtual}
  | | {misc_attr_value_list}
  |   | {name goo}
  |   | {misc_attr_value_list}
  |     | {name goo}
  | {create_table_stmt}: changing_virtual: { id: integer, t: text } validated virtual @recreate
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | | {recreate_attr}
    | | {name changing_virtual}
    | {col_key_list}
      | {col_def}: id: integer
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |     | {name id}
      |     | {type_int}: integer
      | {col_key_list}
        | {col_def}: t: text
          | {col_def_type_attrs}: ok
            | {col_def_name_type}
              | {name t}
              | {type_text}: text

The statement ending at line XXXX

CREATE VIRTUAL TABLE delete_change_virtual USING my_virtual (goo) AS (
  id INT
) @DELETE(1, cql:module_must_not_be_deleted_see_docs_for_CQL0392);

  {create_virtual_table_stmt}: delete_change_virtual: { id: integer } deleted virtual @delete(1)
  | {module_info}
  | | {name my_virtual}
  | | {misc_attr_value_list}
  |   | {name goo}
  | {create_table_stmt}: err
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | | {delete_attr}
    | |   | {version_annotation}
    | |     | {int 1}
    | |     | {dot}: ok
    | |       | {name cql}
    | |       | {name module_must_not_be_deleted_see_docs_for_CQL0392}
    | | {name delete_change_virtual}
    | {col_key_list}
      | {col_def}: id: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE conflict_clause_t(
  id INT! ON CONFLICT FAIL
);

  {create_table_stmt}: conflict_clause_t: { id: integer notnull } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name conflict_clause_t}
  | {col_key_list}
    | {col_def}: id: integer notnull
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name id}
        | | {type_int}: integer
        | {col_attrs_not_null}: ok
          | {int 2}

The statement ending at line XXXX

CREATE TABLE conflict_clause_pk(
  id INT!,
  CONSTRAINT pk1 PRIMARY KEY (id) ON CONFLICT ROLLBACK
);

  {create_table_stmt}: conflict_clause_pk: { id: integer notnull partial_pk } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name conflict_clause_pk}
  | {col_key_list}
    | {col_def}: id: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {pk_def}
        | {name pk1}
        | {indexed_columns_conflict_clause}
          | {indexed_columns}
          | | {indexed_column}
          |   | {name id}: id: integer notnull
          | {int 0}

The statement ending at line XXXX

CREATE TABLE dropping_this(
  f1 INT,
  f2 TEXT
) @DELETE(5);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {delete_attr}
  | |   | {version_annotation}
  | |     | {int 5}
  | | {name dropping_this}
  | {col_key_list}
    | {col_def}: f1: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name f1}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: f2: text
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name f2}
            | {type_text}: text

The statement ending at line XXXX

CREATE TABLE losing_group(
  id INT
) @RECREATE;

  {create_table_stmt}: losing_group: { id: integer } @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name losing_group}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE gaining_group(
  id INT
) @RECREATE(new_group);

  {create_table_stmt}: gaining_group: { id: integer } validated @recreate(new_group)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | |   | {name new_group}
  | | {name gaining_group}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE unsub_resub_trickery(
  id INT
);

  {create_table_stmt}: unsub_resub_trickery: { id: integer } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name unsub_resub_trickery}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

@UNSUB(unsub_resub_trickery);

  {schema_unsub_stmt}: ok
  | {version_annotation}
    | {int 1}
    | {name unsub_resub_trickery}

The statement ending at line XXXX

[[backing_table]]
CREATE TABLE backing(
  k BLOB PRIMARY KEY,
  v BLOB
);

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name backing_table}
  | {create_table_stmt}: backing: { k: blob notnull primary_key, v: blob } validated backing
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | {name backing}
    | {col_key_list}
      | {col_def}: k: blob notnull primary_key
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name k}
      |   | | {type_blob}: blob
      |   | {col_attrs_pk}: ok
      |     | {autoinc_and_conflict_clause}
      | {col_key_list}
        | {col_def}: v: blob
          | {col_def_type_attrs}: ok
            | {col_def_name_type}
              | {name v}
              | {type_blob}: blob

The statement ending at line XXXX

[[backed_by=backing]]
CREATE TABLE backed(
  id INT! PRIMARY KEY,
  val TEXT!
);

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |   | | {name cql}
  |   | | {name backed_by}
  |   | {name backing}: ok
  | {create_table_stmt}: backed: { id: integer notnull primary_key, val: text notnull } validated backed
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | {name backed}
    | {col_key_list}
      | {col_def}: id: integer notnull primary_key
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name id}
      |   | | {type_int}: integer
      |   | {col_attrs_not_null}: ok
      |     | {col_attrs_pk}
      |       | {autoinc_and_conflict_clause}
      | {col_key_list}
        | {col_def}: val: text notnull
          | {col_def_type_attrs}: ok
            | {col_def_name_type}
            | | {name val}
            | | {type_text}: text
            | {col_attrs_not_null}: ok

The statement ending at line XXXX

[[backed_by=backing]]
CREATE TABLE new_backed_table(
  id INT! PRIMARY KEY,
  val TEXT!
);

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |   | | {name cql}
  |   | | {name backed_by}
  |   | {name backing}: ok
  | {create_table_stmt}: new_backed_table: { id: integer notnull primary_key, val: text notnull } backed
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | {name new_backed_table}
    | {col_key_list}
      | {col_def}: id: integer notnull primary_key
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name id}
      |   | | {type_int}: integer
      |   | {col_attrs_not_null}: ok
      |     | {col_attrs_pk}
      |       | {autoinc_and_conflict_clause}
      | {col_key_list}
        | {col_def}: val: text notnull
          | {col_def_type_attrs}: ok
            | {col_def_name_type}
            | | {name val}
            | | {type_text}: text
            | {col_attrs_not_null}: ok

The statement ending at line XXXX

CREATE TABLE transitioning_to_baseline(
  x INT,
  y INT
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name transitioning_to_baseline}
  | {col_key_list}
    | {col_def}: x: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name x}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: y: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name y}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE resubscribing(
  id INT
);

  {create_table_stmt}: resubscribing: { id: integer } validated
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name resubscribing}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

@PREVIOUS_SCHEMA;

  {previous_schema_stmt}: ok

The statement ending at line XXXX

@DECLARE_DEPLOYABLE_REGION base;

  {declare_deployable_region_stmt}: base: region deployable
  | {name base}

The statement ending at line XXXX

@DECLARE_DEPLOYABLE_REGION different_region;

  {declare_deployable_region_stmt}: different_region: region deployable
  | {name different_region}

The statement ending at line XXXX

@BEGIN_SCHEMA_REGION base;

  {begin_schema_region_stmt}: ok
  | {name base}

The statement ending at line XXXX

CREATE TABLE foo(
  id INT!,
  rate LONG @DELETE(5, deletor),
  rate_2 LONG @DELETE(4),
  id2 INT @CREATE(4),
  name TEXT @CREATE(5),
  name_2 TEXT @CREATE(6)
);

  {create_table_stmt}: foo: { id: integer notnull, id2: integer, name: text, name_2: text }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name foo}
  | {col_key_list}
    | {col_def}: id: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: rate: longint deleted @delete(5)
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name rate}
      |   | | {type_long}: longint
      |   | {delete_attr}: ok
      |     | {version_annotation}
      |       | {int 5}
      |       | {name deletor}
      | {col_key_list}
        | {col_def}: rate_2: longint deleted @delete(4)
        | | {col_def_type_attrs}: ok
        |   | {col_def_name_type}
        |   | | {name rate_2}
        |   | | {type_long}: longint
        |   | {delete_attr}: ok
        |     | {version_annotation}
        |       | {int 4}
        | {col_key_list}
          | {col_def}: id2: integer @create(4)
          | | {col_def_type_attrs}: ok
          |   | {col_def_name_type}
          |   | | {name id2}
          |   | | {type_int}: integer
          |   | {create_attr}: ok
          |     | {version_annotation}
          |       | {int 4}
          | {col_key_list}
            | {col_def}: name: text @create(5)
            | | {col_def_type_attrs}: ok
            |   | {col_def_name_type}
            |   | | {name name}
            |   | | {type_text}: text
            |   | {create_attr}: ok
            |     | {version_annotation}
            |       | {int 5}
            | {col_key_list}
              | {col_def}: name_2: text @create(6)
                | {col_def_type_attrs}: ok
                  | {col_def_name_type}
                  | | {name name_2}
                  | | {type_text}: text
                  | {create_attr}: ok
                    | {version_annotation}
                      | {int 6}

The statement ending at line XXXX

CREATE TABLE column_deleted_in_this_table(
  id INT,
  being_deleted TEXT
);

  {create_table_stmt}: column_deleted_in_this_table: { id: integer, being_deleted: text }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name column_deleted_in_this_table}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: being_deleted: text
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name being_deleted}
            | {type_text}: text

The statement ending at line XXXX

CREATE TABLE column_undeleted_in_this_table(
  id INT,
  being_undeleted TEXT @DELETE(6)
);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0122: column current delete version not equal to previous delete version 'being_undeleted'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name column_undeleted_in_this_table}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: err
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name being_undeleted}
          | | {type_text}: text
          | {delete_attr}: ok
            | {version_annotation}
              | {int 6}

The statement ending at line XXXX

CREATE TABLE become_sensitive(
  id2 INT,
  name TEXT
);

  {create_table_stmt}: become_sensitive: { id2: integer, name: text }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name become_sensitive}
  | {col_key_list}
    | {col_def}: id2: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id2}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: name: text
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name name}
            | {type_text}: text

The statement ending at line XXXX

CREATE TABLE t_create_verison_changed(
  id INT
) @CREATE(2);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0115: current create version not equal to previous create version for 't_create_verison_changed'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 2}
  | | {name t_create_verison_changed}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_delete_verison_changed(
  id INT
) @DELETE(2);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0116: current delete version not equal to previous delete version for 't_delete_verison_changed'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {delete_attr}
  | |   | {version_annotation}
  | |     | {int 2}
  | | {name t_delete_verison_changed}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_not_present_in_new_schema(
  id INT
);

test/sem_test_prev.sql:XXXX:1: error: in create_table_stmt : CQL0126: table was present but now it does not exist (use @delete instead) 't_not_present_in_new_schema'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_not_present_in_new_schema}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_became_a_view(
  id INT
);

test/sem_test_prev.sql:XXXX:1: error: in create_view_stmt : CQL0127: object was a table but is now a view 't_became_a_view'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_became_a_view}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_created_in_wrong_version(
  id INT
);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0115: current create version not equal to previous create version for 't_created_in_wrong_version'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_created_in_wrong_version}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_was_correctly_deleted(
  id INT
);

  {create_table_stmt}: t_was_correctly_deleted: { id: integer }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_was_correctly_deleted}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_column_name_changed(
  id INT
);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0119: column name is different between previous and current schema 'id_'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_name_changed}
  | {col_key_list}
    | {col_def}: err
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_column_type_changed(
  id INT
);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0120: column type is different between previous and current schema 'id'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_type_changed}
  | {col_key_list}
    | {col_def}: err
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_column_attribute_changed(
  id INT
);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0120: column type is different between previous and current schema 'id'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_attribute_changed}
  | {col_key_list}
    | {col_def}: err
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_column_delete_version_changed(
  id INT,
  id2 INT @DELETE(2)
);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0122: column current delete version not equal to previous delete version 'id2'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_delete_version_changed}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: err
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {delete_attr}: ok
            | {version_annotation}
              | {int 2}

The statement ending at line XXXX

CREATE TABLE t_column_create_version_changed(
  id INT,
  id2 INT @CREATE(2)
);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0121: column current create version not equal to previous create version 'id2'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_create_version_changed}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: err
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {create_attr}: ok
            | {version_annotation}
              | {int 2}

The statement ending at line XXXX

CREATE TABLE t_column_default_value_changed(
  id INT,
  id2 INT! DEFAULT 1
);

Incompatible declarations found
test/sem_test_prev.sql:XXXX:1: error: in num : 1
test/sem_test_prev.sql:XXXX:1: error: in num : 2
The above must be identical.
test/sem_test_prev.sql:XXXX:1: error: in str : CQL0125: column current default value not equal to previous default value 'id2'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_default_value_changed}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: err
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {col_attrs_not_null}: ok
            | {col_attrs_default}
              | {int 1}: integer notnull

The statement ending at line XXXX

CREATE TABLE t_column_default_value_ok(
  id INT,
  id2 INT! DEFAULT 1
);

  {create_table_stmt}: t_column_default_value_ok: { id: integer, id2: integer notnull has_default }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_column_default_value_ok}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: id2: integer notnull has_default
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {col_attrs_not_null}: ok
            | {col_attrs_default}
              | {int 1}: integer notnull

The statement ending at line XXXX

CREATE TABLE t_additional_attribute_present(
  a INT!,
  b INT,
  PRIMARY KEY (a, b)
);

  {create_table_stmt}: t_additional_attribute_present: { a: integer notnull partial_pk, b: integer notnull partial_pk }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_additional_attribute_present}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |     | {name b}
      |     | {type_int}: integer
      | {col_key_list}
        | {pk_def}
          | {indexed_columns_conflict_clause}
            | {indexed_columns}
              | {indexed_column}
              | | {name a}: a: integer notnull
              | {indexed_columns}
                | {indexed_column}
                  | {name b}: b: integer

The statement ending at line XXXX

CREATE TABLE t_additional_attribute_mismatch(
  a INT!,
  b INT!,
  PRIMARY KEY (a, b)
);

Incompatible declarations found
test/sem_test_prev.sql:XXXX:1: error: in pk_def : PRIMARY KEY (a)
test/sem_test_prev.sql:XXXX:1: error: in pk_def : PRIMARY KEY (a, b)
The above must be identical.
test/sem_test_prev.sql:XXXX:1: error: in pk_def : CQL0132: table has a facet that is different in the previous and current schema 't_additional_attribute_mismatch'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_additional_attribute_mismatch}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer notnull
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name b}
      |   | | {type_int}: integer
      |   | {col_attrs_not_null}: ok
      | {col_key_list}
        | {pk_def}
          | {indexed_columns_conflict_clause}
            | {indexed_columns}
              | {indexed_column}
              | | {name a}: a: integer notnull
              | {indexed_columns}
                | {indexed_column}
                  | {name b}: b: integer notnull

The statement ending at line XXXX

CREATE TABLE t_columns_removed(
  id INT,
  id2 INT
);

test/sem_test_prev.sql:XXXX:1: error: in col_key_list : CQL0129: a column was removed from the table rather than marked with @delete 'id2'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_columns_removed}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: id2: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id2}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_attribute_added(
  a INT!
);

test/sem_test_prev.sql:XXXX:1: error: in col_key_list : CQL0134: table has a new non-column facet in the current schema 't_attribute_added'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_attribute_added}
  | {col_key_list}
    | {col_def}: a: integer notnull
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name a}
        | | {type_int}: integer
        | {col_attrs_not_null}: ok

The statement ending at line XXXX

CREATE TABLE t_additional_column(
  a INT!
);

test/sem_test_prev.sql:XXXX:1: error: in col_def : CQL0130: table has columns added without marking them @create 't_additional_column'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_additional_column}
  | {col_key_list}
    | {col_def}: a: integer notnull
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name a}
        | | {type_int}: integer
        | {col_attrs_not_null}: ok

The statement ending at line XXXX

CREATE TABLE t_additional_column_ok(
  a INT!,
  b INT @CREATE(2)
);

  {create_table_stmt}: t_additional_column_ok: { a: integer notnull, b: integer }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_additional_column_ok}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer @create(2)
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name b}
          | | {type_int}: integer
          | {create_attr}: ok
            | {version_annotation}
              | {int 2}

The statement ending at line XXXX

CREATE TABLE t_becomes_temp_table(
  a INT!,
  b INT
);

test/sem_test_prev.sql:XXXX:1: error: in create_table_stmt : CQL0135: table create statement attributes different than previous version 't_becomes_temp_table'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_becomes_temp_table}
  | {col_key_list}
    | {col_def}: a: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name a}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {col_def}: b: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name b}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE t_new_table_create_and_delete(
  a INT!
);

test/sem_test_prev.sql:XXXX:1: error: in col_def : CQL0131: table has newly added columns that are marked both @create and @delete 't_new_table_create_and_delete'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_new_table_create_and_delete}
  | {col_key_list}
    | {col_def}: a: integer notnull
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name a}
        | | {type_int}: integer
        | {col_attrs_not_null}: ok

The statement ending at line XXXX

CREATE TABLE t_new_legit_column(
  a INT!
);

  {create_table_stmt}: t_new_legit_column: { a: integer notnull }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_new_legit_column}
  | {col_key_list}
    | {col_def}: a: integer notnull
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name a}
        | | {type_int}: integer
        | {col_attrs_not_null}: ok

The statement ending at line XXXX

CREATE TABLE with_create_migrator(
  id INT
) @CREATE(1);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0118: @create procedure changed in object 'with_create_migrator'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | | {name with_create_migrator}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE with_create_migrator(
  id INT
) @CREATE(1, ADifferentCreateMigrator);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0118: @create procedure changed in object 'with_create_migrator'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | |     | {name ADifferentCreateMigrator}
  | | {name with_create_migrator}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE with_delete_migrator(
  id INT
) @DELETE(1);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0117: @delete procedure changed in object 'with_delete_migrator'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {delete_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | | {name with_delete_migrator}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE with_delete_migrator(
  id INT
) @DELETE(1, ADifferentDeleteMigrator);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0117: @delete procedure changed in object 'with_delete_migrator'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {delete_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | |     | {name ADifferentDeleteMigrator}
  | | {name with_delete_migrator}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE VIEW view_becomes_a_table AS
  SELECT 1 AS X;

test/sem_test_prev.sql:XXXX:1: error: in create_table_stmt : CQL0105: object was a view but is now a table 'view_becomes_a_table'

  {create_view_stmt}: err
  | {int 0}
  | {view_and_attrs}
    | {view_details_select}
      | {view_details}
      | | {name view_becomes_a_table}
      | {select_stmt}
        | {select_core_list}
        | | {select_core}
        |   | {select_expr_list_con}
        |     | {select_expr_list}
        |     | | {select_expr}
        |     |   | {int 1}
        |     |   | {opt_as_alias}
        |     |     | {name X}
        |     | {select_from_etc}
        |       | {select_where}
        |         | {select_groupby}
        |           | {select_having}
        | {select_orderby}
          | {select_limit}
            | {select_offset}

The statement ending at line XXXX

CREATE VIEW view_was_zomg_deleted AS
  SELECT 1 AS X;

test/sem_test_prev.sql:XXXX:1: error: in create_view_stmt : CQL0104: view was present but now it does not exist (use @delete instead) 'view_was_zomg_deleted'

  {create_view_stmt}: err
  | {int 0}
  | {view_and_attrs}
    | {view_details_select}
      | {view_details}
      | | {name view_was_zomg_deleted}
      | {select_stmt}
        | {select_core_list}
        | | {select_core}
        |   | {select_expr_list_con}
        |     | {select_expr_list}
        |     | | {select_expr}
        |     |   | {int 1}
        |     |   | {opt_as_alias}
        |     |     | {name X}
        |     | {select_from_etc}
        |       | {select_where}
        |         | {select_groupby}
        |           | {select_having}
        | {select_orderby}
          | {select_limit}
            | {select_offset}

The statement ending at line XXXX

CREATE TEMP VIEW view_was_temp_but_now_it_is_not AS
  SELECT 1 AS X;

  {create_view_stmt}: ok
  | {int 1}
  | {view_and_attrs}
    | {view_details_select}
      | {view_details}
      | | {name view_was_temp_but_now_it_is_not}
      | {select_stmt}
        | {select_core_list}
        | | {select_core}
        |   | {select_expr_list_con}
        |     | {select_expr_list}
        |     | | {select_expr}
        |     |   | {int 1}
        |     |   | {opt_as_alias}
        |     |     | {name X}
        |     | {select_from_etc}
        |       | {select_where}
        |         | {select_groupby}
        |           | {select_having}
        | {select_orderby}
          | {select_limit}
            | {select_offset}

The statement ending at line XXXX

CREATE INDEX this_index_was_deleted_with_no_annotation ON foo (id);

test/sem_test_prev.sql:XXXX:1: error: in create_index_stmt : CQL0017: index was present but now it does not exist (use @delete instead) 'this_index_was_deleted_with_no_annotation'

  {create_index_stmt}: err
  | {create_index_on_list}
  | | {name this_index_was_deleted_with_no_annotation}
  | | {name foo}
  | {flags_names_attrs}
    | {int 0}
    | {connector}
      | {index_names_and_attrs}
        | {indexed_columns}
          | {indexed_column}
            | {name id}

The statement ending at line XXXX

CREATE TABLE create_column_migrate_test(
  id INT UNIQUE,
  id2 INT @CREATE(2, PreviousColumnCreateMigrator)
);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0124: column @create procedure changed 'id2'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name create_column_migrate_test}
  | {col_key_list}
    | {col_def}: id: integer unique_key
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_unique}: ok
    | {col_key_list}
      | {col_def}: err
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {create_attr}: ok
            | {version_annotation}
              | {int 2}
              | {name PreviousColumnCreateMigrator}

The statement ending at line XXXX

CREATE TABLE delete_column_migrate_test(
  id INT,
  id2 INT @DELETE(2, PreviousColumnDeleteMigrator)
);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0123: column @delete procedure changed 'id2'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name delete_column_migrate_test}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: err
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
          | | {name id2}
          | | {type_int}: integer
          | {delete_attr}: ok
            | {version_annotation}
              | {int 2}
              | {name PreviousColumnDeleteMigrator}

The statement ending at line XXXX

CREATE TABLE fk_facet(
  id INT,
  FOREIGN KEY (id) REFERENCES create_column_migrate_test (id) ON UPDATE CASCADE
);

Incompatible declarations found
test/sem_test_prev.sql:XXXX:1: error: in fk_def : FOREIGN KEY (id) REFERENCES create_column_migrate_test (id) ON DELETE CASCADE
test/sem_test_prev.sql:XXXX:1: error: in fk_def : FOREIGN KEY (id) REFERENCES create_column_migrate_test (id) ON UPDATE CASCADE
The above must be identical.
test/sem_test_prev.sql:XXXX:1: error: in fk_def : CQL0132: table has a facet that is different in the previous and current schema 'fk_facet'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name fk_facet}
  | {col_key_list}
    | {col_def}: id: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_int}: integer
    | {col_key_list}
      | {fk_def}: ok
        | {fk_info}
          | {name_list}
          | | {name id}
          | {fk_target_options}
            | {fk_target}
            | | {name create_column_migrate_test}
            | | {name_list}
            |   | {name id}
            | {int 48}

The statement ending at line XXXX

CREATE TABLE cannot_change_to_recreate(
  id INT
) @CREATE(1);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0114: current schema can't go back to @recreate semantics for 'cannot_change_to_recreate'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 1}
  | | {name cannot_change_to_recreate}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE ok_to_delete_recreate_table(
  id INT
) @RECREATE;

  {create_table_stmt}: ok_to_delete_recreate_table: { id: integer } @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name ok_to_delete_recreate_table}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE ok_to_create_recreate_table(
  id INT
) @RECREATE;

  {create_table_stmt}: ok_to_create_recreate_table: { id: integer } @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name ok_to_create_recreate_table}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE not_ok_to_create_recreate_table(
  id INT
) @RECREATE;

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0377: table transitioning from @recreate to @create must use @create(nn,cql:from_recreate) 'not_ok_to_create_recreate_table'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name not_ok_to_create_recreate_table}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE recreate_deleted_in_the_past(
  id INT
) @RECREATE;

  {create_table_stmt}: recreate_deleted_in_the_past: { id: integer } @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name recreate_deleted_in_the_past}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE recreate_created_in_the_past(
  id INT
) @RECREATE;

  {create_table_stmt}: recreate_created_in_the_past: { id: integer } @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name recreate_created_in_the_past}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE recreate_feel_the_power(
  id TEXT,
  payload TEXT,
  whatever INT
) @RECREATE;

  {create_table_stmt}: recreate_feel_the_power: { id: text, payload: text, whatever: integer } @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name recreate_feel_the_power}
  | {col_key_list}
    | {col_def}: id: text
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name id}
    |     | {type_text}: text
    | {col_key_list}
      | {col_def}: payload: text
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |     | {name payload}
      |     | {type_text}: text
      | {col_key_list}
        | {col_def}: whatever: integer
          | {col_def_type_attrs}: ok
            | {col_def_name_type}
              | {name whatever}
              | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE disapparing_recreate(
  id INT
) @RECREATE;

test/sem_test_prev.sql:XXXX:1: error: in create_table_stmt : CQL0126: table was present but now it does not exist (use @delete instead) 'disapparing_recreate'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name disapparing_recreate}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TRIGGER trigger_removed_with_no_annotation
  BEFORE DELETE ON foo
  FOR EACH ROW
  WHEN old.id > 7
BEGIN
  SELECT old.id;
END;

test/sem_test_prev.sql:XXXX:1: error: in create_trigger_stmt : CQL0106: trigger was present but now it does not exist (use @delete instead) 'trigger_removed_with_no_annotation'

  {create_trigger_stmt}: err
  | {int 0}
  | {trigger_body_vers}
    | {trigger_def}
      | {name trigger_removed_with_no_annotation}
      | {trigger_condition}
        | {int 4}
        | {trigger_op_target}
          | {trigger_operation}
          | | {int 64}
          | {trigger_target_action}
            | {name foo}
            | {trigger_action}
              | {int 256}
              | {trigger_when_stmts}
                | {gt}
                | | {dot}
                | | | {name old}
                | | | {name id}
                | | {int 7}
                | {stmt_list}
                  | {select_stmt}
                    | {select_core_list}
                    | | {select_core}
                    |   | {select_expr_list_con}
                    |     | {select_expr_list}
                    |     | | {select_expr}
                    |     |   | {dot}
                    |     |     | {name old}
                    |     |     | {name id}
                    |     | {select_from_etc}
                    |       | {select_where}
                    |         | {select_groupby}
                    |           | {select_having}
                    | {select_orderby}
                      | {select_limit}
                        | {select_offset}

The statement ending at line XXXX

CREATE TRIGGER trigger_will_be_deleted
  BEFORE DELETE ON foo
BEGIN
  SELECT old.id;
END;

  {create_trigger_stmt}: ok
  | {int 0}
  | {trigger_body_vers}
    | {trigger_def}
      | {name trigger_will_be_deleted}
      | {trigger_condition}
        | {int 4}
        | {trigger_op_target}
          | {trigger_operation}
          | | {int 64}
          | {trigger_target_action}
            | {name foo}
            | {trigger_action}
              | {int 0}
              | {trigger_when_stmts}
                | {stmt_list}
                  | {select_stmt}
                    | {select_core_list}
                    | | {select_core}
                    |   | {select_expr_list_con}
                    |     | {select_expr_list}
                    |     | | {select_expr}
                    |     |   | {dot}
                    |     |     | {name old}
                    |     |     | {name id}
                    |     | {select_from_etc}
                    |       | {select_where}
                    |         | {select_groupby}
                    |           | {select_having}
                    | {select_orderby}
                      | {select_limit}
                        | {select_offset}

The statement ending at line XXXX

CREATE TABLE t_removed_facet(
  id INT!,
  CONSTRAINT uk UNIQUE (id)
);

test/sem_test_prev.sql:XXXX:1: error: in col_key_list : CQL0133: non-column facets have been removed from the table 't_removed_facet'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_removed_facet}
  | {col_key_list}
    | {col_def}: id: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {unq_def}
        | {name uk}
        | {indexed_columns_conflict_clause}
          | {indexed_columns}
            | {indexed_column}
              | {name id}: id: integer notnull

The statement ending at line XXXX

CREATE TABLE t_subtle_column_change(
  id INT REFERENCES create_column_migrate_test (id) ON DELETE CASCADE
);

Incompatible declarations found
test/sem_test_prev.sql:XXXX:1: error: in col_def : id INTEGER REFERENCES create_column_migrate_test (id)
test/sem_test_prev.sql:XXXX:1: error: in col_def : id INTEGER REFERENCES create_column_migrate_test (id) ON DELETE CASCADE
The above must be identical.
test/sem_test_prev.sql:XXXX:1: error: in col_def : CQL0128: table has a column that is different in the previous and current schema 'id'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_subtle_column_change}
  | {col_key_list}
    | {col_def}: id: integer foreign_key
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name id}
        | | {type_int}: integer
        | {col_attrs_fk}: ok
          | {fk_target_options}
            | {fk_target}
            | | {name create_column_migrate_test}
            | | {name_list}
            |   | {name id}
            | {int 3}

The statement ending at line XXXX

CREATE TABLE t_several_columns_added_interleaved(
  col1 INT,
  PRIMARY KEY (col1)
);

  {create_table_stmt}: t_several_columns_added_interleaved: { col1: integer notnull partial_pk }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name t_several_columns_added_interleaved}
  | {col_key_list}
    | {col_def}: col1: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name col1}
    |     | {type_int}: integer
    | {col_key_list}
      | {pk_def}
        | {indexed_columns_conflict_clause}
          | {indexed_columns}
            | {indexed_column}
              | {name col1}: col1: integer

The statement ending at line XXXX

@SCHEMA_AD_HOC_MIGRATION(1, WhoopsItsGone);

test/sem_test_prev.sql:XXXX:1: error: in schema_ad_hoc_migration_stmt : CQL0286: ad hoc schema migration directive was removed; this is not allowed 'WhoopsItsGone'

  {schema_ad_hoc_migration_stmt}: err
  | {version_annotation}
    | {int 1}
    | {name WhoopsItsGone}

The statement ending at line XXXX

@SCHEMA_AD_HOC_MIGRATION(1, WhoopsItChanged);

test/sem_test_prev.sql:XXXX:1: error: in schema_ad_hoc_migration_stmt : CQL0285: ad hoc schema migration directive version number changed 'WhoopsItChanged'

  {schema_ad_hoc_migration_stmt}: err
  | {version_annotation}
    | {int 1}
    | {name WhoopsItChanged}

The statement ending at line XXXX

@SCHEMA_AD_HOC_MIGRATION(3, MigrateGoodToGo);

  {schema_ad_hoc_migration_stmt}: ok @create(3)
  | {version_annotation}
    | {int 3}
    | {name MigrateGoodToGo}

The statement ending at line XXXX

@END_SCHEMA_REGION;

  {end_schema_region_stmt}: ok

The statement ending at line XXXX

@BEGIN_SCHEMA_REGION different_region;

  {begin_schema_region_stmt}: ok
  | {name different_region}

The statement ending at line XXXX

CREATE TABLE TChanging(
  id INT
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name TChanging}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE INDEX IChanging ON TChanging (id);

  {create_index_stmt}: err
  | {create_index_on_list}
  | | {name IChanging}
  | | {name TChanging}
  | {flags_names_attrs}
    | {int 0}
    | {connector}
      | {index_names_and_attrs}
        | {indexed_columns}
          | {indexed_column}
            | {name id}

The statement ending at line XXXX

CREATE VIEW VChanging AS
  SELECT *
    FROM TChanging;

  {create_view_stmt}: err
  | {int 0}
  | {view_and_attrs}
    | {view_details_select}
      | {view_details}
      | | {name VChanging}
      | {select_stmt}
        | {select_core_list}
        | | {select_core}
        |   | {select_expr_list_con}
        |     | {select_expr_list}
        |     | | {star}
        |     | {select_from_etc}
        |       | {table_or_subquery_list}
        |       | | {table_or_subquery}
        |       |   | {name TChanging}
        |       | {select_where}
        |         | {select_groupby}
        |           | {select_having}
        | {select_orderby}
          | {select_limit}
            | {select_offset}

The statement ending at line XXXX

CREATE TRIGGER TrigChanging
  BEFORE DELETE ON foo
BEGIN
  SELECT old.id;
END;

  {create_trigger_stmt}: err
  | {int 0}
  | {trigger_body_vers}
    | {trigger_def}
      | {name TrigChanging}
      | {trigger_condition}
        | {int 4}
        | {trigger_op_target}
          | {trigger_operation}
          | | {int 64}
          | {trigger_target_action}
            | {name foo}
            | {trigger_action}
              | {int 0}
              | {trigger_when_stmts}
                | {stmt_list}
                  | {select_stmt}
                    | {select_core_list}
                    | | {select_core}
                    |   | {select_expr_list_con}
                    |     | {select_expr_list}
                    |     | | {select_expr}
                    |     |   | {dot}
                    |     |     | {name old}
                    |     |     | {name id}
                    |     | {select_from_etc}
                    |       | {select_where}
                    |         | {select_groupby}
                    |           | {select_having}
                    | {select_orderby}
                      | {select_limit}
                        | {select_offset}

The statement ending at line XXXX

@SCHEMA_AD_HOC_MIGRATION(2, AdHocChanging);

  {schema_ad_hoc_migration_stmt}: err
  | {version_annotation}
    | {int 2}
    | {name AdHocChanging}

The statement ending at line XXXX

@END_SCHEMA_REGION;

  {end_schema_region_stmt}: ok

The statement ending at line XXXX

@DECLARE_SCHEMA_REGION SomeLeaf;

  {declare_schema_region_stmt}: SomeLeaf: region
  | {name SomeLeaf}

The statement ending at line XXXX

@BEGIN_SCHEMA_REGION SomeLeaf;

  {begin_schema_region_stmt}: ok
  | {name SomeLeaf}

The statement ending at line XXXX

CREATE TABLE TableWithDeferredOwner(
  id INT
);

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name TableWithDeferredOwner}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

@END_SCHEMA_REGION;

  {end_schema_region_stmt}: ok

The statement ending at line XXXX

@DECLARE_DEPLOYABLE_REGION DeployableRegion1 USING SomeLeaf;

  {declare_deployable_region_stmt}: DeployableRegion1: region deployable
  | {name DeployableRegion1}
  | {region_list}
    | {region_spec}
      | {name SomeLeaf}
      | {int 0}

The statement ending at line XXXX

@DECLARE_SCHEMA_REGION simple_region_2;

  {declare_schema_region_stmt}: simple_region_2: region
  | {name simple_region_2}

The statement ending at line XXXX

@BEGIN_SCHEMA_REGION simple_region_2;

  {begin_schema_region_stmt}: ok
  | {name simple_region_2}

The statement ending at line XXXX

CREATE TABLE logical_moving_T1(
  id INT PRIMARY KEY
);

  {create_table_stmt}: logical_moving_T1: { id: integer notnull primary_key }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name logical_moving_T1}
  | {col_key_list}
    | {col_def}: id: integer notnull primary_key
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name id}
        | | {type_int}: integer
        | {col_attrs_pk}: ok
          | {autoinc_and_conflict_clause}

The statement ending at line XXXX

CREATE TABLE logical_moving_T2(
  id INT REFERENCES logical_moving_T1 (id),
  name TEXT
);

  {create_table_stmt}: logical_moving_T2: { id: integer foreign_key, name: text }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name logical_moving_T2}
  | {col_key_list}
    | {col_def}: id: integer foreign_key
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_fk}: ok
    |     | {fk_target_options}
    |       | {fk_target}
    |       | | {name logical_moving_T1}
    |       | | {name_list}
    |       |   | {name id}
    |       | {int 0}
    | {col_key_list}
      | {col_def}: name: text
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name name}
            | {type_text}: text

The statement ending at line XXXX

@END_SCHEMA_REGION;

  {end_schema_region_stmt}: ok

The statement ending at line XXXX

@DECLARE_SCHEMA_REGION high_numbered_thing;

  {declare_schema_region_stmt}: high_numbered_thing: region
  | {name high_numbered_thing}

The statement ending at line XXXX

@BEGIN_SCHEMA_REGION high_numbered_thing;

  {begin_schema_region_stmt}: ok
  | {name high_numbered_thing}

The statement ending at line XXXX

CREATE TABLE high_numbered_thing(
  id INT
) @CREATE(9999);

  {create_table_stmt}: high_numbered_thing: { id: integer } @create(9999)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 9999}
  | | {name high_numbered_thing}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE INDEX deleted_index ON t_was_correctly_deleted (id);

  {create_index_stmt}: ok
  | {create_index_on_list}
  | | {name deleted_index}
  | | {name t_was_correctly_deleted}
  | {flags_names_attrs}
    | {int 0}
    | {connector}
      | {index_names_and_attrs}
        | {indexed_columns}
          | {indexed_column}
            | {name id}

The statement ending at line XXXX

CREATE TRIGGER trigger_deleted_no_problemo
  BEFORE DELETE ON t_was_correctly_deleted
BEGIN
  SELECT old.id;
END;

  {create_trigger_stmt}: ok
  | {int 0}
  | {trigger_body_vers}
    | {trigger_def}
      | {name trigger_deleted_no_problemo}
      | {trigger_condition}
        | {int 4}
        | {trigger_op_target}
          | {trigger_operation}
          | | {int 64}
          | {trigger_target_action}
            | {name t_was_correctly_deleted}
            | {trigger_action}
              | {int 0}
              | {trigger_when_stmts}
                | {stmt_list}
                  | {select_stmt}
                    | {select_core_list}
                    | | {select_core}
                    |   | {select_expr_list_con}
                    |     | {select_expr_list}
                    |     | | {select_expr}
                    |     |   | {dot}
                    |     |     | {name old}
                    |     |     | {name id}
                    |     | {select_from_etc}
                    |       | {select_where}
                    |         | {select_groupby}
                    |           | {select_having}
                    | {select_orderby}
                      | {select_limit}
                        | {select_offset}

The statement ending at line XXXX

@END_SCHEMA_REGION;

  {end_schema_region_stmt}: ok

The statement ending at line XXXX

CREATE TABLE table_staying(
  col1 INT PRIMARY KEY!
) @RECREATE(my_recreate_group);

  {create_table_stmt}: table_staying: { col1: integer notnull primary_key } @recreate(my_recreate_group)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | |   | {name my_recreate_group}
  | | {name table_staying}
  | {col_key_list}
    | {col_def}: col1: integer notnull primary_key
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name col1}
        | | {type_int}: integer
        | {col_attrs_pk}: ok
          | {autoinc_and_conflict_clause}
          | {col_attrs_not_null}

The statement ending at line XXXX

CREATE TABLE table_going(
  col1 TEXT,
  col2 INT,
  FOREIGN KEY (col2) REFERENCES table_staying (col1) ON UPDATE CASCADE ON DELETE CASCADE
) @RECREATE(my_recreate_group);

  {create_table_stmt}: table_going: { col1: text, col2: integer } @recreate(my_recreate_group)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | |   | {name my_recreate_group}
  | | {name table_going}
  | {col_key_list}
    | {col_def}: col1: text
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name col1}
    |     | {type_text}: text
    | {col_key_list}
      | {col_def}: col2: integer
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |     | {name col2}
      |     | {type_int}: integer
      | {col_key_list}
        | {fk_def}: ok
          | {fk_info}
            | {name_list}
            | | {name col2}
            | {fk_target_options}
              | {fk_target}
              | | {name table_staying}
              | | {name_list}
              |   | {name col1}
              | {int 51}

The statement ending at line XXXX

CREATE TABLE adding_with_migrators_ok(
  id INT PRIMARY KEY,
  id2 INT
) @CREATE(2);

  {create_table_stmt}: adding_with_migrators_ok: { id: integer notnull primary_key, id2: integer } @create(2)
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {create_attr}
  | |   | {version_annotation}
  | |     | {int 2}
  | | {name adding_with_migrators_ok}
  | {col_key_list}
    | {col_def}: id: integer notnull primary_key
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_pk}: ok
    |     | {autoinc_and_conflict_clause}
    | {col_key_list}
      | {col_def}: id2: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id2}
            | {type_int}: integer

The statement ending at line XXXX

DECLARE ENUM foo_enum INT (
  a = 10,
  b = 2
);

  {declare_enum_stmt}: foo_enum: integer<foo_enum> notnull
  | {typed_name}: foo_enum: integer<foo_enum> notnull
  | | {name foo_enum}
  | | {type_int}: foo_enum: integer<foo_enum> notnull
  | {enum_values}
    | {enum_value}
    | | {name a}: integer = 10 notnull
    | | {int 10}: integer notnull
    | {enum_values}
      | {enum_value}
        | {name b}: integer = 2 notnull
        | {int 2}: integer notnull

The statement ending at line XXXX

CREATE TABLE foo_with_check(
  x INT CHECK(x = 10) 
);

Incompatible declarations found
test/sem_test_prev.sql:XXXX:1: error: in col_def : x INTEGER CHECK(x = 1) 
test/sem_test_prev.sql:XXXX:1: error: in col_def : x INTEGER CHECK(x = 10) 
The above must be identical.
test/sem_test_prev.sql:XXXX:1: error: in col_def : CQL0128: table has a column that is different in the previous and current schema 'x'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name foo_with_check}
  | {col_key_list}
    | {col_def}: x: integer has_check
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name x}
        | | {type_int}: integer
        | {col_attrs_check}: ok
          | {eq}: bool
            | {name x}: x: integer has_check
            | {int 10}: integer<foo_enum> notnull

The statement ending at line XXXX

CREATE VIRTUAL TABLE unchanged_virtual USING my_virtual (goo) AS (
  id INT
);

  {create_virtual_table_stmt}: unchanged_virtual: { id: integer } virtual @recreate
  | {module_info}
  | | {name my_virtual}
  | | {misc_attr_value_list}
  |   | {name goo}
  | {create_table_stmt}: unchanged_virtual: { id: integer } virtual @recreate
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | | {recreate_attr}
    | | {name unchanged_virtual}
    | {col_key_list}
      | {col_def}: id: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id}
            | {type_int}: integer

The statement ending at line XXXX

CREATE VIRTUAL TABLE deleted_virtual USING my_virtual (goo) AS (
  id INT
);

  {create_virtual_table_stmt}: deleted_virtual: { id: integer } virtual @recreate
  | {module_info}
  | | {name my_virtual}
  | | {misc_attr_value_list}
  |   | {name goo}
  | {create_table_stmt}: deleted_virtual: { id: integer } virtual @recreate
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | | {recreate_attr}
    | | {name deleted_virtual}
    | {col_key_list}
      | {col_def}: id: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id}
            | {type_int}: integer

The statement ending at line XXXX

CREATE VIRTUAL TABLE undead_virtual USING my_virtual (goo) AS (
  id INT
) @DELETE(3, cql:module_must_not_be_deleted_see_docs_for_CQL0392);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0114: current schema can't go back to @recreate semantics for 'undead_virtual'

  {create_virtual_table_stmt}: err
  | {module_info}
  | | {name my_virtual}
  | | {misc_attr_value_list}
  |   | {name goo}
  | {create_table_stmt}: err
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | | {delete_attr}
    | |   | {version_annotation}
    | |     | {int 3}
    | |     | {dot}: ok
    | |       | {name cql}
    | |       | {name module_must_not_be_deleted_see_docs_for_CQL0392}
    | | {name undead_virtual}
    | {col_key_list}
      | {col_def}: id: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id}
            | {type_int}: integer

The statement ending at line XXXX

CREATE VIRTUAL TABLE changing_virtual USING my_virtual (goo) AS (
  id INT
);

  {create_virtual_table_stmt}: changing_virtual: { id: integer } virtual @recreate
  | {module_info}
  | | {name my_virtual}
  | | {misc_attr_value_list}
  |   | {name goo}
  | {create_table_stmt}: changing_virtual: { id: integer } virtual @recreate
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | | {recreate_attr}
    | | {name changing_virtual}
    | {col_key_list}
      | {col_def}: id: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id}
            | {type_int}: integer

The statement ending at line XXXX

CREATE VIRTUAL TABLE delete_change_virtual USING my_virtual (goo) AS (
  id INT
) @DELETE(3, cql:module_must_not_be_deleted_see_docs_for_CQL0392);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0116: current delete version not equal to previous delete version for 'delete_change_virtual'

  {create_virtual_table_stmt}: err
  | {module_info}
  | | {name my_virtual}
  | | {misc_attr_value_list}
  |   | {name goo}
  | {create_table_stmt}: err
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | | {delete_attr}
    | |   | {version_annotation}
    | |     | {int 3}
    | |     | {dot}: ok
    | |       | {name cql}
    | |       | {name module_must_not_be_deleted_see_docs_for_CQL0392}
    | | {name delete_change_virtual}
    | {col_key_list}
      | {col_def}: id: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name id}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TEMP VIEW this_view_is_gone AS
  SELECT 1 AS x;

  {create_view_stmt}: ok
  | {int 1}
  | {view_and_attrs}
    | {view_details_select}
      | {view_details}
      | | {name this_view_is_gone}
      | {select_stmt}
        | {select_core_list}
        | | {select_core}
        |   | {select_expr_list_con}
        |     | {select_expr_list}
        |     | | {select_expr}
        |     |   | {int 1}
        |     |   | {opt_as_alias}
        |     |     | {name x}
        |     | {select_from_etc}
        |       | {select_where}
        |         | {select_groupby}
        |           | {select_having}
        | {select_orderby}
          | {select_limit}
            | {select_offset}

The statement ending at line XXXX

CREATE TEMP TABLE this_table_is_gone(
  id INT
);

  {create_table_stmt}: this_table_is_gone: { id: integer }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 1}
  | | {name this_table_is_gone}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TEMP TRIGGER this_trigger_is_gone
  BEFORE DELETE ON foo
BEGIN
  SELECT old.id;
END;

  {create_trigger_stmt}: ok
  | {int 1}
  | {trigger_body_vers}
    | {trigger_def}
      | {name this_trigger_is_gone}
      | {trigger_condition}
        | {int 4}
        | {trigger_op_target}
          | {trigger_operation}
          | | {int 64}
          | {trigger_target_action}
            | {name foo}
            | {trigger_action}
              | {int 0}
              | {trigger_when_stmts}
                | {stmt_list}
                  | {select_stmt}
                    | {select_core_list}
                    | | {select_core}
                    |   | {select_expr_list_con}
                    |     | {select_expr_list}
                    |     | | {select_expr}
                    |     |   | {dot}
                    |     |     | {name old}
                    |     |     | {name id}
                    |     | {select_from_etc}
                    |       | {select_where}
                    |         | {select_groupby}
                    |           | {select_having}
                    | {select_orderby}
                      | {select_limit}
                        | {select_offset}

The statement ending at line XXXX

CREATE TABLE conflict_clause_t(
  id INT! ON CONFLICT FAIL
);

  {create_table_stmt}: conflict_clause_t: { id: integer notnull }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name conflict_clause_t}
  | {col_key_list}
    | {col_def}: id: integer notnull
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
        | | {name id}
        | | {type_int}: integer
        | {col_attrs_not_null}: ok
          | {int 2}

The statement ending at line XXXX

CREATE TABLE conflict_clause_pk(
  id INT!,
  CONSTRAINT pk1 PRIMARY KEY (id) ON CONFLICT ROLLBACK
);

  {create_table_stmt}: conflict_clause_pk: { id: integer notnull partial_pk }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name conflict_clause_pk}
  | {col_key_list}
    | {col_def}: id: integer notnull
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |   | | {name id}
    |   | | {type_int}: integer
    |   | {col_attrs_not_null}: ok
    | {col_key_list}
      | {pk_def}
        | {name pk1}
        | {indexed_columns_conflict_clause}
          | {indexed_columns}
          | | {indexed_column}
          |   | {name id}: id: integer notnull
          | {int 0}

The statement ending at line XXXX

CREATE TABLE dropping_this(
  f1 INT,
  f2 TEXT
) @RECREATE(foo);

test/sem_test_prev.sql:XXXX:1: error: in create_table_stmt : CQL0448: table was marked @delete but it needs to be marked @recreate @delete 'dropping_this'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | |   | {name foo}
  | | {name dropping_this}
  | {col_key_list}
    | {col_def}: f1: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name f1}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: f2: text
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name f2}
            | {type_text}: text

The statement ending at line XXXX

CREATE TABLE gaining_group(
  id INT
) @RECREATE;

  {create_table_stmt}: gaining_group: { id: integer } @recreate
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | | {name gaining_group}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE unsub_resub_trickery(
  id INT
);

  {create_table_stmt}: unsub_resub_trickery: { id: integer }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name unsub_resub_trickery}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

@UNSUB(unsub_resub_trickery);

  {schema_unsub_stmt}: ok
  | {version_annotation}
    | {int 1}
    | {name unsub_resub_trickery}

The statement ending at line XXXX

[[backing_table]]
CREATE TABLE backing(
  k BLOB PRIMARY KEY,
  v BLOB
);

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |     | {name cql}
  |     | {name backing_table}
  | {create_table_stmt}: backing: { k: blob notnull primary_key, v: blob } backing
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | {name backing}
    | {col_key_list}
      | {col_def}: k: blob notnull primary_key
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name k}
      |   | | {type_blob}: blob
      |   | {col_attrs_pk}: ok
      |     | {autoinc_and_conflict_clause}
      | {col_key_list}
        | {col_def}: v: blob
          | {col_def_type_attrs}: ok
            | {col_def_name_type}
              | {name v}
              | {type_blob}: blob

The statement ending at line XXXX

[[backed_by=backing]]
CREATE TABLE backed(
  guid INT! PRIMARY KEY,
  gal TEXT
);

  {stmt_and_attr}: ok
  | {misc_attrs}: ok
  | | {misc_attr}
  |   | {dot}
  |   | | {name cql}
  |   | | {name backed_by}
  |   | {name backing}: ok
  | {create_table_stmt}: backed: { guid: integer notnull primary_key, gal: text } backed
    | {create_table_name_flags}
    | | {table_flags_attrs}
    | | | {int 0}
    | | {name backed}
    | {col_key_list}
      | {col_def}: guid: integer notnull primary_key
      | | {col_def_type_attrs}: ok
      |   | {col_def_name_type}
      |   | | {name guid}
      |   | | {type_int}: integer
      |   | {col_attrs_not_null}: ok
      |     | {col_attrs_pk}
      |       | {autoinc_and_conflict_clause}
      | {col_key_list}
        | {col_def}: gal: text
          | {col_def_type_attrs}: ok
            | {col_def_name_type}
              | {name gal}
              | {type_text}: text

The statement ending at line XXXX

CREATE TABLE transitioning_to_baseline(
  x INT,
  y INT
) @RECREATE(foo);

test/sem_test_prev.sql:XXXX:1: error: in str : CQL0377: table transitioning from @recreate to @create must use @create(nn,cql:from_recreate) 'transitioning_to_baseline'

  {create_table_stmt}: err
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | | {recreate_attr}
  | |   | {name foo}
  | | {name transitioning_to_baseline}
  | {col_key_list}
    | {col_def}: x: integer
    | | {col_def_type_attrs}: ok
    |   | {col_def_name_type}
    |     | {name x}
    |     | {type_int}: integer
    | {col_key_list}
      | {col_def}: y: integer
        | {col_def_type_attrs}: ok
          | {col_def_name_type}
            | {name y}
            | {type_int}: integer

The statement ending at line XXXX

CREATE TABLE resubscribing(
  id INT
);

  {create_table_stmt}: resubscribing: { id: integer }
  | {create_table_name_flags}
  | | {table_flags_attrs}
  | | | {int 0}
  | | {name resubscribing}
  | {col_key_list}
    | {col_def}: id: integer
      | {col_def_type_attrs}: ok
        | {col_def_name_type}
          | {name id}
          | {type_int}: integer

The statement ending at line XXXX

@UNSUB(resubscribing);

  {schema_unsub_stmt}: ok
  | {version_annotation}
    | {int 1}
    | {name resubscribing}

