
{
  "tables" : [

    The statement ending at line XXXX

    CREATE TABLE Foo(
      id INT<ident>!,
      name TEXT
    )

    {
      "name" : "Foo",
      "schema" : "CREATE TABLE Foo(\n  id INTEGER NOT NULL,\n  name TEXT\n)",
      "CRC" : "3234492599048457151",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "region" : "region0",
      "deployedInRegion" : "region2",
      "indices" : [ "region_0_index", "MyIndex", "MyOtherIndex", "MyExpressionIndex", "MyPartialIndex", "MyIndexWithAttributes" ],
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T2(
      id INT PRIMARY KEY AUTOINCREMENT
    )

    {
      "name" : "T2",
      "schema" : "CREATE TABLE T2(\n  id INTEGER PRIMARY KEY AUTOINCREMENT\n)",
      "CRC" : "2021161013616617031",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 1,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 1
        }
      ],
      "primaryKey" : [ "id" ],
      "primaryKeySortOrders" : [ "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T3(
      id INT UNIQUE
    )

    {
      "name" : "T3",
      "schema" : "CREATE TABLE T3(\n  id INTEGER UNIQUE\n)",
      "CRC" : "-1045678026932242111",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 1,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
        {
          "name" : "id_uk",
          "columns" : [ "id" ],
          "sortOrders" : [ "" ]
        }
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    @ATTRIBUTE(foo=bar)
    @ATTRIBUTE(num=-7)
    @ATTRIBUTE(hex=0x53)
    @ATTRIBUTE(qid=`quoted identifier`)
    CREATE TABLE T4(
      @ATTRIBUTE(cool)
      id INT
    )

    {
      "name" : "T4",
      "schema" : "CREATE TABLE T4(\n  id INTEGER\n)",
      "CRC" : "-2149692277469775074",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "attributes" : [
        {
          "name" : "foo",
          "value" : "bar"
        },
        {
          "name" : "num",
          "value" : -7
        },
        {
          "name" : "hex",
          "value" : 83
        },
        {
          "name" : "qid",
          "value" : "quoted identifier"
        }
      ],
      "columns" : [
        {
          "name" : "id",
          "attributes" : [
            {
              "name" : "cool",
              "value" : 1
            }
          ],
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    @ATTRIBUTE(crazy="\\ ' \a \b \f \n \t \r \v \\ \" ")
    CREATE TABLE T5(
      r REAL,
      bl BLOB,
      b BOOL,
      l LONG
    )

    {
      "name" : "T5",
      "schema" : "CREATE TABLE T5(\n  r REAL,\n  bl BLOB,\n  b BOOL,\n  l LONG_INT\n)",
      "CRC" : "7011436198022389765",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "attributes" : [
        {
          "name" : "crazy",
          "value" : "\\ ' \u0007 \b \f \n \t \r \u000b \\ \" "
        }
      ],
      "columns" : [
        {
          "name" : "r",
          "type" : "real",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "bl",
          "type" : "blob",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "b",
          "type" : "bool",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "l",
          "type" : "long",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    @ATTRIBUTE(this:that=1L)
    CREATE TEMP TABLE IF NOT EXISTS T6(
      id INT!
    ) WITHOUT ROWID

    {
      "name" : "T6",
      "schema" : "CREATE TEMP TABLE IF NOT EXISTS T6(\n  id INTEGER NOT NULL\n) WITHOUT ROWID",
      "CRC" : "5029268292057128035",
      "isTemp" : 1,
      "ifNotExists" : 1,
      "withoutRowid" : 1,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "attributes" : [
        {
          "name" : "this:that",
          "value" : 1
        }
      ],
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T7a(
      id INT @CREATE(1) @DELETE(3)
    )

    {
      "name" : "T7a",
      "schema" : "CREATE TABLE T7a(\n  id INTEGER\n)",
      "CRC" : "-2088996992437173714",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 1,
          "addedVersion" : 1,
          "isDeleted" : 1,
          "deletedVersion" : 3,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T7b(
      id INT @CREATE(1, t7_col_create) @DELETE(3, t7_col_delete)
    )

    {
      "name" : "T7b",
      "schema" : "CREATE TABLE T7b(\n  id INTEGER\n)",
      "CRC" : "-2469711812733478801",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 1,
          "addedVersion" : 1,
          "addedMigrationProc" : "t7_col_create",
          "isDeleted" : 1,
          "deletedVersion" : 3,
          "deletedMigrationProc" : "t7_col_delete",
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T8a(
      id INT
    ) @CREATE(1) @DELETE(3)

    {
      "name" : "T8a",
      "schema" : "CREATE TABLE T8a(\n  id INTEGER\n)",
      "CRC" : "5732684105687845792",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 1,
      "addedVersion" : 1,
      "isDeleted" : 1,
      "deletedVersion" : 3,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T8b(
      id INT
    ) @CREATE(1, t8_table_create) @DELETE(3, t8_table_delete)

    {
      "name" : "T8b",
      "schema" : "CREATE TABLE T8b(\n  id INTEGER\n)",
      "CRC" : "8157465532859044321",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 1,
      "addedVersion" : 1,
      "addedMigrationProc" : "t8_table_create",
      "isDeleted" : 1,
      "deletedVersion" : 3,
      "deletedMigrationProc" : "t8_table_delete",
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    @ATTRIBUTE(an_integer=1)
    @ATTRIBUTE(a_double=2.5)
    @ATTRIBUTE(a_double=2.5)
    CREATE TABLE T9(
      id1 INT DEFAULT 3 PRIMARY KEY,
      id2 INT,
      id3 INT,
      name TEXT DEFAULT "xyzzy",
      val REAL DEFAULT -3.5,
      val2 LONG DEFAULT 123456789123456789L,
      CONSTRAINT uk1 UNIQUE (id2 DESC, id3 ASC),
      CONSTRAINT uk2 UNIQUE (id2 / 2 ASC, id3 + 2 DESC)
    )

    {
      "name" : "T9",
      "schema" : "CREATE TABLE T9(\n  id1 INTEGER DEFAULT 3 PRIMARY KEY,\n  id2 INTEGER,\n  id3 INTEGER,\n  name TEXT DEFAULT 'xyzzy',\n  val REAL DEFAULT -3.5,\n  val2 LONG_INT DEFAULT 123456789123456789,\n  CONSTRAINT uk1 UNIQUE (id2 DESC, id3 ASC),\n  CONSTRAINT uk2 UNIQUE (id2 / 2 ASC, id3 + 2 DESC)\n)",
      "CRC" : "6457405878864377226",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "attributes" : [
        {
          "name" : "an_integer",
          "value" : 1
        },
        {
          "name" : "a_double",
          "value" : 2.5
        },
        {
          "name" : "a_double",
          "value" : 2.5
        }
      ],
      "columns" : [
        {
          "name" : "id1",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "defaultValue" : 3,
          "isPrimaryKey" : 1,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id2",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id3",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "defaultValue" : "xyzzy",
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "val",
          "type" : "real",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "defaultValue" : -3.5,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "val2",
          "type" : "long",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "defaultValue" : 123456789123456789,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "id1" ],
      "primaryKeySortOrders" : [ "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
        {
          "name" : "uk1",
          "columns" : [ "id2", "id3" ],
          "sortOrders" : [ "desc", "asc" ]
        },
        {
          "name" : "uk2",
          "columns" : [ "id2 / 2", "id3 + 2" ],
          "sortOrders" : [ "asc", "desc" ]
        }
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T10(
      id1 INT UNIQUE,
      id2 INT,
      id3 INT,
      id4 INT UNIQUE,
      CONSTRAINT pk1 PRIMARY KEY (id1 DESC, id2 ASC),
      CONSTRAINT fk1 FOREIGN KEY (id1, id2) REFERENCES T9 (id2, id3),
      CONSTRAINT uk1 UNIQUE (id2, id3),
      UNIQUE (id3, id4)
    )

    {
      "name" : "T10",
      "schema" : "CREATE TABLE T10(\n  id1 INTEGER UNIQUE,\n  id2 INTEGER,\n  id3 INTEGER,\n  id4 INTEGER UNIQUE,\n  CONSTRAINT pk1 PRIMARY KEY (id1 DESC, id2 ASC),\n  CONSTRAINT fk1 FOREIGN KEY (id1, id2) REFERENCES T9 (id2, id3),\n  CONSTRAINT uk1 UNIQUE (id2, id3),\n  UNIQUE (id3, id4)\n)",
      "CRC" : "7375818750484623977",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id1",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 1,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id2",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id3",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id4",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 1,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "id1", "id2" ],
      "primaryKeySortOrders" : [ "desc", "asc" ],
      "primaryKeyName" : "pk1",
      "foreignKeys" : [
        {
          "name" : "fk1",
          "columns" : [ "id1", "id2" ],
          "referenceTable" : "T9",
          "referenceColumns" : [ "id2", "id3" ],
          "onUpdate" : "NO ACTION",
          "onDelete" : "NO ACTION",
          "isDeferred" : 0
        }
      ],
      "uniqueKeys" : [
        {
          "name" : "id1_uk",
          "columns" : [ "id1" ],
          "sortOrders" : [ "" ]
        },
        {
          "name" : "id4_uk",
          "columns" : [ "id4" ],
          "sortOrders" : [ "" ]
        },
        {
          "name" : "uk1",
          "columns" : [ "id2", "id3" ],
          "sortOrders" : [ "", "" ]
        },
        {
          "columns" : [ "id3", "id4" ],
          "sortOrders" : [ "", "" ]
        }
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T11(
      id1 INT,
      id2 INT,
      id3 INT,
      FOREIGN KEY (id1) REFERENCES T9 (id1) ON DELETE CASCADE,
      FOREIGN KEY (id1) REFERENCES T9 (id1) ON UPDATE SET NULL
    )

    {
      "name" : "T11",
      "schema" : "CREATE TABLE T11(\n  id1 INTEGER,\n  id2 INTEGER,\n  id3 INTEGER,\n  FOREIGN KEY (id1) REFERENCES T9 (id1) ON DELETE CASCADE,\n  FOREIGN KEY (id1) REFERENCES T9 (id1) ON UPDATE SET NULL\n)",
      "CRC" : "-5566162567054761315",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id1",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id2",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id3",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
        {
          "columns" : [ "id1" ],
          "referenceTable" : "T9",
          "referenceColumns" : [ "id1" ],
          "onUpdate" : "NO ACTION",
          "onDelete" : "CASCADE",
          "isDeferred" : 0
        },
        {
          "columns" : [ "id1" ],
          "referenceTable" : "T9",
          "referenceColumns" : [ "id1" ],
          "onUpdate" : "SET NULL",
          "onDelete" : "NO ACTION",
          "isDeferred" : 0
        }
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T12(
      id1 INT,
      id2 INT,
      id3 INT,
      FOREIGN KEY (id1) REFERENCES T9 (id1) ON DELETE SET DEFAULT DEFERRABLE INITIALLY DEFERRED,
      FOREIGN KEY (id2) REFERENCES T9 (id1) ON UPDATE NO ACTION
    )

    {
      "name" : "T12",
      "schema" : "CREATE TABLE T12(\n  id1 INTEGER,\n  id2 INTEGER,\n  id3 INTEGER,\n  FOREIGN KEY (id1) REFERENCES T9 (id1) ON DELETE SET DEFAULT DEFERRABLE INITIALLY DEFERRED,\n  FOREIGN KEY (id2) REFERENCES T9 (id1) ON UPDATE NO ACTION\n)",
      "CRC" : "3766894366359324473",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id1",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id2",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id3",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
        {
          "columns" : [ "id1" ],
          "referenceTable" : "T9",
          "referenceColumns" : [ "id1" ],
          "onUpdate" : "NO ACTION",
          "onDelete" : "SET DEFAULT",
          "isDeferred" : 1
        },
        {
          "columns" : [ "id2" ],
          "referenceTable" : "T9",
          "referenceColumns" : [ "id1" ],
          "onUpdate" : "NO ACTION",
          "onDelete" : "NO ACTION",
          "isDeferred" : 0
        }
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T12a(
      id1 INT,
      id2 INT,
      id3 INT,
      FOREIGN KEY (id1) REFERENCES T9 (id1) ON DELETE RESTRICT NOT DEFERRABLE
    )

    {
      "name" : "T12a",
      "schema" : "CREATE TABLE T12a(\n  id1 INTEGER,\n  id2 INTEGER,\n  id3 INTEGER,\n  FOREIGN KEY (id1) REFERENCES T9 (id1) ON DELETE RESTRICT NOT DEFERRABLE\n)",
      "CRC" : "5622280100769593650",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id1",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id2",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id3",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
        {
          "columns" : [ "id1" ],
          "referenceTable" : "T9",
          "referenceColumns" : [ "id1" ],
          "onUpdate" : "NO ACTION",
          "onDelete" : "RESTRICT",
          "isDeferred" : 0
        }
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T12b(
      id1 INT,
      id2 INT,
      FOREIGN KEY (id1) REFERENCES T9 (id1) NOT DEFERRABLE
    )

    {
      "name" : "T12b",
      "schema" : "CREATE TABLE T12b(\n  id1 INTEGER,\n  id2 INTEGER,\n  FOREIGN KEY (id1) REFERENCES T9 (id1) NOT DEFERRABLE\n)",
      "CRC" : "2984315676194087904",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id1",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id2",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
        {
          "columns" : [ "id1" ],
          "referenceTable" : "T9",
          "referenceColumns" : [ "id1" ],
          "onUpdate" : "NO ACTION",
          "onDelete" : "NO ACTION",
          "isDeferred" : 0
        }
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE with_fk_on_columns(
      id1 INT! REFERENCES T2 (id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED,
      id2 INT! REFERENCES T10 (id4) ON DELETE CASCADE,
      FOREIGN KEY (id1, id2) REFERENCES T10 (id3, id4)
    )

    {
      "name" : "with_fk_on_columns",
      "schema" : "CREATE TABLE with_fk_on_columns(\n  id1 INTEGER NOT NULL REFERENCES T2 (id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED,\n  id2 INTEGER NOT NULL REFERENCES T10 (id4) ON DELETE CASCADE,\n  FOREIGN KEY (id1, id2) REFERENCES T10 (id3, id4)\n)",
      "CRC" : "711224124431262369",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id1",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "id2",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
        {
          "columns" : [ "id1" ],
          "referenceTable" : "T2",
          "referenceColumns" : [ "id" ],
          "onUpdate" : "CASCADE",
          "onDelete" : "NO ACTION",
          "isDeferred" : 1
        },
        {
          "columns" : [ "id2" ],
          "referenceTable" : "T10",
          "referenceColumns" : [ "id4" ],
          "onUpdate" : "NO ACTION",
          "onDelete" : "CASCADE",
          "isDeferred" : 0
        },
        {
          "columns" : [ "id1", "id2" ],
          "referenceTable" : "T10",
          "referenceColumns" : [ "id3", "id4" ],
          "onUpdate" : "NO ACTION",
          "onDelete" : "NO ACTION",
          "isDeferred" : 0
        }
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE recreated_in_a_group(
      id INT
    ) @RECREATE(my_recreate_group)

    {
      "name" : "recreated_in_a_group",
      "schema" : "CREATE TABLE recreated_in_a_group(\n  id INTEGER\n)",
      "CRC" : "-3666809099812167695",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 1,
      "recreateGroupName" : "my_recreate_group",
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[backing_table]]
    CREATE TABLE backing(
      k BLOB PRIMARY KEY,
      v BLOB!
    )

    {
      "name" : "backing",
      "schema" : "CREATE TABLE backing(\n  k BLOB PRIMARY KEY,\n  v BLOB NOT NULL\n)",
      "CRC" : "-6413948131567982202",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "isBacking" : 1,
      "attributes" : [
        {
          "name" : "cql:backing_table",
          "value" : 1
        }
      ],
      "columns" : [
        {
          "name" : "k",
          "type" : "blob",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 1,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "v",
          "type" : "blob",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "k" ],
      "primaryKeySortOrders" : [ "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[backed_by=backing]]
    CREATE TABLE backed(
      id INT PRIMARY KEY,
      name TEXT!,
      details TEXT
    )

    {
      "name" : "backed",
      "schema" : "CREATE TABLE backed(\n  id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  details TEXT\n)",
      "CRC" : "8126202250363961562",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "isBacked" : 1,
      "typeHash" : -8913718785021915616,
      "attributes" : [
        {
          "name" : "cql:backed_by",
          "value" : "backing"
        }
      ],
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -5886701367367956936,
          "isPrimaryKey" : 1,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -6639502068221071091,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "details",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 4276741016019094617,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "id" ],
      "primaryKeySortOrders" : [ "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE radioactive(
      id INT!,
      danger TEXT @SENSITIVE
    )

    {
      "name" : "radioactive",
      "schema" : "CREATE TABLE radioactive(\n  id INTEGER NOT NULL,\n  danger TEXT\n)",
      "CRC" : "4798964007804907379",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "danger",
          "type" : "text",
          "isSensitive" : 1,
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE T1(
      id INT,
      name TEXT
    )

    {
      "name" : "T1",
      "schema" : "CREATE TABLE T1(\n  id INTEGER,\n  name TEXT\n)",
      "CRC" : "5967026926312045155",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE with_collate_and_check(
      id TEXT COLLATE bar CHECK(id >= '_' AND id <= 'zzzzz') 
    )

    {
      "name" : "with_collate_and_check",
      "schema" : "CREATE TABLE with_collate_and_check(\n  id TEXT COLLATE bar CHECK(id >= '_' AND id <= 'zzzzz') \n)",
      "CRC" : "2442132863554757907",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "collate" : "bar",
          "checkExpr" : "id >= '_' AND id <= 'zzzzz'",
          "checkExprArgs" : [  ],
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE with_check_constraints(
      v INT,
      CONSTRAINT x CHECK (v > 5)
    )

    {
      "name" : "with_check_constraints",
      "schema" : "CREATE TABLE with_check_constraints(\n  v INTEGER,\n  CONSTRAINT x CHECK (v > 5)\n)",
      "CRC" : "3264027466860092402",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "v",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
        {
          "name" : "x",
          "checkExpr" : "v > 5",
          "checkExprArgs" : [  ]
        }
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE with_unnamed_check_constraints(
      w INT<meters>,
      CHECK (w > 5)
    )

    {
      "name" : "with_unnamed_check_constraints",
      "schema" : "CREATE TABLE with_unnamed_check_constraints(\n  w INTEGER,\n  CHECK (w > 5)\n)",
      "CRC" : "4543876486311618263",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "w",
          "type" : "integer",
          "kind" : "meters",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
        {
          "checkExpr" : "w > 5",
          "checkExprArgs" : [  ]
        }
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE with_from_recreate(
      id INT,
      t TEXT
    ) @CREATE(3, cql:from_recreate)

    {
      "name" : "with_from_recreate",
      "schema" : "CREATE TABLE with_from_recreate(\n  id INTEGER,\n  t TEXT\n)",
      "CRC" : "772447308169098338",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 1,
      "addedVersion" : 3,
      "addedMigrationProc" : "cql:from_recreate",
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "t",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[doc_comment="/** comment for the table */"]]
    CREATE TABLE potato_table(
      [[doc_comment="/** for the id column */"]]
      potato_id INT,
      [[doc_comment="/** for the name column */"]]
      @ATTRIBUTE(normal_attribute)
      potato_name TEXT
    )

    {
      "name" : "potato_table",
      "schema" : "CREATE TABLE potato_table(\n  potato_id INTEGER,\n  potato_name TEXT\n)",
      "CRC" : "-2522002868851592223",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "attributes" : [
        {
          "name" : "cql:doc_comment",
          "value" : "/** comment for the table */"
        }
      ],
      "columns" : [
        {
          "name" : "potato_id",
          "attributes" : [
            {
              "name" : "cql:doc_comment",
              "value" : "/** for the id column */"
            }
          ],
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "potato_name",
          "attributes" : [
            {
              "name" : "cql:doc_comment",
              "value" : "/** for the name column */"
            },
            {
              "name" : "normal_attribute",
              "value" : 1
            }
          ],
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE t_for_unsub(
      id INT
    )

    {
      "name" : "t_for_unsub",
      "schema" : "CREATE TABLE t_for_unsub(\n  id INTEGER\n)",
      "CRC" : "7980008419978162777",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 1,
      "isRecreated": 0,
      "unsubscribedVersion" : 1,
      "region" : "region0",
      "deployedInRegion" : "region2",
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[backed_by=backing]]
    CREATE TABLE name(
      first TEXT!,
      middle TEXT,
      last TEXT!,
      PRIMARY KEY (first, last)
    )

    {
      "name" : "name",
      "schema" : "CREATE TABLE name(\n  first TEXT NOT NULL,\n  middle TEXT,\n  last TEXT NOT NULL,\n  PRIMARY KEY (first, last)\n)",
      "CRC" : "-8609840776327253249",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "isBacked" : 1,
      "typeHash" : -3904228771888844557,
      "attributes" : [
        {
          "name" : "cql:backed_by",
          "value" : "backing"
        }
      ],
      "columns" : [
        {
          "name" : "first",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 4617449399684398850,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "middle",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 4528017236352052234,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "last",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 5290556233374333969,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "first", "last" ],
      "primaryKeySortOrders" : [ "", "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[backed_by=backing]]
    CREATE TABLE every_type(
      bool_column BOOL!,
      int32_column INT!,
      int64_column LONG!,
      float_column REAL!,
      string_column TEXT!,
      blob_column BLOB!,
      PRIMARY KEY (bool_column)
    )

    {
      "name" : "every_type",
      "schema" : "CREATE TABLE every_type(\n  bool_column BOOL NOT NULL,\n  int32_column INTEGER NOT NULL,\n  int64_column LONG_INT NOT NULL,\n  float_column REAL NOT NULL,\n  string_column TEXT NOT NULL,\n  blob_column BLOB NOT NULL,\n  PRIMARY KEY (bool_column)\n)",
      "CRC" : "2390264747603517131",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "isBacked" : 1,
      "typeHash" : 2569358707010711297,
      "attributes" : [
        {
          "name" : "cql:backed_by",
          "value" : "backing"
        }
      ],
      "columns" : [
        {
          "name" : "bool_column",
          "type" : "bool",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 1443186251863196780,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "int32_column",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 8296329742438056134,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "int64_column",
          "type" : "long",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 505733556069586822,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "float_column",
          "type" : "real",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -4468635629380271825,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "string_column",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 891190055386635961,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "blob_column",
          "type" : "blob",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 3794774713840919904,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "bool_column" ],
      "primaryKeySortOrders" : [ "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[backed_by=backing]]
    CREATE TABLE continents(
      country TEXT!,
      africa TEXT!,
      antarctica TEXT!,
      asia TEXT!,
      europe TEXT!,
      north_america TEXT!,
      oceania TEXT!,
      south_america TEXT!,
      PRIMARY KEY (country)
    )

    {
      "name" : "continents",
      "schema" : "CREATE TABLE continents(\n  country TEXT NOT NULL,\n  africa TEXT NOT NULL,\n  antarctica TEXT NOT NULL,\n  asia TEXT NOT NULL,\n  europe TEXT NOT NULL,\n  north_america TEXT NOT NULL,\n  oceania TEXT NOT NULL,\n  south_america TEXT NOT NULL,\n  PRIMARY KEY (country)\n)",
      "CRC" : "-6994876952747779156",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "isBacked" : 1,
      "typeHash" : 2065415439301712821,
      "attributes" : [
        {
          "name" : "cql:backed_by",
          "value" : "backing"
        }
      ],
      "columns" : [
        {
          "name" : "country",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -2102374144744990836,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "africa",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 394486272270879122,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "antarctica",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -484571078120801565,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "asia",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 5070167738990530560,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "europe",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -2563820107089790621,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "north_america",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -1488744293359706050,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "oceania",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 3577246004614816537,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "south_america",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 2819807441763825719,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "country" ],
      "primaryKeySortOrders" : [ "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[backed_by=backing]]
    CREATE TABLE pks_not_first_columns(
      a BOOL!,
      b INT!,
      c LONG!,
      d REAL!,
      e TEXT!,
      f BLOB!,
      PRIMARY KEY (b, d, f)
    )

    {
      "name" : "pks_not_first_columns",
      "schema" : "CREATE TABLE pks_not_first_columns(\n  a BOOL NOT NULL,\n  b INTEGER NOT NULL,\n  c LONG_INT NOT NULL,\n  d REAL NOT NULL,\n  e TEXT NOT NULL,\n  f BLOB NOT NULL,\n  PRIMARY KEY (b, d, f)\n)",
      "CRC" : "-784828766026158565",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "isBacked" : 1,
      "typeHash" : 286092548604229473,
      "attributes" : [
        {
          "name" : "cql:backed_by",
          "value" : "backing"
        }
      ],
      "columns" : [
        {
          "name" : "a",
          "type" : "bool",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 7622422352349572871,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "b",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -3377685759483933034,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "c",
          "type" : "long",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -7733614587723617460,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "d",
          "type" : "real",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -4894074374016912438,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "e",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 4955917742259176339,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "f",
          "type" : "blob",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 4727874118774403790,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "b", "d", "f" ],
      "primaryKeySortOrders" : [ "", "", "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[backed_by=backing]]
    CREATE TABLE only_pks_nonnull(
      a BOOL!,
      b INT!,
      c LONG!,
      d REAL,
      e TEXT,
      f BLOB,
      PRIMARY KEY (a, b, c)
    )

    {
      "name" : "only_pks_nonnull",
      "schema" : "CREATE TABLE only_pks_nonnull(\n  a BOOL NOT NULL,\n  b INTEGER NOT NULL,\n  c LONG_INT NOT NULL,\n  d REAL,\n  e TEXT,\n  f BLOB,\n  PRIMARY KEY (a, b, c)\n)",
      "CRC" : "1556579366916686542",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "isBacked" : 1,
      "typeHash" : 1318301014930005084,
      "attributes" : [
        {
          "name" : "cql:backed_by",
          "value" : "backing"
        }
      ],
      "columns" : [
        {
          "name" : "a",
          "type" : "bool",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 7622422352349572871,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "b",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -3377685759483933034,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "c",
          "type" : "long",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -7733614587723617460,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "d",
          "type" : "real",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 7022457654081399383,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "e",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -8419237314434305493,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "f",
          "type" : "blob",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 7349565770631330089,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "a", "b", "c" ],
      "primaryKeySortOrders" : [ "", "", "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[backed_by=backing]]
    CREATE TABLE some_non_pk_nonnull(
      a BOOL!,
      b INT!,
      c LONG!,
      d REAL,
      e TEXT!,
      f BLOB,
      PRIMARY KEY (a, b, c)
    )

    {
      "name" : "some_non_pk_nonnull",
      "schema" : "CREATE TABLE some_non_pk_nonnull(\n  a BOOL NOT NULL,\n  b INTEGER NOT NULL,\n  c LONG_INT NOT NULL,\n  d REAL,\n  e TEXT NOT NULL,\n  f BLOB,\n  PRIMARY KEY (a, b, c)\n)",
      "CRC" : "-5133815292676357233",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "isBacked" : 1,
      "typeHash" : 4076753061676181061,
      "attributes" : [
        {
          "name" : "cql:backed_by",
          "value" : "backing"
        }
      ],
      "columns" : [
        {
          "name" : "a",
          "type" : "bool",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 7622422352349572871,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "b",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -3377685759483933034,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "c",
          "type" : "long",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -7733614587723617460,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "d",
          "type" : "real",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 7022457654081399383,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "e",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 4955917742259176339,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "f",
          "type" : "blob",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 7349565770631330089,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "a", "b", "c" ],
      "primaryKeySortOrders" : [ "", "", "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[backed_by=backing]]
    CREATE TABLE _starts_with_underscore(
      foo INT! PRIMARY KEY,
      bar TEXT
    )

    {
      "name" : "_starts_with_underscore",
      "schema" : "CREATE TABLE _starts_with_underscore(\n  foo INTEGER NOT NULL PRIMARY KEY,\n  bar TEXT\n)",
      "CRC" : "8638244384366221103",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "isBacked" : 1,
      "typeHash" : 8853590320677483837,
      "attributes" : [
        {
          "name" : "cql:backed_by",
          "value" : "backing"
        }
      ],
      "columns" : [
        {
          "name" : "foo",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 6455263664374132408,
          "isPrimaryKey" : 1,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "bar",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -6920796709643815868,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "foo" ],
      "primaryKeySortOrders" : [ "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    [[backed_by=backing]]
    CREATE TABLE ends_with_underscore_(
      foo TEXT PRIMARY KEY,
      bar INT
    )

    {
      "name" : "ends_with_underscore_",
      "schema" : "CREATE TABLE ends_with_underscore_(\n  foo TEXT PRIMARY KEY,\n  bar INTEGER\n)",
      "CRC" : "-633676795809399280",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "isBacked" : 1,
      "typeHash" : -4787200482362537033,
      "attributes" : [
        {
          "name" : "cql:backed_by",
          "value" : "backing"
        }
      ],
      "columns" : [
        {
          "name" : "foo",
          "type" : "text",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : 2421886823615442535,
          "isPrimaryKey" : 1,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "bar",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "typeHash" : -8090552460257941517,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "foo" ],
      "primaryKeySortOrders" : [ "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE `abc def`(
      `a b` INT! UNIQUE,
      `x y` INT! PRIMARY KEY
    )

    {
      "name" : "abc def",
      "schema" : "CREATE TABLE [abc def](\n  [a b] INTEGER NOT NULL UNIQUE,\n  [x y] INTEGER NOT NULL PRIMARY KEY\n)",
      "CRC" : "-3130740227523881403",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "indices" : [ "wx yz" ],
      "columns" : [
        {
          "name" : "a b",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 1,
          "isAutoIncrement" : 0
        },
        {
          "name" : "x y",
          "type" : "integer",
          "isNotNull" : 1,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 1,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [ "x y" ],
      "primaryKeySortOrders" : [ "" ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
        {
          "name" : "a b_uk",
          "columns" : [ "a b" ],
          "sortOrders" : [ "" ]
        }
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE returning_tests(
      ix INT,
      iy INT
    )

    {
      "name" : "returning_tests",
      "schema" : "CREATE TABLE returning_tests(\n  ix INTEGER,\n  iy INTEGER\n)",
      "CRC" : "-3422067547187819652",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 0,
      "columns" : [
        {
          "name" : "ix",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "iy",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    }
  ],
  "virtualTables" : [

    The statement ending at line XXXX

    @ATTRIBUTE(banana)
    CREATE TABLE a_virtual_table(
      id INT,
      t TEXT
    ) @RECREATE

    {
      "name" : "a_virtual_table",
      "schema" : "CREATE TABLE a_virtual_table(\n  id INTEGER,\n  t TEXT\n)",
      "CRC" : "3010990788603065896",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 1,
      "isVirtual" : 1,
      "isEponymous" : 0,
      "module" : "a_module",
      "moduleArgs" : "this, that, the_other",
      "attributes" : [
        {
          "name" : "banana",
          "value" : 1
        }
      ],
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "t",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE a_second_virtual_table(
      id INT @SENSITIVE,
      t TEXT
    ) @RECREATE

    {
      "name" : "a_second_virtual_table",
      "schema" : "CREATE TABLE a_second_virtual_table(\n  id INTEGER,\n  t TEXT\n)",
      "CRC" : "-8286429800647299700",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 1,
      "isVirtual" : 1,
      "isEponymous" : 0,
      "module" : "a_module",
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isSensitive" : 1,
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "t",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE a_third_virtual_table(
      id INT @SENSITIVE,
      t TEXT,
      q REAL
    ) @RECREATE

    {
      "name" : "a_third_virtual_table",
      "schema" : "CREATE TABLE a_third_virtual_table(\n  id INTEGER,\n  t TEXT,\n  q REAL\n)",
      "CRC" : "-6640301384858104825",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 1,
      "isVirtual" : 1,
      "isEponymous" : 0,
      "module" : "a_module",
      "moduleArgs" : "  id INTEGER,\n  t TEXT,\n  q REAL",
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isSensitive" : 1,
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "t",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "q",
          "type" : "real",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE a_deleted_virtual_table(
      id INT @SENSITIVE,
      t TEXT,
      q REAL
    ) @DELETE(2, cql:module_must_not_be_deleted_see_docs_for_CQL0392)

    {
      "name" : "a_deleted_virtual_table",
      "schema" : "CREATE TABLE a_deleted_virtual_table(\n  id INTEGER,\n  t TEXT,\n  q REAL\n)",
      "CRC" : "-4336016932503752576",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 0,
      "isAdded" : 0,
      "isDeleted" : 1,
      "deletedVersion" : 2,
      "deletedMigrationProc" : "cql:module_must_not_be_deleted_see_docs_for_CQL0392",
      "isRecreated": 0,
      "isVirtual" : 1,
      "isEponymous" : 0,
      "module" : "a_module",
      "moduleArgs" : "  id INTEGER,\n  t TEXT,\n  q REAL",
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isSensitive" : 1,
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "t",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "q",
          "type" : "real",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    },

    The statement ending at line XXXX

    CREATE TABLE epon_virt_table(
      id INT,
      t TEXT
    ) WITHOUT ROWID @RECREATE

    {
      "name" : "epon_virt_table",
      "schema" : "CREATE TABLE epon_virt_table(\n  id INTEGER,\n  t TEXT\n) WITHOUT ROWID",
      "CRC" : "-1341152214091400811",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "withoutRowid" : 1,
      "isAdded" : 0,
      "isDeleted" : 0,
      "isRecreated": 1,
      "isVirtual" : 1,
      "isEponymous" : 1,
      "module" : "epon_virt_table",
      "moduleArgs" : "this, that, the_other",
      "columns" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        },
        {
          "name" : "t",
          "type" : "text",
          "isNotNull" : 0,
          "isAdded" : 0,
          "isDeleted" : 0,
          "isPrimaryKey" : 0,
          "isUniqueKey" : 0,
          "isAutoIncrement" : 0
        }
      ],
      "primaryKey" : [  ],
      "primaryKeySortOrders" : [  ],
      "foreignKeys" : [
      ],
      "uniqueKeys" : [
      ],
      "checkExpressions" : [
      ]
    }
  ],
  "views" : [

    The statement ending at line XXXX

    CREATE VIEW region_0_view AS
      SELECT *
        FROM Foo

    {
      "name" : "region_0_view",
      "CRC" : "-671179869019290295",
      "isTemp" : 0,
      "isDeleted" : 0,
      "region" : "region0",
      "deployedInRegion" : "region2",
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "select" : "SELECT id, name FROM Foo",
      "selectArgs" : [  ],
      "fromTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ]
    }

    The statement ending at line XXXX

    CREATE VIEW MyView AS
      SELECT *
        FROM Foo

    ,
    {
      "name" : "MyView",
      "CRC" : "1603543019513087516",
      "isTemp" : 0,
      "isDeleted" : 0,
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "select" : "SELECT id, name FROM Foo",
      "selectArgs" : [  ],
      "fromTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ]
    }

    The statement ending at line XXXX

    CREATE VIEW MyOtherView AS
      SELECT *
        FROM MyView

    ,
    {
      "name" : "MyOtherView",
      "CRC" : "-4030706286080909447",
      "isTemp" : 0,
      "isDeleted" : 0,
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "select" : "SELECT id, name FROM MyView",
      "selectArgs" : [  ],
      "fromTables" : [ "Foo" ],
      "usesViews" : [ "MyView" ],
      "usesTables" : [ "Foo" ]
    }

    The statement ending at line XXXX

    @ATTRIBUTE(my_attribute=('any', ('tree', 'of'), 'values'))
    @ATTRIBUTE(my_single_attribute='other_value')
    CREATE VIEW MyViewWithAttributes AS
      SELECT *
        FROM Foo

    ,
    {
      "name" : "MyViewWithAttributes",
      "CRC" : "-2882156276960008654",
      "isTemp" : 0,
      "isDeleted" : 0,
      "attributes" : [
        {
          "name" : "my_attribute",
          "value" : ["any", ["tree", "of"], "values"]
        },
        {
          "name" : "my_single_attribute",
          "value" : "other_value"
        }
      ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "select" : "SELECT id, name FROM Foo",
      "selectArgs" : [  ],
      "fromTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ]
    }

    The statement ending at line XXXX

    CREATE VIEW ADeletedView AS
      SELECT *
        FROM Foo @DELETE(1)

    ,
    {
      "name" : "ADeletedView",
      "CRC" : "-4577997065803697620",
      "isTemp" : 0,
      "isDeleted" : 1,
      "deletedVersion" : 1,
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "select" : "SELECT id, name FROM Foo",
      "selectArgs" : [  ],
      "fromTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ]
    }

    The statement ending at line XXXX

    CREATE VIEW ADeletedViewWithMigrationProc AS
      SELECT *
        FROM Foo @DELETE(1, view_delete)

    ,
    {
      "name" : "ADeletedViewWithMigrationProc",
      "CRC" : "-2367085062760299014",
      "isTemp" : 0,
      "isDeleted" : 1,
      "deletedVersion" : 1,
      "deletedMigrationProc" : "view_delete",
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "select" : "SELECT id, name FROM Foo",
      "selectArgs" : [  ],
      "fromTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ]
    }

    The statement ending at line XXXX

    CREATE VIEW my_view AS
      SELECT 1 AS foo, T1.*
        FROM T1

    ,
    {
      "name" : "my_view",
      "CRC" : "7265233238016895804",
      "isTemp" : 0,
      "isDeleted" : 0,
      "projection" : [
        {
          "name" : "foo",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "select" : "SELECT 1 AS foo, T1.id, T1.name FROM T1",
      "selectArgs" : [  ],
      "fromTables" : [ "T1" ],
      "usesTables" : [ "T1" ]
    }

    The statement ending at line XXXX

    CREATE VIEW deleted_view AS
      SELECT 1 AS x @DELETE(2)

    ,
    {
      "name" : "deleted_view",
      "CRC" : "521780298378962157",
      "isTemp" : 0,
      "isDeleted" : 1,
      "deletedVersion" : 2,
      "projection" : [
        {
          "name" : "x",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "select" : "SELECT 1 AS x",
      "selectArgs" : [  ],
      "usesTables" : [  ]
    }

    The statement ending at line XXXX

    CREATE VIEW `a view` AS
      SELECT *
        FROM `abc def`

    ,
    {
      "name" : "a view",
      "CRC" : "-3967341778028795069",
      "isTemp" : 0,
      "isDeleted" : 0,
      "projection" : [
        {
          "name" : "a b",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "x y",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "select" : "SELECT [a b], [x y] FROM [abc def]",
      "selectArgs" : [  ],
      "fromTables" : [ "abc def" ],
      "usesTables" : [ "abc def" ]
    }
  ],
  "indices" : [

    The statement ending at line XXXX

    CREATE INDEX region_0_index ON Foo (name, id)

    {
      "name" : "region_0_index",
      "CRC" : "2270517184909940129",
      "table" : "Foo",
      "isUnique" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 0,
      "region" : "region0",
      "deployedInRegion" : "region2",
      "columns" : [ "name", "id" ],
      "sortOrders" : [ "", "" ]
    }
    The statement ending at line XXXX

    CREATE UNIQUE INDEX IF NOT EXISTS MyIndex ON Foo (name DESC, id ASC)

    ,
    {
      "name" : "MyIndex",
      "CRC" : "7091245658213937265",
      "table" : "Foo",
      "isUnique" : 1,
      "ifNotExists" : 1,
      "isDeleted" : 0,
      "columns" : [ "name", "id" ],
      "sortOrders" : [ "desc", "asc" ]
    }
    The statement ending at line XXXX

    CREATE INDEX MyOtherIndex ON Foo (id)

    ,
    {
      "name" : "MyOtherIndex",
      "CRC" : "3161354011846440424",
      "table" : "Foo",
      "isUnique" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 0,
      "columns" : [ "id" ],
      "sortOrders" : [ "" ]
    }
    The statement ending at line XXXX

    CREATE INDEX MyExpressionIndex ON Foo (id + 5, id * id)

    ,
    {
      "name" : "MyExpressionIndex",
      "CRC" : "3858854878338302551",
      "table" : "Foo",
      "isUnique" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 0,
      "columns" : [ "id + 5", "id * id" ],
      "sortOrders" : [ "", "" ]
    }
    The statement ending at line XXXX

    CREATE INDEX MyPartialIndex ON Foo (id * id)
    WHERE id < 1000

    ,
    {
      "name" : "MyPartialIndex",
      "CRC" : "-3201573252572160653",
      "table" : "Foo",
      "isUnique" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 0,
      "where" : "id < 1000",
      "columns" : [ "id * id" ],
      "sortOrders" : [ "" ]
    }
    The statement ending at line XXXX

    CREATE INDEX YetAnotherIndex ON Foo (id) @DELETE(1)

    ,
    {
      "name" : "YetAnotherIndex",
      "CRC" : "4293273887123709068",
      "table" : "Foo",
      "isUnique" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 1,
      "deletedVersion" : 1,
      "columns" : [ "id" ],
      "sortOrders" : [ "" ]
    }
    The statement ending at line XXXX

    @ATTRIBUTE(my_attribute=('any', ('tree', 'of'), 'values'))
    @ATTRIBUTE(my_single_attribute='other_value')
    CREATE INDEX MyIndexWithAttributes ON Foo (id)

    ,
    {
      "name" : "MyIndexWithAttributes",
      "CRC" : "2565375927787521812",
      "table" : "Foo",
      "isUnique" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 0,
      "attributes" : [
        {
          "name" : "my_attribute",
          "value" : ["any", ["tree", "of"], "values"]
        },
        {
          "name" : "my_single_attribute",
          "value" : "other_value"
        }
      ],
      "columns" : [ "id" ],
      "sortOrders" : [ "" ]
    }
    The statement ending at line XXXX

    CREATE INDEX `wx yz` ON `abc def` (`a b` ASC)

    ,
    {
      "name" : "wx yz",
      "CRC" : "210597346967693894",
      "table" : "abc def",
      "isUnique" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 0,
      "columns" : [ "`a b`" ],
      "sortOrders" : [ "asc" ]
    }
  ],
  "triggers" : [

    The statement ending at line XXXX

    CREATE TEMP TRIGGER IF NOT EXISTS trigger1
      BEFORE DELETE ON foo
      FOR EACH ROW
      WHEN old.id = 3
    BEGIN
    DELETE FROM Foo WHERE id = id + 1;

    DELETE FROM Foo WHERE id = old.id;
    END

    {
      "name" : "trigger1",
      "CRC" : "3355530896228449101",
      "target" : "Foo",
      "isTemp" : 1,
      "ifNotExists" : 1,
      "isDeleted" : 0,
      "isBeforeTrigger" : 1,
      "isDeleteTrigger" : 1,
      "forEachRow" : 1,
      "whenExpr" : "old.id = 3",
      "whenExprArgs" : [  ],
      "statement" : "CREATE TEMP TRIGGER IF NOT EXISTS trigger1 BEFORE DELETE ON foo FOR EACH ROW WHEN old.id = 3 BEGIN DELETE FROM Foo WHERE id = id + 1;  DELETE FROM Foo WHERE id = old.id; END",
      "statementArgs" : [  ],
      "deleteTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ]
    }
    The statement ending at line XXXX

    CREATE TRIGGER trigger2
      AFTER INSERT ON Foo
    BEGIN
    DELETE FROM Foo WHERE id > new.id;
    END

    ,
    {
      "name" : "trigger2",
      "CRC" : "4421779506610101095",
      "target" : "Foo",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 0,
      "isAfterTrigger" : 1,
      "isInsertTrigger" : 1,
      "statement" : "CREATE TRIGGER trigger2 AFTER INSERT ON Foo BEGIN DELETE FROM Foo WHERE id > new.id; END",
      "statementArgs" : [  ],
      "deleteTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ]
    }
    The statement ending at line XXXX

    CREATE TRIGGER trigger3
      INSTEAD OF UPDATE ON MyView
      WHEN old.id > 1 AND new.id < 3
    BEGIN
    UPDATE Foo
      SET id = 7
      WHERE name > old.name AND name < new.name;

    INSERT INTO Foo(id, name)
      VALUES (7, 'goo');
    END

    ,
    {
      "name" : "trigger3",
      "CRC" : "5975803729841823154",
      "target" : "MyView",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 0,
      "isInsteadOfTrigger" : 1,
      "isUpdateTrigger" : 1,
      "whenExpr" : "old.id > 1 AND new.id < 3",
      "whenExprArgs" : [  ],
      "statement" : "CREATE TRIGGER trigger3 INSTEAD OF UPDATE ON MyView WHEN old.id > 1 AND new.id < 3 BEGIN UPDATE Foo SET id = 7 WHERE name > old.name AND name < new.name;  INSERT INTO Foo(id, name) VALUES (7, 'goo'); END",
      "statementArgs" : [  ],
      "insertTables" : [ "Foo" ],
      "updateTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ]
    }
    The statement ending at line XXXX

    CREATE TRIGGER trigger4
      INSTEAD OF UPDATE OF id, name ON MyView
    BEGIN
    SELECT 1;
    END

    ,
    {
      "name" : "trigger4",
      "CRC" : "-1284736029247950871",
      "target" : "MyView",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 0,
      "isInsteadOfTrigger" : 1,
      "isUpdateTrigger" : 1,
      "statement" : "CREATE TRIGGER trigger4 INSTEAD OF UPDATE OF id, name ON MyView BEGIN SELECT 1; END",
      "statementArgs" : [  ],
      "usesTables" : [  ]
    }
    The statement ending at line XXXX

    @ATTRIBUTE(my_attribute=('any', ('tree', 'of'), 'values'))
    @ATTRIBUTE(my_single_attribute='other_value')
    CREATE TRIGGER trigger7
      AFTER INSERT ON Foo
    BEGIN
    DELETE FROM Foo WHERE id < new.id;
    END

    ,
    {
      "name" : "trigger7",
      "CRC" : "-1792117196069418879",
      "target" : "Foo",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 0,
      "isAfterTrigger" : 1,
      "isInsertTrigger" : 1,
      "statement" : "CREATE TRIGGER trigger7 AFTER INSERT ON Foo BEGIN DELETE FROM Foo WHERE id < new.id; END",
      "statementArgs" : [  ],
      "attributes" : [
        {
          "name" : "my_attribute",
          "value" : ["any", ["tree", "of"], "values"]
        },
        {
          "name" : "my_single_attribute",
          "value" : "other_value"
        }
      ],
      "deleteTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ]
    }
    The statement ending at line XXXX

    @ATTRIBUTE(my_attribute=('any', ('tree', 'of'), 'values'))
    @ATTRIBUTE(my_single_attribute='other_value')
    CREATE TEMP TRIGGER IF NOT EXISTS trigger8
      BEFORE DELETE ON foo
      FOR EACH ROW
      WHEN old.id = 7
    BEGIN
    DELETE FROM Foo WHERE id = id + 1;

    DELETE FROM Foo WHERE id = old.id;
    END

    ,
    {
      "name" : "trigger8",
      "CRC" : "-5222056699539277017",
      "target" : "Foo",
      "isTemp" : 1,
      "ifNotExists" : 1,
      "isDeleted" : 0,
      "isBeforeTrigger" : 1,
      "isDeleteTrigger" : 1,
      "forEachRow" : 1,
      "whenExpr" : "old.id = 7",
      "whenExprArgs" : [  ],
      "statement" : "CREATE TEMP TRIGGER IF NOT EXISTS trigger8 BEFORE DELETE ON foo FOR EACH ROW WHEN old.id = 7 BEGIN DELETE FROM Foo WHERE id = id + 1;  DELETE FROM Foo WHERE id = old.id; END",
      "statementArgs" : [  ],
      "attributes" : [
        {
          "name" : "my_attribute",
          "value" : ["any", ["tree", "of"], "values"]
        },
        {
          "name" : "my_single_attribute",
          "value" : "other_value"
        }
      ],
      "deleteTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ]
    }
    The statement ending at line XXXX

    CREATE TEMP TRIGGER IF NOT EXISTS trigger5
      BEFORE DELETE ON Foo
    BEGIN
    SELECT RAISE(ROLLBACK, "omg roll it back!");
    END

    ,
    {
      "name" : "trigger5",
      "CRC" : "8733152794063697691",
      "target" : "Foo",
      "isTemp" : 1,
      "ifNotExists" : 1,
      "isDeleted" : 0,
      "isBeforeTrigger" : 1,
      "isDeleteTrigger" : 1,
      "statement" : "CREATE TEMP TRIGGER IF NOT EXISTS trigger5 BEFORE DELETE ON Foo BEGIN SELECT RAISE(ROLLBACK, 'omg roll it back!'); END",
      "statementArgs" : [  ],
      "region" : "region0",
      "deployedInRegion" : "region2",
      "usesTables" : [  ]
    }
    The statement ending at line XXXX

    CREATE TRIGGER trigger6
      AFTER INSERT ON Foo
    BEGIN
    SELECT 1;
    END @DELETE(3)

    ,
    {
      "name" : "trigger6",
      "CRC" : "3668347380138017048",
      "target" : "Foo",
      "isTemp" : 0,
      "ifNotExists" : 0,
      "isDeleted" : 1,
      "deletedVersion" : 3,
      "isAfterTrigger" : 1,
      "isInsertTrigger" : 1,
      "statement" : "CREATE TRIGGER trigger6 AFTER INSERT ON Foo BEGIN SELECT 1; END",
      "statementArgs" : [  ],
      "region" : "region0",
      "deployedInRegion" : "region2",
      "usesTables" : [  ]
    }
    The statement ending at line XXXX

    CREATE TEMP TRIGGER IF NOT EXISTS `compound trigger`
      BEFORE DELETE ON `abc def`
      FOR EACH ROW
      WHEN old.`a b` = 3
    BEGIN
    DELETE FROM `abc def` WHERE `a b` = 2;
    END

    ,
    {
      "name" : "compound trigger",
      "CRC" : "-3644874480545703871",
      "target" : "abc def",
      "isTemp" : 1,
      "ifNotExists" : 1,
      "isDeleted" : 0,
      "isBeforeTrigger" : 1,
      "isDeleteTrigger" : 1,
      "forEachRow" : 1,
      "whenExpr" : "old.[a b] = 3",
      "whenExprArgs" : [  ],
      "statement" : "CREATE TEMP TRIGGER IF NOT EXISTS [compound trigger] BEFORE DELETE ON [abc def] FOR EACH ROW WHEN old.[a b] = 3 BEGIN DELETE FROM [abc def] WHERE [a b] = 2; END",
      "statementArgs" : [  ],
      "deleteTables" : [ "abc def" ],
      "usesTables" : [ "abc def" ]
    }
  ],
  "attributes" : [

  The statement ending at line XXXX

  @ATTRIBUTE(my_other_attribute=('any', ('tree', 'of'), 'values'))
  @ATTRIBUTE(dbname='fred.sql')
  @ATTRIBUTE(dbfile='test/cg_test_json_schema.sql')
  DECLARE database OBJECT

    {
      "name" : "my_other_attribute",
      "value" : ["any", ["tree", "of"], "values"]
    },
    {
      "name" : "dbname",
      "value" : "fred.sql"
    },
    {
      "name" : "dbfile",
      "value" : "test/cg_test_json_schema.sql"
    }
  The statement ending at line XXXX

  @ATTRIBUTE(additional_info='yowsa')
  DECLARE other_database OBJECT

    ,
    {
      "name" : "additional_info",
      "value" : "yowsa"
    }
  ],
  "queries" : [

    The statement ending at line XXXX

    PROC crazy_string ()
    BEGIN
    SELECT "\\ ' \a \b \f \n \t \r \v \\ \" " AS crazy;
    END

    {
      "name" : "crazy_string",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 164,
      "args" : [
      ],
      "usesTables" : [  ],
      "projection" : [
        {
          "name" : "crazy",
          "type" : "text",
          "isNotNull" : 1
        }
      ],
      "statement" : "SELECT '\\ '' \u0007 \b \f \n \t \r \u000b \\ \" ' AS crazy",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC a_query (pattern TEXT!, reject TEXT)
    BEGIN
    SELECT id
      FROM Foo
      WHERE name LIKE pattern AND name <> reject;
    END

    {
      "name" : "a_query",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 356,
      "args" : [
        {
          "name" : "pattern",
          "argOrigin" : "pattern",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "name" : "reject",
          "argOrigin" : "reject",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "fromTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        }
      ],
      "statement" : "SELECT id FROM Foo WHERE name LIKE ? AND name <> ?",
      "statementArgs" : [ "pattern", "reject" ]
    },

    The statement ending at line XXXX

    PROC bigger_query (pattern TEXT!, reject TEXT)
    BEGIN
    SELECT DISTINCT *
      FROM Foo
      WHERE name LIKE pattern AND name <> reject
      GROUP BY name
      HAVING name > reject
      ORDER BY pattern
      LIMIT 1
      OFFSET 3;
    END

    {
      "name" : "bigger_query",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 391,
      "args" : [
        {
          "name" : "pattern",
          "argOrigin" : "pattern",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "name" : "reject",
          "argOrigin" : "reject",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "fromTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "statement" : "SELECT DISTINCT id, name FROM Foo WHERE name LIKE ? AND name <> ? GROUP BY name HAVING name > ? ORDER BY ? LIMIT 1 OFFSET 3",
      "statementArgs" : [ "pattern", "reject", "reject", "pattern" ]
    },

    The statement ending at line XXXX

    @ATTRIBUTE(my_attribute='This is a string attribute')
    PROC joiner (id_ INT!)
    BEGIN
    SELECT *
      FROM Foo AS T1
        INNER JOIN T5 ON T1.id = id_ AND T1.id = T5.l;
    END

    {
      "name" : "joiner",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 641,
      "args" : [
        {
          "name" : "id_",
          "argOrigin" : "id_",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "fromTables" : [ "Foo", "T5" ],
      "usesTables" : [ "Foo", "T5" ],
      "attributes" : [
        {
          "name" : "my_attribute",
          "value" : "This is a string attribute"
        }
      ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        },
        {
          "name" : "r",
          "type" : "real",
          "isNotNull" : 0
        },
        {
          "name" : "bl",
          "type" : "blob",
          "isNotNull" : 0
        },
        {
          "name" : "b",
          "type" : "bool",
          "isNotNull" : 0
        },
        {
          "name" : "l",
          "type" : "long",
          "isNotNull" : 0
        }
      ],
      "statement" : "SELECT id, name, r, bl, b, l FROM Foo AS T1 INNER JOIN T5 ON T1.id = ? AND T1.id = T5.l",
      "statementArgs" : [ "id_" ]
    },

    The statement ending at line XXXX

    PROC radioactive_proc ()
    BEGIN
    SELECT *
      FROM radioactive;
    END

    {
      "name" : "radioactive_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 791,
      "args" : [
      ],
      "fromTables" : [ "radioactive" ],
      "usesTables" : [ "radioactive" ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "danger",
          "type" : "text",
          "isSensitive" : 1,
          "isNotNull" : 0
        }
      ],
      "statement" : "SELECT id, danger FROM radioactive",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC object_proc (anObject OBJECT)
    BEGIN
    SELECT 1 AS x;
    END

    {
      "name" : "object_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 848,
      "args" : [
        {
          "name" : "anObject",
          "argOrigin" : "anObject",
          "type" : "object",
          "isNotNull" : 0
        }
      ],
      "usesTables" : [  ],
      "projection" : [
        {
          "name" : "x",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "statement" : "SELECT 1 AS x",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC proc_inside_region ()
    BEGIN
    SELECT 1 AS a;
    END

    {
      "name" : "proc_inside_region",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1075,
      "args" : [
      ],
      "usesTables" : [  ],
      "region" : "region0",
      "deployedInRegion" : "region2",
      "projection" : [
        {
          "name" : "a",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "statement" : "SELECT 1 AS a",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC with_select_proc ()
    BEGIN
    WITH
      nums (i) AS (
        SELECT 0
        UNION ALL
        SELECT i + 1
          FROM nums
          LIMIT 1
      ),
      vals (v) AS (
        SELECT i
          FROM nums
      )
    SELECT *
      FROM vals;
    END

    {
      "name" : "with_select_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1091,
      "args" : [
      ],
      "usesTables" : [  ],
      "projection" : [
        {
          "name" : "v",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "statement" : "WITH nums (i) AS ( SELECT 0 UNION ALL SELECT i + 1 FROM nums LIMIT 1 ), vals (v) AS ( SELECT i FROM nums ) SELECT v FROM vals",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC json_escapes ()
    BEGIN
    SELECT "\\\r\n\t\b\f\"\x01" AS quoted_text;
    END

    {
      "name" : "json_escapes",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1172,
      "args" : [
      ],
      "usesTables" : [  ],
      "projection" : [
        {
          "name" : "quoted_text",
          "type" : "text",
          "isNotNull" : 1
        }
      ],
      "statement" : "SELECT '\\\r\n\t\b\f\"\u0001' AS quoted_text",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC use_view ()
    BEGIN
    SELECT *
      FROM MyView;
    END

    {
      "name" : "use_view",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1216,
      "args" : [
      ],
      "fromTables" : [ "Foo" ],
      "usesViews" : [ "MyView" ],
      "usesTables" : [ "Foo" ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "statement" : "SELECT id, name FROM MyView",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    [[autotest=((dummy_test, (Foo, (id, name), (1, NULL), (2, "hi"))))]]
    PROC null_attribute ()
    BEGIN
    SELECT *
      FROM Foo;
    END

    {
      "name" : "null_attribute",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1224,
      "args" : [
      ],
      "fromTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ],
      "attributes" : [
        {
          "name" : "cql:autotest",
          "value" : [["dummy_test", ["Foo", ["id", "name"], [1, null], [2, "hi"]]]]
        }
      ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 1
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "statement" : "SELECT id, name FROM Foo",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC shared_frag_user_function_style ()
    BEGIN
    SELECT shared_func() AS result;
    END

    {
      "name" : "shared_frag_user_function_style",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1450,
      "args" : [
      ],
      "fromTables" : [ "T2" ],
      "usesProcedures" : [ "shared_func" ],
      "usesTables" : [ "T2" ],
      "projection" : [
        {
          "name" : "result",
          "type" : "integer",
          "isNotNull" : 0
        }
      ],
      "statement" : "SELECT shared_func() AS result",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC high_bit_escapes ()
    BEGIN
    SELECT "\xa1\xa2" AS t;
    END

    {
      "name" : "high_bit_escapes",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1459,
      "args" : [
      ],
      "usesTables" : [  ],
      "projection" : [
        {
          "name" : "t",
          "type" : "text",
          "isNotNull" : 1
        }
      ],
      "statement" : "SELECT '\u00a1\u00a2' AS t",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    [[doc_comment="/**\n * some potato\n */"]]
    PROC potato (i INT, b REAL, c TEXT)
    BEGIN
    SELECT 1 AS x;
    END

    {
      "name" : "potato",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1478,
      "args" : [
        {
          "name" : "i",
          "argOrigin" : "i",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "b",
          "argOrigin" : "b",
          "type" : "real",
          "isNotNull" : 0
        },
        {
          "name" : "c",
          "argOrigin" : "c",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "usesTables" : [  ],
      "attributes" : [
        {
          "name" : "cql:doc_comment",
          "value" : "/**\n * some potato\n */"
        }
      ],
      "projection" : [
        {
          "name" : "x",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "statement" : "SELECT 1 AS x",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC uses_deleted_view_alias ()
    BEGIN
    WITH
      deleted_view (x, y) AS (
        SELECT 1 AS x, 2 AS y
      )
    SELECT *
      FROM deleted_view;
    END

    {
      "name" : "uses_deleted_view_alias",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1512,
      "args" : [
      ],
      "usesTables" : [  ],
      "projection" : [
        {
          "name" : "x",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "y",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "statement" : "WITH deleted_view (x, y) AS ( SELECT 1 AS x, 2 AS y ) SELECT x, y FROM deleted_view",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    [[implements=interface1]]
    PROC test_interface1_implementation_correct (id_ INT, name_ TEXT)
    BEGIN
    SELECT id_ AS id, name_ AS name;
    END

    {
      "name" : "test_interface1_implementation_correct",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1561,
      "args" : [
        {
          "name" : "id_",
          "argOrigin" : "id_",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "name_",
          "argOrigin" : "name_",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "usesTables" : [  ],
      "attributes" : [
        {
          "name" : "cql:implements",
          "value" : "interface1"
        }
      ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "statement" : "SELECT ? AS id, ? AS name",
      "statementArgs" : [ "id_", "name_" ]
    },

    The statement ending at line XXXX

    PROC generate_quoted_items ()
    BEGIN
    SELECT *
      FROM `abc def`;
    END

    {
      "name" : "generate_quoted_items",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1942,
      "args" : [
      ],
      "fromTables" : [ "abc def" ],
      "usesTables" : [ "abc def" ],
      "projection" : [
        {
          "name" : "a b",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "x y",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "statement" : "SELECT [a b], [x y] FROM [abc def]",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC insert_returning_stmt ()
    BEGIN
    INSERT INTO returning_tests(ix, iy)
      VALUES (1, 2)
      RETURNING (ix + iy AS xy, ix, iy);
    END

    {
      "name" : "insert_returning_stmt",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1974,
      "args" : [
      ],
      "insertTables" : [ "returning_tests" ],
      "usesTables" : [ "returning_tests" ],
      "projection" : [
        {
          "name" : "xy",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "ix",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "iy",
          "type" : "integer",
          "isNotNull" : 0
        }
      ],
      "statement" : "INSERT INTO returning_tests(ix, iy) VALUES (1, 2) RETURNING (ix + iy AS xy, ix, iy)",
      "statementArgs" : [  ]
    },

    The statement ending at line XXXX

    PROC delete_returning_stmt ()
    BEGIN
    DELETE FROM returning_tests
      RETURNING (ix + iy AS xy, ix, iy);
    END

    {
      "name" : "delete_returning_stmt",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 2005,
      "args" : [
      ],
      "deleteTables" : [ "returning_tests" ],
      "usesTables" : [ "returning_tests" ],
      "projection" : [
        {
          "name" : "xy",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "ix",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "iy",
          "type" : "integer",
          "isNotNull" : 0
        }
      ],
      "statement" : "DELETE FROM returning_tests RETURNING (ix + iy AS xy, ix, iy)",
      "statementArgs" : [  ]
    }
  ],
  "inserts" : [

    The statement ending at line XXXX

    PROC insert_proc (id_ INT!, name_ TEXT)
    BEGIN
    INSERT OR REPLACE INTO Foo(id, name)
      VALUES (id_, name_);
    END

    {
      "name" : "insert_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 408,
      "args" : [
        {
          "name" : "id_",
          "argOrigin" : "id_",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "name_",
          "argOrigin" : "name_",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "insertTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ],
      "table" : "Foo",
      "statement" : "INSERT OR REPLACE INTO Foo(id, name) VALUES (?, ?)",
      "statementArgs" : [ "id_", "name_" ],
      "statementType" : "INSERT OR REPLACE",
      "columns" : [ "id", "name" ],
      "values" : [
        {
          "value" : "?",
          "valueArgs" : [ "id_" ]
        },
        {
          "value" : "?",
          "valueArgs" : [ "name_" ]
        }
      ]
    },

    The statement ending at line XXXX

    PROC dummy_insert_proc (seed_ INT!)
    BEGIN
    INSERT INTO fOo(id, name) VALUES (_seed_, printf('name_%d', _seed_)) @DUMMY_SEED(seed_) @DUMMY_NULLABLES;
    END

    {
      "name" : "dummy_insert_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 622,
      "args" : [
        {
          "name" : "seed_",
          "argOrigin" : "seed_",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "insertTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ],
      "table" : "Foo",
      "statement" : "INSERT INTO fOo(id, name) VALUES (?, printf('name_%d', ?))",
      "statementArgs" : [ "_seed_", "_seed_" ],
      "statementType" : "INSERT",
      "columns" : [ "id", "name" ],
      "values" : [
        {
          "value" : "?",
          "valueArgs" : [ "_seed_" ]
        },
        {
          "value" : "printf('name_%d', ?)",
          "valueArgs" : [ "_seed_" ]
        }
      ]
    }
  ],
  "generalInserts" : [

    The statement ending at line XXXX

    PROC insert_with_select ()
    BEGIN
    INSERT INTO T3(id)
      SELECT 1;
    END

    {
      "name" : "insert_with_select",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 740,
      "args" : [
      ],
      "insertTables" : [ "T3" ],
      "usesTables" : [ "T3" ],
      "table" : "T3",
      "statement" : "INSERT INTO T3(id) SELECT 1",
      "statementArgs" : [  ],
      "statementType" : "INSERT",
      "columns" : [ "id" ]
    },

    The statement ending at line XXXX

    PROC insert_compound ()
    BEGIN
    INSERT INTO T3(id)
      VALUES (1)
      UNION ALL
      SELECT 1 AS column1;
    END

    {
      "name" : "insert_compound",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 758,
      "args" : [
      ],
      "insertTables" : [ "T3" ],
      "usesTables" : [ "T3" ],
      "table" : "T3",
      "statement" : "INSERT INTO T3(id) VALUES (1) UNION ALL SELECT 1 AS column1",
      "statementArgs" : [  ],
      "statementType" : "INSERT",
      "columns" : [ "id" ]
    },

    The statement ending at line XXXX

    PROC insert_multi_value ()
    BEGIN
    INSERT INTO T3(id)
      VALUES
        (1),
        (2),
        (3);
    END

    {
      "name" : "insert_multi_value",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 775,
      "args" : [
      ],
      "insertTables" : [ "T3" ],
      "usesTables" : [ "T3" ],
      "table" : "T3",
      "statement" : "INSERT INTO T3(id) VALUES (1), (2), (3)",
      "statementArgs" : [  ],
      "statementType" : "INSERT",
      "columns" : [ "id" ]
    },

    The statement ending at line XXXX

    PROC upsert_proc ()
    BEGIN
    INSERT INTO T3(id)
      VALUES (1)
    ON CONFLICT DO UPDATE
      SET id = 1
      WHERE id = 9;
    END

    {
      "name" : "upsert_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 804,
      "args" : [
      ],
      "insertTables" : [ "T3" ],
      "usesTables" : [ "T3" ],
      "table" : "T3",
      "statement" : "INSERT INTO T3(id) VALUES (1) ON CONFLICT DO UPDATE SET id = 1 WHERE id = 9",
      "statementArgs" : [  ],
      "statementType" : "INSERT",
      "columns" : [ "id" ]
    },

    The statement ending at line XXXX

    PROC with_upsert_proc ()
    BEGIN
    WITH
      data (id) AS (
        VALUES
          (1),
          (2),
          (3)
      )
    INSERT INTO T3(id)
      SELECT id
        FROM data
        WHERE 1
    ON CONFLICT DO UPDATE
      SET id = 1
      WHERE id = 9;
    END

    {
      "name" : "with_upsert_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 817,
      "args" : [
      ],
      "insertTables" : [ "T3" ],
      "usesTables" : [ "T3" ],
      "table" : "T3",
      "statement" : "WITH data (id) AS ( VALUES (1), (2), (3) ) INSERT INTO T3(id) SELECT id FROM data WHERE 1 ON CONFLICT DO UPDATE SET id = 1 WHERE id = 9",
      "statementArgs" : [  ],
      "statementType" : "INSERT",
      "columns" : [ "id" ]
    },

    The statement ending at line XXXX

    PROC with_insert_proc (x INT!)
    BEGIN
    WITH
      data (id) AS (
        VALUES
          (1),
          (2),
          (x)
      )
    INSERT INTO T3(id)
      SELECT *
        FROM data;
    END

    {
      "name" : "with_insert_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 835,
      "args" : [
        {
          "name" : "x",
          "argOrigin" : "x",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "insertTables" : [ "T3" ],
      "usesTables" : [ "T3" ],
      "table" : "T3",
      "statement" : "WITH data (id) AS ( VALUES (1), (2), (?) ) INSERT INTO T3(id) SELECT id FROM data",
      "statementArgs" : [ "x" ],
      "statementType" : "INSERT",
      "columns" : [ "id" ]
    }
  ],
  "updates" : [

    The statement ending at line XXXX

    PROC update_proc (id_ INT!, name_ TEXT)
    BEGIN
    UPDATE foO
      SET name = name_
      WHERE id = id_
      ORDER BY name
        LIMIT 1;
    END

    {
      "name" : "update_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 502,
      "args" : [
        {
          "name" : "id_",
          "argOrigin" : "id_",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "name_",
          "argOrigin" : "name_",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "updateTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ],
      "table" : "Foo",
      "statement" : "UPDATE foO SET name = ? WHERE id = ? ORDER BY name LIMIT 1",
      "statementArgs" : [ "name_", "id_" ]
    },

    The statement ending at line XXXX

    PROC update_with_proc (id_ INT!, name_ TEXT)
    BEGIN
    WITH
      names (n) AS (
        VALUES
          ("this"),
          ("that")
      )
    UPDATE foO
      SET name = name_
      WHERE name IN (SELECT *
        FROM names);
    END

    {
      "name" : "update_with_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 512,
      "args" : [
        {
          "name" : "id_",
          "argOrigin" : "id_",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "name_",
          "argOrigin" : "name_",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "updateTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ],
      "table" : "Foo",
      "statement" : "WITH names (n) AS ( VALUES ('this'), ('that') ) UPDATE foO SET name = ? WHERE name IN (SELECT n FROM names)",
      "statementArgs" : [ "name_" ]
    }
  ],
  "deletes" : [

    The statement ending at line XXXX

    PROC delete_proc (name_ TEXT)
    BEGIN
    DELETE FROM foO WHERE name LIKE name_;
    END

    {
      "name" : "delete_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 486,
      "args" : [
        {
          "name" : "name_",
          "argOrigin" : "name_",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "deleteTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ],
      "table" : "Foo",
      "statement" : "DELETE FROM foO WHERE name LIKE ?",
      "statementArgs" : [ "name_" ]
    },

    The statement ending at line XXXX

    PROC delete_with_values (name_ TEXT)
    BEGIN
    WITH
      names (n) AS (
        VALUES
          ("this"),
          ("that")
      )
    DELETE FROM foO WHERE name IN (SELECT *
      FROM names);
    END

    {
      "name" : "delete_with_values",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 492,
      "args" : [
        {
          "name" : "name_",
          "argOrigin" : "name_",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "deleteTables" : [ "Foo" ],
      "usesTables" : [ "Foo" ],
      "table" : "Foo",
      "statement" : "WITH names (n) AS ( VALUES ('this'), ('that') ) DELETE FROM foO WHERE name IN (SELECT n FROM names)",
      "statementArgs" : [  ]
    }
  ],
  "general" : [

    The statement ending at line XXXX

    PROC with_complex_args (OUT pattern TEXT!, INOUT arg REAL)
    BEGIN
    SET pattern := "text";

    SELECT 1 AS a;
    END

    {
      "name" : "with_complex_args",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 371,
      "args" : [
        {
          "binding" : "out",
          "name" : "pattern",
          "argOrigin" : "pattern",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "binding" : "inout",
          "name" : "arg",
          "argOrigin" : "arg",
          "type" : "real",
          "isNotNull" : 0
        }
      ],
      "usesTables" : [  ],
      "projection" : [
        {
          "name" : "a",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "hasSelectResult" : 1,
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    PROC atypical_noreturn ()
    BEGIN
    CURSOR C LIKE SELECT 1 AS A;
    END

    {
      "name" : "atypical_noreturn",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 416,
      "args" : [
      ],
      "usesTables" : [  ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC typical_outresult ()
    BEGIN
    CURSOR C LIKE SELECT 1 AS A;

    FETCH C(A) FROM VALUES (7);

    OUT C;
    END

    {
      "name" : "typical_outresult",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 432,
      "args" : [
      ],
      "usesTables" : [  ],
      "projection" : [
        {
          "name" : "A",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "hasOutResult" : 1,
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC typical_out_union_result ()
    BEGIN
    CURSOR C LIKE SELECT 1 AS A;

    FETCH C(A) FROM VALUES (7);

    OUT UNION C;

    OUT UNION C;
    END

    {
      "name" : "typical_out_union_result",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 451,
      "args" : [
      ],
      "usesTables" : [  ],
      "projection" : [
        {
          "name" : "A",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "hasOutUnionResult" : 1,
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC typical_select ()
    BEGIN
    DECLARE x INT;

    SELECT *
      FROM T5;
    END

    {
      "name" : "typical_select",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 472,
      "args" : [
      ],
      "fromTables" : [ "T5" ],
      "usesTables" : [ "T5" ],
      "projection" : [
        {
          "name" : "r",
          "type" : "real",
          "isNotNull" : 0
        },
        {
          "name" : "bl",
          "type" : "blob",
          "isNotNull" : 0
        },
        {
          "name" : "b",
          "type" : "bool",
          "isNotNull" : 0
        },
        {
          "name" : "l",
          "type" : "long",
          "isNotNull" : 0
        }
      ],
      "hasSelectResult" : 1,
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    PROC proc_args_1 (arg1_x INT, arg1_y INT)
    BEGIN
    END

    {
      "name" : "proc_args_1",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 872,
      "args" : [
        {
          "name" : "arg1_x",
          "argOrigin" : "arg1 result_proc x",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "arg1_y",
          "argOrigin" : "arg1 result_proc y",
          "type" : "integer",
          "isNotNull" : 0
        }
      ],
      "usesTables" : [  ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC proc_args_2 (id_ INT, name_ TEXT)
    BEGIN
    END

    {
      "name" : "proc_args_2",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 879,
      "args" : [
        {
          "name" : "id_",
          "argOrigin" : "T1 id",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "name_",
          "argOrigin" : "T1 name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "usesTables" : [  ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC proc_args_3 (x_ INT!, y_ INT!)
    BEGIN
    END

    {
      "name" : "proc_args_3",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 888,
      "args" : [
        {
          "name" : "x_",
          "argOrigin" : "a_cursor x",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "y_",
          "argOrigin" : "a_cursor y",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "usesTables" : [  ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC proc_args_4 (id_ INT, name_ TEXT)
    BEGIN
    END

    {
      "name" : "proc_args_4",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 896,
      "args" : [
        {
          "name" : "id_",
          "argOrigin" : "T1 id",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "name_",
          "argOrigin" : "T1 name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "usesTables" : [  ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC proc_args_5 (arg1_x INT, arg1_y INT)
    BEGIN
    END

    {
      "name" : "proc_args_5",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 903,
      "args" : [
        {
          "name" : "arg1_x",
          "argOrigin" : "proc_args_1[arguments] arg1_x",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "arg1_y",
          "argOrigin" : "proc_args_1[arguments] arg1_y",
          "type" : "integer",
          "isNotNull" : 0
        }
      ],
      "usesTables" : [  ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC proc_args_6 (foo_ INT!, id_ INT, name_ TEXT)
    BEGIN
    END

    {
      "name" : "proc_args_6",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 911,
      "args" : [
        {
          "name" : "foo_",
          "argOrigin" : "my_view foo",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "id_",
          "argOrigin" : "my_view id",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "name_",
          "argOrigin" : "my_view name",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "usesTables" : [  ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC empty_proc ()
    BEGIN
    END

    {
      "name" : "empty_proc",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1114,
      "args" : [
      ],
      "usesTables" : [  ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC empty_blocks ()
    BEGIN
    IF 1 THEN
    END;

    IF 2 THEN
    ELSE
    END;

    IF 3 THEN
    ELSE IF 4 THEN
    ELSE
    END;

    WHILE 1
    BEGIN
    END;

    CURSOR c FOR
      SELECT 1 AS x;

    LOOP FETCH c
    BEGIN
    END;

    TRY
    CATCH
    END;
    END

    {
      "name" : "empty_blocks",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1127,
      "args" : [
      ],
      "usesTables" : [  ],
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    PROC proc_with_deps (OUT x INT!)
    BEGIN
    CALL other_Proc();

    SET x := proC_aS_Func();
    END

    {
      "name" : "proc_with_deps",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1163,
      "args" : [
        {
          "binding" : "out",
          "name" : "x",
          "argOrigin" : "x",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "usesProcedures" : [ "other_proc", "proc_as_func" ],
      "usesTables" : [  ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC using_kinds (list OBJECT<list>, s INT<seconds>)
    BEGIN
    SET s := s + 1;
    END

    {
      "name" : "using_kinds",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1354,
      "args" : [
        {
          "name" : "list",
          "argOrigin" : "list",
          "type" : "object",
          "kind" : "list",
          "isNotNull" : 0
        },
        {
          "name" : "s",
          "argOrigin" : "s",
          "type" : "integer",
          "kind" : "seconds",
          "isNotNull" : 0
        }
      ],
      "usesTables" : [  ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC shared_frag_user ()
    BEGIN
    WITH
      shared (id) AS (CALL shared_frag_proc() USING T1 AS source, T2 AS control)
    SELECT *
      FROM shared
    UNION ALL
    SELECT id
      FROM T6;
    END

    {
      "name" : "shared_frag_user",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1411,
      "args" : [
      ],
      "fromTables" : [ "Foo", "T1", "T2", "T6" ],
      "usesTables" : [ "Foo", "T1", "T2", "T6" ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 0
        }
      ],
      "hasSelectResult" : 1,
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    PROC shared_frag_user_nested_select ()
    BEGIN
    SELECT *
      FROM (CALL shared_frag_proc() USING T1 AS source, T2 AS control)
    UNION ALL
    SELECT id
      FROM T6;
    END

    {
      "name" : "shared_frag_user_nested_select",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1429,
      "args" : [
      ],
      "fromTables" : [ "Foo", "T1", "T2", "T6" ],
      "usesTables" : [ "Foo", "T1", "T2", "T6" ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "kind" : "ident",
          "isNotNull" : 0
        }
      ],
      "hasSelectResult" : 1,
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    @ATTRIBUTE(foo="bar")
    PROC string_literal_attr ()
    BEGIN
    END

    {
      "name" : "string_literal_attr",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1468,
      "args" : [
      ],
      "usesTables" : [  ],
      "attributes" : [
        {
          "name" : "foo",
          "value" : "bar"
        }
      ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    PROC insert_returning_cursor ()
    BEGIN
    CURSOR C FOR
      WITH
        goo (id, name) AS (
          SELECT *
            FROM Foo
        )
      INSERT INTO returning_tests(ix, iy)
        VALUES (1, 2)
        RETURNING (ix + iy AS xy, ix, iy);
    END

    {
      "name" : "insert_returning_cursor",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1955,
      "args" : [
      ],
      "insertTables" : [ "returning_tests" ],
      "fromTables" : [ "Foo" ],
      "usesTables" : [ "Foo", "returning_tests" ],
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    PROC delete_returning_cursor ()
    BEGIN
    CURSOR C FOR
      WITH
        goo (id, name) AS (
          SELECT *
            FROM Foo
        )
      DELETE FROM returning_tests
        RETURNING (ix + iy AS xy, ix, iy);
    END

    {
      "name" : "delete_returning_cursor",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1986,
      "args" : [
      ],
      "deleteTables" : [ "returning_tests" ],
      "fromTables" : [ "Foo" ],
      "usesTables" : [ "Foo", "returning_tests" ],
      "usesDatabase" : 1
    }
  ],
  "declareProcs" : [

    The statement ending at line XXXX

    [[builtin]]
    DECLARE PROC cql_throw (code INT!) USING TRANSACTION

    {
      "name" : "cql_throw",
      "args" : [
        {
          "name" : "code",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE PROC cql_cursor_to_blob (C CURSOR, OUT result BLOB!) USING TRANSACTION

    {
      "name" : "cql_cursor_to_blob",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "binding" : "out",
          "name" : "result",
          "type" : "blob",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE PROC cql_cursor_from_blob (C CURSOR, b BLOB) USING TRANSACTION

    {
      "name" : "cql_cursor_from_blob",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "b",
          "type" : "blob",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    DECLARE PROC result_proc (id INT, t TEXT) (x INT, y INT)

    {
      "name" : "result_proc",
      "args" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "t",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "projection" : [
        {
          "name" : "x",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "y",
          "type" : "integer",
          "isNotNull" : 0
        }
      ],
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    DECLARE PROC proc_as_func (OUT x INT!)

    {
      "name" : "proc_as_func",
      "args" : [
        {
          "binding" : "out",
          "name" : "x",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    DECLARE PROC other_proc ()

    {
      "name" : "other_proc",
      "args" : [
      ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    @ATTRIBUTE(foo=bar)
    DECLARE PROC decl_proc_take_all_type_proc (t BOOL, i INT, l LONG, r REAL, bl BLOB, str TEXT, obj OBJECT, t_nn BOOL!, i_nn INT!, l_nn LONG!, r_nn REAL!, bl_nn BLOB!, str_nn TEXT!, obj_nn OBJECT!) USING TRANSACTION

    {
      "name" : "decl_proc_take_all_type_proc",
      "args" : [
        {
          "name" : "t",
          "type" : "bool",
          "isNotNull" : 0
        },
        {
          "name" : "i",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "l",
          "type" : "long",
          "isNotNull" : 0
        },
        {
          "name" : "r",
          "type" : "real",
          "isNotNull" : 0
        },
        {
          "name" : "bl",
          "type" : "blob",
          "isNotNull" : 0
        },
        {
          "name" : "str",
          "type" : "text",
          "isNotNull" : 0
        },
        {
          "name" : "obj",
          "type" : "object",
          "isNotNull" : 0
        },
        {
          "name" : "t_nn",
          "type" : "bool",
          "isNotNull" : 1
        },
        {
          "name" : "i_nn",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "l_nn",
          "type" : "long",
          "isNotNull" : 1
        },
        {
          "name" : "r_nn",
          "type" : "real",
          "isNotNull" : 1
        },
        {
          "name" : "bl_nn",
          "type" : "blob",
          "isNotNull" : 1
        },
        {
          "name" : "str_nn",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "name" : "obj_nn",
          "type" : "object",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "foo",
          "value" : "bar"
        }
      ],
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    DECLARE PROC decl_proc_with_outarg (OUT t BOOL)

    {
      "name" : "decl_proc_with_outarg",
      "args" : [
        {
          "binding" : "out",
          "name" : "t",
          "type" : "bool",
          "isNotNull" : 0
        }
      ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    DECLARE PROC declared_proc (id INT) OUT (t TEXT)

    {
      "name" : "declared_proc",
      "args" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0
        }
      ],
      "projection" : [
        {
          "name" : "t",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "usesDatabase" : 0
    },

    The statement ending at line XXXX

    DECLARE PROC out_cursor_proc () OUT (A INT!, B INT!) USING TRANSACTION

    {
      "name" : "out_cursor_proc",
      "args" : [
      ],
      "projection" : [
        {
          "name" : "A",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "B",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "usesDatabase" : 1
    },

    The statement ending at line XXXX

    DECLARE PROC proc_with_like () (id INT, first TEXT!, middle TEXT, last TEXT!)

    {
      "name" : "proc_with_like",
      "args" : [
      ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "first",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "name" : "middle",
          "type" : "text",
          "isNotNull" : 0
        },
        {
          "name" : "last",
          "type" : "text",
          "isNotNull" : 1
        }
      ],
      "usesDatabase" : 1
    }
  ],
  "declareNoCheckProcs" : [

    The statement ending at line XXXX

    @ATTRIBUTE(garbonzo=1)
    DECLARE PROC printf NO CHECK

    {
      "name" : "printf",
      "attributes" : [
        {
          "name" : "garbonzo",
          "value" : 1
        }
      ]
    },

    The statement ending at line XXXX

    DECLARE PROC other_no_check_proc NO CHECK

    {
      "name" : "other_no_check_proc"
    }
  ],
  "declareFuncs" : [

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_partition_create () CREATE OBJECT<partitioning>!

    {
      "name" : "cql_partition_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "partitioning",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_partition_cursor (p OBJECT<partitioning>!, key CURSOR, value CURSOR) BOOL!

    {
      "name" : "cql_partition_cursor",
      "args" : [
        {
          "name" : "p",
          "type" : "object",
          "kind" : "partitioning",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "value",
          "type" : "",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_extract_partition (p OBJECT<partitioning>!, key CURSOR) CREATE OBJECT!

    {
      "name" : "cql_extract_partition",
      "args" : [
        {
          "name" : "p",
          "type" : "object",
          "kind" : "partitioning",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_string_dictionary_create () CREATE OBJECT<cql_string_dictionary>!

    {
      "name" : "cql_string_dictionary_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_string_dictionary",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_string_dictionary_add (dict OBJECT<cql_string_dictionary>!, key TEXT!, value TEXT!) BOOL!

    {
      "name" : "cql_string_dictionary_add",
      "args" : [
        {
          "name" : "dict",
          "type" : "object",
          "kind" : "cql_string_dictionary",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "name" : "value",
          "type" : "text",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_string_dictionary_find (dict OBJECT<cql_string_dictionary>!, key TEXT) TEXT

    {
      "name" : "cql_string_dictionary_find",
      "args" : [
        {
          "name" : "dict",
          "type" : "object",
          "kind" : "cql_string_dictionary",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_long_dictionary_create () CREATE OBJECT<cql_long_dictionary>!

    {
      "name" : "cql_long_dictionary_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_long_dictionary",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_long_dictionary_add (dict OBJECT<cql_long_dictionary>!, key TEXT!, value LONG!) BOOL!

    {
      "name" : "cql_long_dictionary_add",
      "args" : [
        {
          "name" : "dict",
          "type" : "object",
          "kind" : "cql_long_dictionary",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "name" : "value",
          "type" : "long",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_long_dictionary_find (dict OBJECT<cql_long_dictionary>!, key TEXT) LONG

    {
      "name" : "cql_long_dictionary_find",
      "args" : [
        {
          "name" : "dict",
          "type" : "object",
          "kind" : "cql_long_dictionary",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "long",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_real_dictionary_create () CREATE OBJECT<cql_real_dictionary>!

    {
      "name" : "cql_real_dictionary_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_real_dictionary",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_real_dictionary_add (dict OBJECT<cql_real_dictionary>!, key TEXT!, value REAL!) BOOL!

    {
      "name" : "cql_real_dictionary_add",
      "args" : [
        {
          "name" : "dict",
          "type" : "object",
          "kind" : "cql_real_dictionary",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "name" : "value",
          "type" : "real",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_real_dictionary_find (dict OBJECT<cql_real_dictionary>!, key TEXT) REAL

    {
      "name" : "cql_real_dictionary_find",
      "args" : [
        {
          "name" : "dict",
          "type" : "object",
          "kind" : "cql_real_dictionary",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "real",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_object_dictionary_create () CREATE OBJECT<cql_object_dictionary>!

    {
      "name" : "cql_object_dictionary_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_object_dictionary",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_object_dictionary_add (dict OBJECT<cql_object_dictionary>!, key TEXT!, value OBJECT!) BOOL!

    {
      "name" : "cql_object_dictionary_add",
      "args" : [
        {
          "name" : "dict",
          "type" : "object",
          "kind" : "cql_object_dictionary",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "name" : "value",
          "type" : "object",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_object_dictionary_find (dict OBJECT<cql_object_dictionary>!, key TEXT) OBJECT

    {
      "name" : "cql_object_dictionary_find",
      "args" : [
        {
          "name" : "dict",
          "type" : "object",
          "kind" : "cql_object_dictionary",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_blob_dictionary_create () CREATE OBJECT<cql_blob_dictionary>!

    {
      "name" : "cql_blob_dictionary_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_blob_dictionary",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_blob_dictionary_add (dict OBJECT<cql_blob_dictionary>!, key TEXT!, value BLOB!) BOOL!

    {
      "name" : "cql_blob_dictionary_add",
      "args" : [
        {
          "name" : "dict",
          "type" : "object",
          "kind" : "cql_blob_dictionary",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "name" : "value",
          "type" : "blob",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_blob_dictionary_find (dict OBJECT<cql_blob_dictionary>!, key TEXT) BLOB

    {
      "name" : "cql_blob_dictionary_find",
      "args" : [
        {
          "name" : "dict",
          "type" : "object",
          "kind" : "cql_blob_dictionary",
          "isNotNull" : 1
        },
        {
          "name" : "key",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "blob",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_format (C CURSOR) CREATE TEXT!

    {
      "name" : "cql_cursor_format",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_hash (C CURSOR) LONG!

    {
      "name" : "cql_cursor_hash",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "long",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursors_equal (l CURSOR, r CURSOR) BOOL!

    {
      "name" : "cql_cursors_equal",
      "args" : [
        {
          "name" : "l",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "r",
          "type" : "",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_diff_index (l CURSOR, r CURSOR) INT!

    {
      "name" : "cql_cursor_diff_index",
      "args" : [
        {
          "name" : "l",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "r",
          "type" : "",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_diff_col (l CURSOR, r CURSOR) CREATE TEXT

    {
      "name" : "cql_cursor_diff_col",
      "args" : [
        {
          "name" : "l",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "r",
          "type" : "",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 0
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_diff_val (l CURSOR, r CURSOR) CREATE TEXT

    {
      "name" : "cql_cursor_diff_val",
      "args" : [
        {
          "name" : "l",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "r",
          "type" : "",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 0
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_box_int (x INT) CREATE OBJECT<cql_box>!

    {
      "name" : "cql_box_int",
      "args" : [
        {
          "name" : "x",
          "type" : "integer",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_box",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_unbox_int (box OBJECT<cql_box>) INT

    {
      "name" : "cql_unbox_int",
      "args" : [
        {
          "name" : "box",
          "type" : "object",
          "kind" : "cql_box",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_box_real (x REAL) CREATE OBJECT<cql_box>!

    {
      "name" : "cql_box_real",
      "args" : [
        {
          "name" : "x",
          "type" : "real",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_box",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_unbox_real (box OBJECT<cql_box>) REAL

    {
      "name" : "cql_unbox_real",
      "args" : [
        {
          "name" : "box",
          "type" : "object",
          "kind" : "cql_box",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "real",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_box_bool (x BOOL) CREATE OBJECT<cql_box>!

    {
      "name" : "cql_box_bool",
      "args" : [
        {
          "name" : "x",
          "type" : "bool",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_box",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_unbox_bool (box OBJECT<cql_box>) BOOL

    {
      "name" : "cql_unbox_bool",
      "args" : [
        {
          "name" : "box",
          "type" : "object",
          "kind" : "cql_box",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_box_long (x LONG) CREATE OBJECT<cql_box>!

    {
      "name" : "cql_box_long",
      "args" : [
        {
          "name" : "x",
          "type" : "long",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_box",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_unbox_long (box OBJECT<cql_box>) LONG

    {
      "name" : "cql_unbox_long",
      "args" : [
        {
          "name" : "box",
          "type" : "object",
          "kind" : "cql_box",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "long",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_box_text (x TEXT) CREATE OBJECT<cql_box>!

    {
      "name" : "cql_box_text",
      "args" : [
        {
          "name" : "x",
          "type" : "text",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_box",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_unbox_text (box OBJECT<cql_box>) TEXT

    {
      "name" : "cql_unbox_text",
      "args" : [
        {
          "name" : "box",
          "type" : "object",
          "kind" : "cql_box",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_box_blob (x BLOB) CREATE OBJECT<cql_box>!

    {
      "name" : "cql_box_blob",
      "args" : [
        {
          "name" : "x",
          "type" : "blob",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_box",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_unbox_blob (box OBJECT<cql_box>) BLOB

    {
      "name" : "cql_unbox_blob",
      "args" : [
        {
          "name" : "box",
          "type" : "object",
          "kind" : "cql_box",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "blob",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_box_object (x OBJECT) CREATE OBJECT<cql_box>!

    {
      "name" : "cql_box_object",
      "args" : [
        {
          "name" : "x",
          "type" : "object",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_box",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_unbox_object (box OBJECT<cql_box>) OBJECT

    {
      "name" : "cql_unbox_object",
      "args" : [
        {
          "name" : "box",
          "type" : "object",
          "kind" : "cql_box",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_box_get_type (box OBJECT<cql_box>) INT!

    {
      "name" : "cql_box_get_type",
      "args" : [
        {
          "name" : "box",
          "type" : "object",
          "kind" : "cql_box",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_string_list_create () CREATE OBJECT<cql_string_list>!

    {
      "name" : "cql_string_list_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_string_list",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_string_list_set_at (list OBJECT<cql_string_list>!, index_ INT!, value_ TEXT!) OBJECT<cql_string_list>!

    {
      "name" : "cql_string_list_set_at",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_string_list",
          "isNotNull" : 1
        },
        {
          "name" : "index_",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "value_",
          "type" : "text",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_string_list",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_string_list_get_at (list OBJECT<cql_string_list>!, index_ INT!) TEXT

    {
      "name" : "cql_string_list_get_at",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_string_list",
          "isNotNull" : 1
        },
        {
          "name" : "index_",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_string_list_count (list OBJECT<cql_string_list>!) INT!

    {
      "name" : "cql_string_list_count",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_string_list",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_string_list_add (list OBJECT<cql_string_list>!, string TEXT!) OBJECT<cql_string_list>!

    {
      "name" : "cql_string_list_add",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_string_list",
          "isNotNull" : 1
        },
        {
          "name" : "string",
          "type" : "text",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_string_list",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_blob_list_create () CREATE OBJECT<cql_blob_list>!

    {
      "name" : "cql_blob_list_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_blob_list",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_blob_list_set_at (list OBJECT<cql_blob_list>!, index_ INT!, value_ BLOB!) OBJECT<cql_blob_list>!

    {
      "name" : "cql_blob_list_set_at",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_blob_list",
          "isNotNull" : 1
        },
        {
          "name" : "index_",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "value_",
          "type" : "blob",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_blob_list",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_blob_list_get_at (list OBJECT<cql_blob_list>!, index_ INT!) BLOB

    {
      "name" : "cql_blob_list_get_at",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_blob_list",
          "isNotNull" : 1
        },
        {
          "name" : "index_",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "blob",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_blob_list_count (list OBJECT<cql_blob_list>!) INT!

    {
      "name" : "cql_blob_list_count",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_blob_list",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_blob_list_add (list OBJECT<cql_blob_list>!, value BLOB!) OBJECT<cql_blob_list>!

    {
      "name" : "cql_blob_list_add",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_blob_list",
          "isNotNull" : 1
        },
        {
          "name" : "value",
          "type" : "blob",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_blob_list",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_object_list_create () CREATE OBJECT<cql_object_list>!

    {
      "name" : "cql_object_list_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_object_list",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_object_list_set_at (list OBJECT<cql_object_list>!, index_ INT!, value_ OBJECT!) OBJECT<cql_object_list>!

    {
      "name" : "cql_object_list_set_at",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_object_list",
          "isNotNull" : 1
        },
        {
          "name" : "index_",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "value_",
          "type" : "object",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_object_list",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_object_list_get_at (list OBJECT<cql_object_list>!, index_ INT!) OBJECT

    {
      "name" : "cql_object_list_get_at",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_object_list",
          "isNotNull" : 1
        },
        {
          "name" : "index_",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_object_list_count (list OBJECT<cql_object_list>!) INT!

    {
      "name" : "cql_object_list_count",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_object_list",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_object_list_add (list OBJECT<cql_object_list>!, value OBJECT!) OBJECT<cql_object_list>!

    {
      "name" : "cql_object_list_add",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_object_list",
          "isNotNull" : 1
        },
        {
          "name" : "value",
          "type" : "object",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_object_list",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_long_list_create () CREATE OBJECT<cql_long_list>!

    {
      "name" : "cql_long_list_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_long_list",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_long_list_set_at (list OBJECT<cql_long_list>!, index_ INT!, value_ LONG!) OBJECT<cql_long_list>!

    {
      "name" : "cql_long_list_set_at",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_long_list",
          "isNotNull" : 1
        },
        {
          "name" : "index_",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "value_",
          "type" : "long",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_long_list",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_long_list_get_at (list OBJECT<cql_long_list>!, index_ INT!) LONG!

    {
      "name" : "cql_long_list_get_at",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_long_list",
          "isNotNull" : 1
        },
        {
          "name" : "index_",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "long",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_long_list_count (list OBJECT<cql_long_list>!) INT!

    {
      "name" : "cql_long_list_count",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_long_list",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_long_list_add (list OBJECT<cql_long_list>!, value_ LONG!) OBJECT<cql_long_list>!

    {
      "name" : "cql_long_list_add",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_long_list",
          "isNotNull" : 1
        },
        {
          "name" : "value_",
          "type" : "long",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_long_list",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_real_list_create () CREATE OBJECT<cql_real_list>!

    {
      "name" : "cql_real_list_create",
      "args" : [
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_real_list",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_real_list_set_at (list OBJECT<cql_real_list>!, index_ INT!, value_ REAL!) OBJECT<cql_real_list>!

    {
      "name" : "cql_real_list_set_at",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_real_list",
          "isNotNull" : 1
        },
        {
          "name" : "index_",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "value_",
          "type" : "real",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_real_list",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_real_list_get_at (list OBJECT<cql_real_list>!, index_ INT!) REAL!

    {
      "name" : "cql_real_list_get_at",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_real_list",
          "isNotNull" : 1
        },
        {
          "name" : "index_",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "real",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_real_list_count (list OBJECT<cql_real_list>!) INT!

    {
      "name" : "cql_real_list_count",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_real_list",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_real_list_add (list OBJECT<cql_real_list>!, value_ REAL!) OBJECT<cql_real_list>!

    {
      "name" : "cql_real_list_add",
      "args" : [
        {
          "name" : "list",
          "type" : "object",
          "kind" : "cql_real_list",
          "isNotNull" : 1
        },
        {
          "name" : "value_",
          "type" : "real",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "kind" : "cql_real_list",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_column_count (C CURSOR) INT!

    {
      "name" : "cql_cursor_column_count",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_column_type (C CURSOR, icol INT!) INT!

    {
      "name" : "cql_cursor_column_type",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "icol",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_column_name (C CURSOR, icol INT!) CREATE TEXT

    {
      "name" : "cql_cursor_column_name",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "icol",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 0
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_get_bool (C CURSOR, icol INT!) BOOL

    {
      "name" : "cql_cursor_get_bool",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "icol",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_get_int (C CURSOR, icol INT!) INT

    {
      "name" : "cql_cursor_get_int",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "icol",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_get_long (C CURSOR, icol INT!) LONG

    {
      "name" : "cql_cursor_get_long",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "icol",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "long",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_get_real (C CURSOR, icol INT!) REAL

    {
      "name" : "cql_cursor_get_real",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "icol",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "real",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_get_text (C CURSOR, icol INT!) TEXT

    {
      "name" : "cql_cursor_get_text",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "icol",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_get_blob (C CURSOR, icol INT!) BLOB

    {
      "name" : "cql_cursor_get_blob",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "icol",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "blob",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_get_object (C CURSOR, icol INT!) OBJECT

    {
      "name" : "cql_cursor_get_object",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "icol",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "object",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_cursor_format_column (C CURSOR, icol INT!) CREATE TEXT!

    {
      "name" : "cql_cursor_format_column",
      "args" : [
        {
          "name" : "C",
          "type" : "",
          "isNotNull" : 0
        },
        {
          "name" : "icol",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_blob_from_int (prefix TEXT, val INT!) CREATE BLOB!

    {
      "name" : "cql_blob_from_int",
      "args" : [
        {
          "name" : "prefix",
          "type" : "text",
          "isNotNull" : 0
        },
        {
          "name" : "val",
          "type" : "integer",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "blob",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_format_bool (val BOOL @SENSITIVE) CREATE TEXT!

    {
      "name" : "cql_format_bool",
      "args" : [
        {
          "name" : "val",
          "type" : "bool",
          "isSensitive" : 1,
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_format_int (val INT @SENSITIVE) CREATE TEXT!

    {
      "name" : "cql_format_int",
      "args" : [
        {
          "name" : "val",
          "type" : "integer",
          "isSensitive" : 1,
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_format_long (val LONG @SENSITIVE) CREATE TEXT!

    {
      "name" : "cql_format_long",
      "args" : [
        {
          "name" : "val",
          "type" : "long",
          "isSensitive" : 1,
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_format_double (val REAL @SENSITIVE) CREATE TEXT!

    {
      "name" : "cql_format_double",
      "args" : [
        {
          "name" : "val",
          "type" : "real",
          "isSensitive" : 1,
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_format_string (val TEXT @SENSITIVE) CREATE TEXT!

    {
      "name" : "cql_format_string",
      "args" : [
        {
          "name" : "val",
          "type" : "text",
          "isSensitive" : 1,
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_format_blob (val BLOB @SENSITIVE) CREATE TEXT!

    {
      "name" : "cql_format_blob",
      "args" : [
        {
          "name" : "val",
          "type" : "blob",
          "isSensitive" : 1,
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_format_object (val OBJECT @SENSITIVE) CREATE TEXT!

    {
      "name" : "cql_format_object",
      "args" : [
        {
          "name" : "val",
          "type" : "object",
          "isSensitive" : 1,
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    [[builtin]]
    DECLARE FUNC cql_format_null (ignored BOOL @SENSITIVE) CREATE TEXT!

    {
      "name" : "cql_format_null",
      "args" : [
        {
          "name" : "ignored",
          "type" : "bool",
          "isSensitive" : 1,
          "isNotNull" : 0
        }
      ],
      "attributes" : [
        {
          "name" : "cql:builtin",
          "value" : 1
        }
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    @ATTRIBUTE(foo=bar)
    DECLARE FUNC decl_func_take_all_types_func (t BOOL, i INT, l LONG, r REAL, bl BLOB, str TEXT, obj OBJECT, t_nn BOOL!, i_nn INT!, l_nn LONG!, r_nn REAL!, bl_nn BLOB!, str_nn TEXT!, obj_nn OBJECT!) BOOL

    {
      "name" : "decl_func_take_all_types_func",
      "args" : [
        {
          "name" : "t",
          "type" : "bool",
          "isNotNull" : 0
        },
        {
          "name" : "i",
          "type" : "integer",
          "isNotNull" : 0
        },
        {
          "name" : "l",
          "type" : "long",
          "isNotNull" : 0
        },
        {
          "name" : "r",
          "type" : "real",
          "isNotNull" : 0
        },
        {
          "name" : "bl",
          "type" : "blob",
          "isNotNull" : 0
        },
        {
          "name" : "str",
          "type" : "text",
          "isNotNull" : 0
        },
        {
          "name" : "obj",
          "type" : "object",
          "isNotNull" : 0
        },
        {
          "name" : "t_nn",
          "type" : "bool",
          "isNotNull" : 1
        },
        {
          "name" : "i_nn",
          "type" : "integer",
          "isNotNull" : 1
        },
        {
          "name" : "l_nn",
          "type" : "long",
          "isNotNull" : 1
        },
        {
          "name" : "r_nn",
          "type" : "real",
          "isNotNull" : 1
        },
        {
          "name" : "bl_nn",
          "type" : "blob",
          "isNotNull" : 1
        },
        {
          "name" : "str_nn",
          "type" : "text",
          "isNotNull" : 1
        },
        {
          "name" : "obj_nn",
          "type" : "object",
          "isNotNull" : 1
        }
      ],
      "attributes" : [
        {
          "name" : "foo",
          "value" : "bar"
        }
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    DECLARE FUNC func_return_bool () BOOL

    {
      "name" : "func_return_bool",
      "args" : [
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    DECLARE FUNC func_return_integer () INT

    {
      "name" : "func_return_integer",
      "args" : [
      ],
      "returnType" : {
        "type" : "integer",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    DECLARE FUNC func_return_long () LONG

    {
      "name" : "func_return_long",
      "args" : [
      ],
      "returnType" : {
        "type" : "long",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    DECLARE FUNC func_return_real () REAL

    {
      "name" : "func_return_real",
      "args" : [
      ],
      "returnType" : {
        "type" : "real",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    DECLARE FUNC func_return_blob () BLOB

    {
      "name" : "func_return_blob",
      "args" : [
      ],
      "returnType" : {
        "type" : "blob",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    DECLARE FUNC func_return_text () TEXT

    {
      "name" : "func_return_text",
      "args" : [
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    DECLARE FUNC func_return_object () OBJECT

    {
      "name" : "func_return_object",
      "args" : [
      ],
      "returnType" : {
        "type" : "object",
        "isNotNull" : 0
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    DECLARE FUNC func_return_bool_notnull () BOOL!

    {
      "name" : "func_return_bool_notnull",
      "args" : [
      ],
      "returnType" : {
        "type" : "bool",
        "isNotNull" : 1
      },
      "createsObject" : 0
    },

    The statement ending at line XXXX

    DECLARE FUNC func_create_blob () CREATE BLOB

    {
      "name" : "func_create_blob",
      "args" : [
      ],
      "returnType" : {
        "type" : "blob",
        "isNotNull" : 0
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    DECLARE FUNC func_create_text () CREATE TEXT

    {
      "name" : "func_create_text",
      "args" : [
      ],
      "returnType" : {
        "type" : "text",
        "isNotNull" : 0
      },
      "createsObject" : 1
    },

    The statement ending at line XXXX

    DECLARE FUNC func_create_object () CREATE OBJECT

    {
      "name" : "func_create_object",
      "args" : [
      ],
      "returnType" : {
        "type" : "object",
        "isNotNull" : 0
      },
      "createsObject" : 1
    }
  ],
  "declareNoCheckFuncs" : [

    The statement ending at line XXXX

    DECLARE FUNC NoCheckFunc NO CHECK TEXT!

    {
      "name" : "NoCheckFunc",
      "returnType" : {
        "type" : "text",
        "isNotNull" : 1
      },
      "createsObject" : 0
    }
  ],
  "declareSelectFuncs" : [

    The statement ending at line XXXX

    DECLARE SELECT FUNC tvf (id INT) (foo TEXT)

    {
      "name" : "tvf",
      "args" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0
        }
      ],
      "projection" : [
        {
          "name" : "foo",
          "type" : "text",
          "isNotNull" : 0
        }
      ]
    }
  ],
  "declareNoCheckSelectFuncs" : [

    The statement ending at line XXXX

    DECLARE SELECT FUNC NoCheckSelectFunc NO CHECK REAL

    {
      "name" : "NoCheckSelectFunc",
      "returnType" : {
        "type" : "real",
        "isNotNull" : 0
      }
    }
  ],
  "interfaces" : [

    The statement ending at line XXXX

    DECLARE INTERFACE interface1 (id INT)

    {
      "name" : "interface1",
      "definedInFile" : "cg_test_json_schema.sql",
      "definedOnLine" : 1558,
      "attributes" : [
        {
          "name" : "cql:java_package",
          "value" : "test"
        }
      ],
      "projection" : [
        {
          "name" : "id",
          "type" : "integer",
          "isNotNull" : 0
        }
      ]
    }
  ],
  "regions" : [

    The statement ending at line XXXX

    @DECLARE_SCHEMA_REGION region0

    {
    "name" : "region0",
    "isDeployableRoot" : 0,
    "deployedInRegion" : "region2",
    "using" : [  ],
    "usingPrivately" : [  ]
    }
    The statement ending at line XXXX

    @DECLARE_SCHEMA_REGION orphan_region

    ,
    {
    "name" : "orphan_region",
    "isDeployableRoot" : 0,
    "deployedInRegion" : "(orphan)",
    "using" : [  ],
    "usingPrivately" : [  ]
    }
    The statement ending at line XXXX

    @DECLARE_SCHEMA_REGION region1 USING region0 PRIVATE

    ,
    {
    "name" : "region1",
    "isDeployableRoot" : 0,
    "deployedInRegion" : "region2",
    "using" : [ "region0" ],
    "usingPrivately" : [ 1 ]
    }
    The statement ending at line XXXX

    @DECLARE_DEPLOYABLE_REGION region2 USING region1, region0

    ,
    {
    "name" : "region2",
    "isDeployableRoot" : 1,
    "deployedInRegion" : "region2",
    "using" : [ "region1", "region0" ],
    "usingPrivately" : [ 0, 0 ]
    }
  ],
  "adHocMigrationProcs" : [

    The statement ending at line XXXX

    @SCHEMA_AD_HOC_MIGRATION(1, ad_hoc_migration_proc_1)

    {
      "name" : "ad_hoc_migration_proc_1",
      "CRC" : "2961780581540367911",
      "version" : 1
    }
    The statement ending at line XXXX

    @SCHEMA_AD_HOC_MIGRATION(2, ad_hoc_migration_proc_2)

    ,
    {
      "name" : "ad_hoc_migration_proc_2",
      "CRC" : "4180308921907099499",
      "version" : 2
    }
    The statement ending at line XXXX

    @ATTRIBUTE(my_attribute=('any', ('tree', 'of'), 'values'))
    @ATTRIBUTE(my_single_attribute='other_value')
    @SCHEMA_AD_HOC_MIGRATION(3, ad_hoc_migration_proc_3)

    ,
    {
      "name" : "ad_hoc_migration_proc_3",
      "CRC" : "3815791288465678255",
      "attributes" : [
        {
          "name" : "my_attribute",
          "value" : ["any", ["tree", "of"], "values"]
        },
        {
          "name" : "my_single_attribute",
          "value" : "other_value"
        }
      ],
      "version" : 3
    }
    The statement ending at line XXXX

    @ATTRIBUTE(test_attribute=hello)
    @SCHEMA_AD_HOC_MIGRATION FOR @RECREATE(a_recreate_group, a_migration_proc)

    ,
    {
      "name" : "a_migration_proc",
      "CRC" : "8272789293224661607",
      "attributes" : [
        {
          "name" : "test_attribute",
          "value" : "hello"
        }
      ],
      "onRecreateOf" : "a_recreate_group"
    }
  ],
  "enums" : [

    The statement ending at line XXXX

    DECLARE ENUM some_reals REAL (
      one = 1.0,
      e = 2.718,
      pi = 3.14
    )

    {
      "name" : "some_reals",
      "type" : "real",
      "isNotNull" : 1,
      "values" : [
        {
          "name" : "one",
          "value" : 1.000000e+00
        },
        {
          "name" : "e",
          "value" : 2.718000e+00
        },
        {
          "name" : "pi",
          "value" : 3.140000e+00
        }
      ]
    }
    The statement ending at line XXXX

    DECLARE ENUM some_longs LONG (
      neg = -1000,
      pos = 0x100010001000L
    )

    ,
    {
      "name" : "some_longs",
      "type" : "long",
      "isNotNull" : 1,
      "values" : [
        {
          "name" : "neg",
          "value" : -1000
        },
        {
          "name" : "pos",
          "value" : 17592454483968
        }
      ]
    }
  ],
  "constantGroups" : [

    The statement ending at line XXXX

    DECLARE CONST GROUP const_group (
      global_numeric = 1 + 3,
      global_string = "\tx\ny",
      global_enum_alias = 1.000000e+00
    )

    {
      "name" : "const_group",
      "values" : [
        {
          "name" : "global_numeric",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 4
        },
        {
          "name" : "global_string",
          "type" : "text",
          "isNotNull" : 1,
          "value" : "\tx\ny"
        },
        {
          "name" : "global_enum_alias",
          "type" : "real",
          "kind" : "some_reals",
          "isNotNull" : 1,
          "value" : 1.000000e+00
        }
      ]
    }
    The statement ending at line XXXX

    DECLARE CONST GROUP cql_data_types (
      CQL_DATA_TYPE_NULL = 0,
      CQL_DATA_TYPE_INT32 = 1,
      CQL_DATA_TYPE_INT64 = 2,
      CQL_DATA_TYPE_DOUBLE = 3,
      CQL_DATA_TYPE_BOOL = 4,
      CQL_DATA_TYPE_STRING = 5,
      CQL_DATA_TYPE_BLOB = 6,
      CQL_DATA_TYPE_OBJECT = 7,
      CQL_DATA_TYPE_CORE = 0x3f,
      CQL_DATA_TYPE_ENCODED = 0x40,
      CQL_DATA_TYPE_NOT_NULL = 0x80
    )

    ,
    {
      "name" : "cql_data_types",
      "values" : [
        {
          "name" : "CQL_DATA_TYPE_NULL",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 0
        },
        {
          "name" : "CQL_DATA_TYPE_INT32",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 1
        },
        {
          "name" : "CQL_DATA_TYPE_INT64",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 2
        },
        {
          "name" : "CQL_DATA_TYPE_DOUBLE",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 3
        },
        {
          "name" : "CQL_DATA_TYPE_BOOL",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 4
        },
        {
          "name" : "CQL_DATA_TYPE_STRING",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 5
        },
        {
          "name" : "CQL_DATA_TYPE_BLOB",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 6
        },
        {
          "name" : "CQL_DATA_TYPE_OBJECT",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 7
        },
        {
          "name" : "CQL_DATA_TYPE_CORE",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 63
        },
        {
          "name" : "CQL_DATA_TYPE_ENCODED",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 64
        },
        {
          "name" : "CQL_DATA_TYPE_NOT_NULL",
          "type" : "integer",
          "isNotNull" : 1,
          "value" : 128
        }
      ]
    }
  ],
  "subscriptions" : [

    The statement ending at line XXXX

    @UNSUB(t_for_unsub)

    {
      "type" : "unsub",
      "table" : "t_for_unsub",
      "region" : "region0",
      "deployedInRegion" : "region2",
      "version" : 1
    }
  ],
  "tableUsers" : {
    "Foo" : [ "a_query", "bigger_query", "insert_proc", "delete_proc", "delete_with_values", "update_proc", "update_with_proc", "dummy_insert_proc", "joiner", "use_view", "null_attribute", "shared_frag_user", "shared_frag_user_nested_select", "insert_returning_cursor", "delete_returning_cursor" ],
    "T1" : [ "shared_frag_user", "shared_frag_user_nested_select" ],
    "T2" : [ "shared_frag_user", "shared_frag_user_nested_select", "shared_frag_user_function_style" ],
    "T3" : [ "insert_with_select", "insert_compound", "insert_multi_value", "upsert_proc", "with_upsert_proc", "with_insert_proc" ],
    "T5" : [ "typical_select", "joiner" ],
    "T6" : [ "shared_frag_user", "shared_frag_user_nested_select" ],
    "X_abcX20def" : [ "generate_quoted_items" ],
    "radioactive" : [ "radioactive_proc" ],
    "returning_tests" : [ "insert_returning_cursor", "insert_returning_stmt", "delete_returning_cursor", "delete_returning_stmt" ]
  }
}
