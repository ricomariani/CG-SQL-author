#!/bin/bash

set -o errexit -o nounset -o pipefail

readonly CLI_NAME=${0##*/}
readonly SCRIPT_DIR_RELATIVE=$(dirname "$0")
readonly OUT=$SCRIPT_DIR_RELATIVE/out

mkdir -p $OUT
debug() { echo $@ >&2; }

# if guide type is all, then build all guides
if [ "$1" == "all" ]; then
    $SCRIPT_DIR_RELATIVE/make_guide.sh "user_guide" "CQL User's Guide" $SCRIPT_DIR_RELATIVE/../docs/user_guide/*.md $SCRIPT_DIR_RELATIVE/../docs/user_guide/**/*.md
    $SCRIPT_DIR_RELATIVE/make_guide.sh "developer_guide" "CQL Developer's Guide" $SCRIPT_DIR_RELATIVE/../docs/developer_guide/*.md
    exit 0
fi

guide_type=$1
guide_name=$2

debug "Building $guide_type"


# Clean up previous build outputs

mkdir -p "$OUT"
rm -f "$OUT/$guide_type.*"


# Build Intermediate Markdown output

shift 2
sources=$@
target="$OUT/$guide_type.md"

echo "<!--- @generated by $CLI_NAME -->\n" > $target
for source in $sources; do
    if grep -q "<!-- I_AM_A_STUB -->" "$source"; then
        echo "ERROR: $source is a stub, please replace it before building" >&2
        exit 1
    fi

    cat "$source" >> "$target"
    echo -e "\n\n" >> "$target"
done

debug "$target was successfully created" >&2


# Build Final HTML output

source="$OUT/$guide_type.md"
target="$OUT/$guide_type.html"

pandoc $source \
    --metadata title="$guide_name" \
    --toc \
    --standalone \
    --wrap=none \
    --from markdown \
    --to html \
    --output $target

# change margins to be more reader friendly
sed -e "s/max-width: 36em;/max-width: 70em;/" <$target >$target.tmp
mv $target.tmp $target

debug "$target was successfully created"
