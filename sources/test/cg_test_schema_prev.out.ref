
[[deterministic]]
DECLARE SELECT FUNC my_func (x TEXT) TEXT;

DECLARE SELECT FUNC filter_ (id INT) INT!;

@DECLARE_SCHEMA_REGION shared;

@DECLARE_SCHEMA_REGION extra USING shared;

@DECLARE_SCHEMA_REGION other;

@begin_schema_region shared;
CREATE TABLE `quoted foo`(
  `an id` INT PRIMARY KEY,
  rate LONG @DELETE(5),
  `rate 2` LONG @DELETE(4, DeleteRate2Proc),
  `id 2` INT DEFAULT 12345 @CREATE(4, CreateId2Proc),
  name TEXT @CREATE(5),
  name_2 TEXT @CREATE(6)
);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE added_table(
  `an id` INT!,
  name1 TEXT,
  name2 TEXT @CREATE(4)
) @CREATE(3) @DELETE(5);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE g1(
  `an id` INT PRIMARY KEY,
  name TEXT
) @RECREATE(gr1);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE `use g1`(
  `an id` INT PRIMARY KEY REFERENCES g1 (`an id`),
  name2 TEXT
) @RECREATE(gr1);
@end_schema_region;

@begin_schema_region extra;
CREATE TABLE table2(
  `an id` INT! REFERENCES `quoted foo` (`an id`),
  name1 TEXT @CREATE(2, CreateName1Proc),
  name2 TEXT @CREATE(2, CreateName2Proc),
  name3 TEXT @CREATE(2),
  name4 TEXT @CREATE(2)
);
@end_schema_region;

@begin_schema_region other;
CREATE TABLE other_table(
  `an id` INT
);
@end_schema_region;

CREATE TABLE table_to_recreate(
  `an id` INT!,
  name TEXT
) @RECREATE;

CREATE TABLE grouped_table_1(
  `an id` INT!,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE grouped_table_2(
  `an id` INT!,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE grouped_table_3(
  `an id` INT!,
  name TEXT
) @RECREATE(my_group);

CREATE TABLE t5(
  `an id` LONG PRIMARY KEY AUTOINCREMENT,
  data TEXT
);

CREATE TABLE t6(
  `an id` LONG PRIMARY KEY,
  FOREIGN KEY (`an id`) REFERENCES t5 (`an id`) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE VIRTUAL TABLE a_virtual_table USING a_module (this, that, the_other) AS (
  `an id` INT @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE @EPONYMOUS epon USING epon AS (
  `an id` INT @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE complex_virtual_table USING a_module (ARGUMENTS FOLLOWING) AS (
  `an id` INT @SENSITIVE,
  t TEXT
);

CREATE VIRTUAL TABLE deleted_virtual_table USING a_module (ARGUMENTS FOLLOWING) AS (
  `an id` INT @SENSITIVE,
  t TEXT
) @DELETE(4, cql:module_must_not_be_deleted_see_docs_for_CQL0392);

CREATE TABLE `migrated from recreate`(
  `an id` INT PRIMARY KEY,
  t TEXT
) @CREATE(4, cql:from_recreate);

CREATE TABLE migrated_from_recreate2(
  `an id` INT PRIMARY KEY REFERENCES `migrated from recreate` (`an id`),
  t TEXT
) @CREATE(4, cql:from_recreate);

CREATE TABLE conflict_clause_t(
  `an id` INT! ON CONFLICT FAIL
);

CREATE TABLE conflict_clause_pk(
  `an id` INT!,
  CONSTRAINT `pk 1` PRIMARY KEY (`an id`) ON CONFLICT ROLLBACK
);

CREATE TABLE expression_pk(
  `an id` INT!,
  CONSTRAINT `pk 1` PRIMARY KEY (`an id` / 2, `an id` % 2)
);

CREATE TABLE expression_uk(
  `an id` INT!,
  CONSTRAINT uk1 UNIQUE (`an id` / 2, `an id` % 2)
);

CREATE TABLE delete__second(
  `an id` INT PRIMARY KEY
) @DELETE(7);

CREATE TABLE delete_first(
  `an id` INT REFERENCES delete__second (`an id`)
) @DELETE(7);

CREATE TABLE `create first`(
  `an id` INT PRIMARY KEY
) @CREATE(7);

CREATE TABLE create_second(
  `an id` INT REFERENCES `create first` (`an id`)
) @CREATE(7);

[[blob_storage]]
CREATE TABLE blob_storage_at_create_table(
  x INT,
  y TEXT
) @CREATE(5);

[[blob_storage]]
CREATE TABLE blob_storage_baseline_table(
  x INT,
  y TEXT
);

CREATE TABLE unsub_recreated(
  anything TEXT
) @RECREATE;

[[backing_table]]
CREATE TABLE backing(
  k BLOB PRIMARY KEY,
  v BLOB!
);

[[backed_by=backing]]
CREATE TABLE backed(
  x INT PRIMARY KEY,
  y INT
);

[[backing_table]]
CREATE TABLE recreate_backing(
  k BLOB PRIMARY KEY,
  v BLOB!
) @RECREATE(foo);

[[backed_by=recreate_backing]]
CREATE TABLE recreate_backed(
  x INT PRIMARY KEY,
  y INT
) @RECREATE(foo);

CREATE TABLE after_backed_table(
  x INT PRIMARY KEY
) @RECREATE(foo);

@begin_schema_region other;
CREATE TABLE unsub_voyage(
  v1 INT,
  v3 TEXT @CREATE(3),
  v5 TEXT @CREATE(5),
  v7 TEXT @CREATE(7)
);
@end_schema_region;

@begin_schema_region other;
CREATE TABLE unsub_inner(
  `an id` INT PRIMARY KEY,
  name_inner TEXT
);
@end_schema_region;

@begin_schema_region other;
CREATE TABLE unsub_outer(
  `an id` INT PRIMARY KEY REFERENCES unsub_inner (`an id`),
  name_outer TEXT
);
@end_schema_region;

@begin_schema_region other;
CREATE TABLE some_table(
  `an id` INT
);
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW shared_view AS
  SELECT
      `quoted foo`.`an id`,
      `quoted foo`.`id 2`,
      `quoted foo`.name,
      `quoted foo`.name_2
    FROM `quoted foo`;
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW live_view AS
  SELECT
      `quoted foo`.`an id`,
      `quoted foo`.`id 2`,
      `quoted foo`.name,
      `quoted foo`.name_2
    FROM `quoted foo`;
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW dead_view AS
  SELECT
      `quoted foo`.`an id`,
      `quoted foo`.`id 2`,
      `quoted foo`.name,
      `quoted foo`.name_2
    FROM `quoted foo` @DELETE(2, DeadViewMigration);
@end_schema_region;

@begin_schema_region extra;
CREATE VIEW another_live_view AS
  SELECT
      table2.`an id`,
      table2.name1,
      table2.name2,
      table2.name3,
      table2.name4
    FROM table2;
@end_schema_region;

@begin_schema_region other;
CREATE VIEW `foo view unsubscribed` AS
  SELECT some_table.`an id`
    FROM some_table;
@end_schema_region;

@begin_schema_region other;
CREATE VIEW `foo view normal` AS
  SELECT some_table.`an id`
    FROM some_table;
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX shared_index ON `quoted foo` (name, name_2);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index ON g1 (name);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index2 ON g1 (name, `an id`);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index3 ON g1 (my_func(name), `an id`) @DELETE(5);
@end_schema_region;

@begin_schema_region extra;
CREATE INDEX not_shared_present_index ON table2 (name1, name2);
@end_schema_region;

@begin_schema_region extra;
CREATE INDEX index_going_away ON table2 (name3) @DELETE(3);
@end_schema_region;

CREATE INDEX recreate_index_needs_deleting ON `migrated from recreate` (t);

CREATE INDEX recreate_index_needs_deleting2 ON `migrated from recreate` (t);

CREATE INDEX recreate_index_needs_deleting3 ON migrated_from_recreate2 (t);

CREATE INDEX unsub_recreated_index ON unsub_recreated (anything);

@begin_schema_region other;
CREATE INDEX unsub_voyage_index ON unsub_voyage (v1);
@end_schema_region;

@begin_schema_region other;
CREATE INDEX us1 ON unsub_inner (name_inner);
@end_schema_region;

@begin_schema_region other;
CREATE INDEX us2 ON unsub_outer (name_outer);
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER shared_trigger
  BEFORE INSERT ON `quoted foo`
BEGIN
SELECT 1;
END;
@end_schema_region;

@begin_schema_region extra;
CREATE TRIGGER not_shared_trigger
  BEFORE INSERT ON `quoted foo`
BEGIN
SELECT new.`an id`;
END;
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER insert_trigger
  BEFORE INSERT ON `quoted foo`
  FOR EACH ROW
  WHEN new.`an id` > 7
BEGIN
SELECT new.`an id`;
END;
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER old_trigger_was_deleted
  BEFORE INSERT ON `quoted foo`
BEGIN
SELECT new.`an id`;
END @DELETE(3);
@end_schema_region;

CREATE TRIGGER trig_with_filter
  BEFORE INSERT ON `quoted foo`
  WHEN filter_(new.`an id`) = 3
BEGIN
DELETE FROM `quoted foo` WHERE `an id` = 77;
END;

CREATE TRIGGER unsub_recreated_trigger
  BEFORE INSERT ON unsub_recreated
BEGIN
SELECT 1;
END;

@begin_schema_region other;
CREATE TRIGGER unsub_voyage_trigger
  BEFORE INSERT ON unsub_voyage
BEGIN
SELECT 1;
END;
@end_schema_region;

@begin_schema_region shared;
@SCHEMA_AD_HOC_MIGRATION(5, MyAdHocMigrationScript);
@end_schema_region;

@UNSUB(unsub_recreated);

@begin_schema_region other;
@UNSUB(unsub_voyage);
@end_schema_region;

@begin_schema_region other;
@UNSUB(unsub_outer);
@end_schema_region;

@begin_schema_region other;
@UNSUB(unsub_inner);
@end_schema_region;

@begin_schema_region other;
@UNSUB(`foo view unsubscribed`);
@end_schema_region;

