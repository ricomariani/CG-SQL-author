@MACRO(EXPR) foo!(x! EXPR, z! EXPR)
BEGIN
  x! + z!
END;

@MACRO(STMT_LIST) bar!(x! EXPR, y! STMT_LIST)
BEGIN
  IF x! THEN
    y!;
  END;
END;

DECLARE x_int INT!;

PROC foo ()
BEGIN
  IF 1 THEN
    CALL printf("hi\n");
  END;
END;

CREATE TABLE xx(
  x INT!
);

CREATE TABLE yy(
  y INT!
);

@MACRO(QUERY_PARTS) qp!()
BEGIN
  xx AS T1
  INNER JOIN yy AS T2 ON T1.x = T2.y
END;

@MACRO(STMT_LIST) sel!(e! EXPR, q! QUERY_PARTS)
BEGIN
  SELECT e!
    FROM q! AS Q;
END;

SELECT *
  FROM (
      xx AS T1
      INNER JOIN yy AS T2 ON T1.x = T2.y)
    INNER JOIN yy;

SELECT *
  FROM (
      xx AS T1
      INNER JOIN yy AS T2 ON T1.x = T2.y) AS T1;

SELECT x
  FROM (
      xx AS T1
      INNER JOIN yy AS T2 ON T1.x = T2.y) AS Q;

SELECT *
  FROM (
      xx AS T1
      INNER JOIN yy AS T2 ON T1.x = T2.y) AS T1;

@MACRO(CTE_TABLES) cte!()
BEGIN
  foo AS (
    SELECT 1 AS x, 2 AS y
  ),
  bar AS (
    SELECT 3 AS u, 4 AS v
  )
END;

WITH
  vv AS (
    SELECT 1 AS x, 2 AS y
  ),
  foo AS (
    SELECT 1 AS x, 2 AS y
  ),
  bar AS (
    SELECT 3 AS u, 4 AS v
  ),
  uu AS (
    SELECT 1 AS x, 2 AS y
  )
SELECT *
  FROM foo;

WITH
  foo AS (
    SELECT 1 AS x, 2 AS y
  ),
  bar AS (
    SELECT 3 AS u, 4 AS v
  ),
  uu AS (
    SELECT 1 AS x, 2 AS y
  )
SELECT *
  FROM foo;

WITH
  foo AS (
    SELECT 1 AS x, 2 AS y
  ),
  bar AS (
    SELECT 3 AS u, 4 AS v
  )
SELECT *
  FROM foo;

WITH
  vv AS (
    SELECT 1 AS x, 2 AS y
  ),
  foo AS (
    SELECT 1 AS x, 2 AS y
  ),
  bar AS (
    SELECT 3 AS u, 4 AS v
  )
SELECT *
  FROM foo;

@MACRO(STMT_LIST) query!(u! CTE_TABLES)
BEGIN
  WITH
    u!
  SELECT *
    FROM foo;
END;

WITH
  foo AS (
    SELECT 100 AS x, 200 AS y
  )
SELECT *
  FROM foo;

@MACRO(SELECT_CORE) selcor!(x! EXPR)
BEGIN
  SELECT x! + 1 AS x
  UNION ALL
  SELECT x! + 2 AS x
END;

@MACRO(SELECT_CORE) selcor2!(x! SELECT_CORE)
BEGIN
  ROWS(x!)
  UNION ALL
  ROWS(x!)
END;

SELECT 5 + 1 AS x
UNION ALL
SELECT 5 + 2 AS x
UNION ALL
SELECT 5 + 1 AS x
UNION ALL
SELECT 5 + 2 AS x;

@MACRO(SELECT_EXPR) se!(x! SELECT_EXPR)
BEGIN
  x!, x!
END;

@MACRO(SELECT_EXPR) se2!(x! SELECT_EXPR)
BEGIN
  se!(SELECT(x!))
END;

SELECT x + 2 AS z, x + 2 AS z;

@MACRO(STMT_LIST) assert!(e! EXPR)
BEGIN
  IF NOT e! THEN
    CALL printf("assert '%s' failed at line %s:%d\n", @TEXT(e!), @MACRO_FILE, @MACRO_LINE);
  END;
END;

@MACRO(EXPR) macro1!(u! EXPR)
BEGIN
  u! + u! + 1
END;

@MACRO(EXPR) macro2!(u! EXPR, v! EXPR)
BEGIN
  u! * macro1!(v! + 5)
END;

@MACRO(EXPR) macro3!(q! QUERY_PARTS)
BEGIN
  @TEXT(q!)
END;

@MACRO(EXPR) macro4!(q! CTE_TABLES)
BEGIN
  @TEXT(q!)
END;

@MACRO(EXPR) macro5!(q! SELECT_CORE)
BEGIN
  @TEXT(q!)
END;

@MACRO(EXPR) macro6!(q! EXPR)
BEGIN
  @TEXT(q!)
END;

@MACRO(EXPR) macro7!(q! SELECT_EXPR)
BEGIN
  @TEXT(q!)
END;

LET x := 1;

LET y := 2;

LET z := x * (y + 5 + (y + 5) + 1);

SET z := 150;

LET zz := "(SELECT 1 AS x, 2 AS y) AS T";

SET zz := "T1\nINNER JOIN T2 ON T1.id = T2.id";

SET zz := "x AS (\n  SELECT 1 AS x, 2 AS y\n)\n";

SET zz := "SELECT 1 AS x\n  FROM foo";

SET zz := "1 + 2";

SET zz := "1 AS x, 2 AS y";

LET zzz := "begin\nIF NOT 7 THEN\n  CALL printf(\"assert '%s' failed at line %s:%d\\n\", \"7\", 'test/macro_basic_parse_test.sql', 160);\nEND;\n\nfoo";

SET x := 5;

LET uv := 5;

SET wxyz := 6;

SET wx := 7;

@MACRO(STMT_LIST) mondo1!(a! EXPR, b! QUERY_PARTS, c! SELECT_CORE, d! SELECT_EXPR, e! CTE_TABLES, f! STMT_LIST)
BEGIN
  SET zz := @TEXT(a!, b!, c!, d!, e!, f!);
END;

@MACRO(STMT_LIST) mondo2!(a! EXPR, b! QUERY_PARTS, c! SELECT_CORE, d! SELECT_EXPR, e! CTE_TABLES, f! STMT_LIST)
BEGIN
  mondo1!(a!, b!, c!, d!, e!, f!);
END;

SET zz := "1 + 2x\nINNER JOIN ySELECT 1\n  FROM foo\nUNION\nSELECT 2\n  FROM bar20 AS xxf AS (\n  SELECT 99\n    FROM yy\n)\nLET qq := 201;\n";

LET expr := 1;

LET stmt_list := 2;

LET query_parts := 3;

LET select_core := 4;

LET select_expr := 5;

LET cte_tables := 6;

@MACRO(EXPR) a_selection!()
BEGIN
  ( SELECT 1 + 5 )
END;

LET x := "( SELECT 1 + 5 )";

@MACRO(STMT_LIST) file_line!()
BEGIN
  LET line := @MACRO_LINE;
  LET file := @MACRO_FILE;
END;

LET z := "1 + 5";

LET line := 2;

LET file := 'long/path/I/do/not/like';

SET file := 'path/I/do/not/like';

SET file := 'long/path/I/do/not/like';

SET file := 'long/path/I/do/not/like';

CREATE TABLE foo(
  id INT
);

CREATE TEMP TABLE foo(
  id INT
);

CREATE TABLE IF NOT EXISTS foo(
  id INT
);

CREATE TEMP TABLE IF NOT EXISTS foo(
  id INT
);

CREATE TEMP TABLE temp_foo(
  LIKE foo
);

CREATE TABLE foo(
  id INT
);

CREATE TABLE foo(
  id INT,
  name TEXT,
  rate LONG
);

CREATE TABLE foo(
  id INT!,
  name TEXT,
  rate LONG
);

CREATE TABLE foo(
  id INT! PRIMARY KEY AUTOINCREMENT,
  name TEXT,
  rate LONG
);

CREATE TABLE foo(
  id INT!,
  name TEXT PRIMARY KEY,
  rate LONG
);

CREATE TABLE foo(
  id INT!,
  name TEXT PRIMARY KEY,
  rate LONG DEFAULT 22
);

CREATE TABLE foo(
  id INT!,
  name TEXT PRIMARY KEY,
  rate LONG DEFAULT 22
) WITHOUT ROWID;

CREATE TABLE foo(
  id BOOL
);

CREATE TABLE foo(
  id INT!,
  name TEXT,
  rate LONG,
  PRIMARY KEY (id, name)
);

CREATE TABLE foo(
  id INT!,
  name TEXT,
  rate LONG,
  CONSTRAINT pk1 PRIMARY KEY (id, name)
);

CREATE TABLE foo(
  id INT!,
  name TEXT,
  rate LONG,
  CONSTRAINT pk1 PRIMARY KEY (id + 1, name)
);

CREATE TABLE foo(
  id INT!,
  name TEXT,
  rate LONG,
  PRIMARY KEY (id, name),
  FOREIGN KEY (id, name) REFERENCES baz (id, name2)
);

CREATE TABLE foo(
  id INT!,
  name TEXT,
  rate LONG,
  PRIMARY KEY (id, name),
  CONSTRAINT garbonzo FOREIGN KEY (id, name) REFERENCES baz (id, name2)
);

CREATE TABLE foo(
  id INT,
  FOREIGN KEY (name) REFERENCES baz (name2) ON UPDATE CASCADE
);

CREATE TABLE T1(
  C11 INT!,
  C12 INT DEFAULT 37
);

CREATE TABLE T2(
  C21 INT!,
  C22 INT DEFAULT 93,
  PRIMARY KEY (a, b, c)
);

CREATE TABLE T(
  C1 INT!,
  C2 REAL,
  C3 TEXT
);

CREATE INDEX thread_key_contact_id ON participants (thread_key, contact_id);

CREATE INDEX thread_key_contact_id ON participants (thread_key, contact_id)
WHERE contact_id > 50;

CREATE INDEX thread_key_contact_id ON participants (thread_key + contact_id, contact_id % 5)
WHERE contact_id > 50;

CREATE INDEX thread_key_contact_id ON participants (thread_key COLLATE some_collation, contact_id % 5)
WHERE contact_id > 50;

SELECT 2 * 3;

SELECT a
  FROM b;

SELECT a, b
  FROM c;

SELECT a AS x, b AS y
  FROM c;

SELECT a, b
  FROM c
  WHERE d = 1;

SELECT DISTINCT a, b
  FROM c;

SELECT a AS b, c AS d
  FROM e;

SELECT a, b
  FROM c
    INNER JOIN d;

SELECT a, b
  FROM c
    INNER JOIN d ON e = f;

SELECT a, b
  FROM c
    INNER JOIN d ON e.f = g.h;

SELECT a, b
  FROM c
    LEFT OUTER JOIN d ON e.f = g.h;

SELECT
    P.thread_key,
    P.contact_id,
    P.is_admin,
    P.nickname,
    P.read_watermark_timestamp_ms,
    P.delivered_watermark_timestamp_ms,
    C.profile_picture_url,
    C.profile_picture_fallback_url,
    C.profile_picture_url_expiration_timestamp_ms,
    C.name,
    C.is_messenger_user
  FROM participants AS P
    LEFT OUTER JOIN contacts AS C ON C.id = P.contact_id;

SELECT
    T.thread_key,
    T.thread_type,
    UTN.thread_name AS thread_name,
    T.thread_picture_url,
    T.mute_expire_time_ms
  FROM threads AS T
    LEFT OUTER JOIN _unified_thread_name AS UTN ON UTN.thread_key = T.thread_key;

SELECT *
  FROM foo;

SELECT a
  FROM b;

SELECT
    T.thread_key,
    T.thread_type,
    UTN.thread_name AS thread_name,
    T.thread_picture_url,
    T.mute_expire_time_ms
  FROM threads AS T
    LEFT OUTER JOIN _unified_thread_name AS UTN ON UTN.thread_key = T.thread_key;

SELECT 2 <> 3;

SELECT x = '';

SELECT 1 AND 2;

SELECT a, b
  FROM c
  GROUP BY f;

SELECT a, b
  FROM c
  ORDER BY f;

SELECT
    C.id AS contact_id,
    C.contact_type,
    C.profile_picture_url,
    C.profile_picture_fallback_url,
    C.profile_picture_url_expiration_timestamp_ms,
    C.name,
    C.rank
  FROM contacts AS C
  WHERE C.name IS NOT NULL AND C.name <> ''
  ORDER BY C.name;

SELECT y IS NULL;

SELECT zz;

SET zz := 123;

SELECT A_Func(a, 3);

SELECT CASE
  WHEN x = 2 THEN 3
  ELSE 4
END;

SELECT CASE
  WHEN x = 1 THEN 2
  WHEN x = 3 THEN 4
  ELSE 5
END;

SELECT CASE
  WHEN a = 2 THEN 3
  WHEN b = 4 THEN ( SELECT c
    FROM d
    WHERE e = f )
  ELSE g
END AS h;

CREATE VIEW a AS
  SELECT b
    FROM c;

CREATE VIEW a(x) AS
  SELECT b
    FROM c;

CREATE VIEW IF NOT EXISTS qq AS
  SELECT b
    FROM c;

CREATE VIEW _self_thread_name AS
  SELECT UI.facebook_user_id AS thread_key, C.name AS thread_name
    FROM _user_info AS UI,
      contacts AS C
    WHERE UI.facebook_user_id = C.id;

DELETE FROM a;

DELETE FROM a WHERE b > c AND e <= f;

INSERT INTO _sync_status
  VALUES (1, NULL, NULL);

SELECT a.b - (c('now') - 2440587) * 86400000 > 0 OR d < 0;

SELECT T.mute_expire_time_ms - (julianday('now') - 2440587.5) * 86400000 > 0 OR T.mute_expire_time_ms < 0;

SELECT 12.3;

CREATE VIEW zzz AS
  SELECT DISTINCT a, b AS c, d
    FROM e AS E
      LEFT OUTER JOIN f AS F ON F.g = e.g
      LEFT OUTER JOIN x AS X ON y.z = q.w AND h.j = k.l
    ORDER BY o.p DESC;

CREATE VIEW thread_messages AS
  SELECT DISTINCT
      M.message_id,
      M.thread_key,
      M.offline_threading_id,
      M.sender_id,
      M.send_status,
      C.name,
      C.profile_picture_url,
      C.profile_picture_fallback_url,
      C.profile_picture_url_expiration_timestamp_ms,
      M.body,
      M.sticker_id,
      M.timestamp_ms,
      A.has_xma OR A.has_media AS has_attachment,
      M.is_admin_message
    FROM messages AS M
      LEFT OUTER JOIN contacts AS C ON C.id = M.sender_id
      LEFT OUTER JOIN attachments AS A ON A.message_id = M.message_id AND A.thread_key = M.thread_key
    ORDER BY M.timestamp_ms DESC;

SELECT *
  FROM threads
  ORDER BY last_activity_timestamp_ms DESC
  LIMIT 20;

SELECT *
  FROM threads
  ORDER BY last_activity_timestamp_ms DESC
  LIMIT 20
  OFFSET 7;

SELECT a
  FROM (SELECT b
        FROM c) AS X;

CREATE VIEW unread_not_muted_threads_count AS
  SELECT count(*) AS count
    FROM (SELECT *
          FROM threads
          ORDER BY last_activity_timestamp_ms DESC
          LIMIT 20) AS T
    WHERE T.last_activity_timestamp_ms > T.last_read_watermark_timestamp_ms AND (T.mute_expire_time_ms >= 0 AND T.mute_expire_time_ms - strftime('%s', 'now') * 1000 <= 0) AND T.folder_name = 'inbox';

CREATE TABLE pending_tasks(
  task_id INT PRIMARY KEY AUTOINCREMENT,
  queue_name TEXT!,
  task_value TEXT!,
  context TEXT,
  attempt_count INT! DEFAULT 0,
  enqueue_timestamp_ms LONG! DEFAULT 0,
  first_executed_timestamp_ms LONG! DEFAULT 0,
  last_executed_timestamp_ms LONG! DEFAULT 0,
  next_retry_timestamp_ms LONG! DEFAULT 0,
  failure_count INT! DEFAULT 0
);

CREATE TABLE pending_query_changes(
  id INT PRIMARY KEY AUTOINCREMENT,
  query_id INT UNIQUE!
);

UPDATE a
  SET b = 1;

UPDATE a
  SET x = 1, y = 2
  WHERE z = 3;

UPDATE a
  SET x = 1, y = 2
  WHERE z = 3;

SET a1 := 20;

SET b3 := 40.75;

PROC a ()
BEGIN
  INSERT INTO d
    VALUES (e, f);
  UPDATE g
    SET h = j, k = l;
END;

PROC a (b INT, c TEXT)
BEGIN
  INSERT INTO d
    VALUES (e, f);
  UPDATE g
    SET h = j, k = l;
END;

PROC a (b INT, IN c TEXT, OUT d LONG, INOUT f TEXT)
BEGIN
  INSERT INTO d
    VALUES (e, f);
  UPDATE g
    SET h = j, k = l;
END;

CLOSE y;

CONTINUE;

LEAVE;

DECLARE a, b, c INT;

DECLARE var_a, var_b, var_c INT;

CURSOR a FOR
  SELECT b
    FROM c;

CURSOR a FOR
  SELECT b
    FROM c;

CURSOR a LIKE (a INT, b TEXT);

CURSOR a LIKE (id INT);

LOOP FETCH a INTO b
BEGIN
  INSERT INTO d
    VALUES (e, f);
  FETCH a INTO x, y;
  LEAVE;
  CONTINUE;
END;

CLOSE a;

IF x > 20 THEN
  UPDATE x
    SET y = z;
END;

IF x > 20 THEN
  UPDATE x
    SET y = z;
ELSE
  UPDATE w
    SET k = m;
END;

IF a > 1 THEN
  DELETE FROM b;
ELSE IF c > 2 THEN
  DELETE FROM d;
ELSE IF d > 3 THEN
  DELETE FROM e;
ELSE
  DELETE FROM f;
END;

IF 1 IN (1, 2) THEN
  DELETE FROM b;
ELSE
  DELETE FROM c;
END;

IF 1 NOT IN (1, 2) THEN
  DELETE FROM b;
ELSE
  DELETE FROM c;
END;

IF 1 NOT IN (SELECT 1) THEN
  DELETE FROM b;
ELSE
  DELETE FROM c;
END;

IF 'x' LIKE 'y' THEN
  DELETE FROM b;
END;

IF 1 BETWEEN 0 AND 2 AND 3 IN (3, 4) THEN
  DELETE FROM b;
END;

IF 3 NOT BETWEEN 1 AND 2 AND 1 NOT IN (2, 3) THEN
  DELETE FROM b;
END;

IF x IS NOT NULL COMMIT RETURN;

IF x IS NOT NULL CONTINUE;

IF x IS NOT NULL LEAVE;

IF x IS NOT NULL RETURN;

IF x IS NOT NULL ROLLBACK RETURN;

IF x IS NOT NULL THROW;

SELECT -1;

SELECT 1 + 2;

SELECT 1 + 2 * 3;

SELECT (1 + 2) * 3;

SELECT -1 + 2 * (-3 + 4);

SELECT (1 + 2) * 3 - 4;

SELECT 1 - 2;

SELECT 1 - 2;

SELECT x;

SELECT x.y + 1;

SELECT 3 * x.y + 1;

SELECT 3 * (x + y + 1);

SELECT 3;

SELECT 5 * 5 + 3;

SELECT 'x';

SELECT '''x''' + 2;

SELECT foo(1);

SELECT foo((1 + 3) * 4, 2 / 7, 5 % 3);

SELECT 1 = 2;

SELECT 1 <> 2;

SELECT 1 <= 2;

SELECT 1 >= 2;

SELECT 1 > 2;

SELECT 1 < 2;

SELECT 3 BETWEEN 4 AND 3;

SELECT 3 + 7 BETWEEN 4 AND 3;

SELECT 3 NOT BETWEEN 4 AND 3;

SELECT 3 + 7 NOT BETWEEN 4 AND 3;

SELECT 1 < 2 AND 2 > 3;

SELECT 1 < (2 AND 2) > 3;

SELECT NOT 1 + 2;

SELECT NOT (1 AND 2);

SELECT NOT 1 AND 2;

SELECT 1 AND 2 AND 3 AND 4;

SELECT 1 AND (2 OR 3) OR 4;

SELECT 1 AND (9 AND 10) OR 4;

SELECT 1, ( SELECT 2 );

SELECT x IS NULL;

SELECT x IS NOT NULL;

SELECT x IS NOT NULL AND y IS NOT NULL;

SELECT x IS NOT NULL AND y OR z IS NOT NULL;

SELECT x IS NOT NULL AND (y OR z) IS NOT NULL;

SELECT x IS NOT NULL AND y + z IS NOT NULL;

SELECT x IS NOT NULL AND y + z IS NULL;

SELECT 1 + (NOT x IS NULL);

SELECT 1 + (NOT x) IS NULL;

SELECT x IS NOT NULL AND y + (NOT z) IS NULL;

SELECT x IS NOT NULL AND y + (NOT z IS NULL);

SELECT x + (NOT z IS NULL);

SELECT x + (NOT z IS NULL);

SELECT x + (NOT z IS NULL);

SELECT 1 BETWEEN 0 AND 2 AND 3 IN (3, 4);

SELECT 1 BETWEEN 0 AND (2 AND 3 IN (3, 4));

SELECT 1 BETWEEN 0 AND (2 AND 3) IN (TRUE, FALSE);

SELECT 1 NOT BETWEEN 0 AND 2 AND 3 NOT IN (3, 4);

SELECT 1 NOT BETWEEN 0 AND (2 AND 3 NOT IN (3, 4));

SELECT 1 NOT BETWEEN 0 AND (2 AND 3) NOT IN (TRUE, FALSE);

SELECT 1 + (2 AND 3) IN (TRUE, FALSE);

SELECT 1 + 3 IN (3, 4);

SELECT 1 + (3 IN (3, 4));

SELECT 1 AND 3 IN (3, 4);

SELECT 1 AND 3 IN (3, 4);

SELECT x, y
  FROM T
    INNER JOIN Y USING (a, b, c);

UPDATE X
  SET x = 1, y = 2
  WHERE z = 5
    LIMIT 3;

SELECT *
  FROM foo
  WHERE x = y
  GROUP BY x
  HAVING z = w;

SELECT DISTINCTROW x
  FROM goo;

SELECT ALL x, y
  FROM foo;

SELECT a, b
  FROM X
    INNER JOIN Y;

SELECT a, b
  FROM X
    LEFT JOIN Y;

SELECT a, b
  FROM X AS XX
    RIGHT JOIN Y;

SELECT a, b
  FROM X
    RIGHT OUTER JOIN Y;

SELECT a, b
  FROM X
    LEFT OUTER JOIN Y;

SELECT a, b
  FROM X
    CROSS JOIN Y;

SELECT CASE 1
  WHEN 1 THEN 'a'
  WHEN 2 THEN 'b'
  ELSE 'c'
END;

SELECT x
  FROM (
      A,
      B,
      C);

SELECT x
  FROM A
  ORDER BY x ASC;

SELECT x
  FROM A
  ORDER BY x DESC;

SELECT x, y
  FROM A
  GROUP BY a, b;

UPDATE bar
  SET x = 1
  ORDER BY a
    LIMIT 5;

CALL foo();

CALL foo(2);

PROC foo ()
BEGIN
  TRY
    SELECT 'try';
  CATCH
    SELECT 'catch';
  END;
END;

BEGIN;

BEGIN;

BEGIN IMMEDIATE;

BEGIN EXCLUSIVE;

BEGIN;

BEGIN IMMEDIATE;

BEGIN EXCLUSIVE;

BEGIN;

COMMIT;

COMMIT;

SAVEPOINT foo;

RELEASE foo;

RELEASE foo;

ROLLBACK;

ROLLBACK;

ROLLBACK TO foo;

ROLLBACK TO foo;

ROLLBACK TO foo;

ROLLBACK TO foo;

PROC rb_test ()
BEGIN
  ROLLBACK TO rb_test;
  ROLLBACK TO rb_test;
  ROLLBACK TO rb_test;
  ROLLBACK TO rb_test;
END;

CURSOR test FOR
  CALL foo(1, 2);

CURSOR test FOR
  CALL foo(1, 2);

SELECT *
  FROM foo
  WHERE EXISTS (SELECT *
    FROM bar);

SELECT *
  FROM foo
  WHERE NOT EXISTS (SELECT *
    FROM bar);

FETCH my_cursor;

SELECT a
  FROM (
      X
      INNER JOIN Y)
    LEFT OUTER JOIN (
      W
      INNER JOIN Q);

SELECT a
  FROM (
      X
      INNER JOIN Y)
    LEFT OUTER JOIN (
      W
      INNER JOIN Q);

SELECT a, b
  FROM x
  ORDER BY a, b;

SELECT a, b
  FROM x
  ORDER BY a ASC, b DESC;

SELECT a, b
  FROM x
  ORDER BY a ASC NULLS LAST, b DESC NULLS FIRST;

SELECT CAST(1 AS TEXT);

DECLARE PROC decl1 (id INT);

DECLARE PROC decl2 (id INT) USING TRANSACTION;

DECLARE PROC decl3 (id INT) (A INT!, B BOOL);

DECLARE PROC decl3 (id INT) OUT (A INT!, B BOOL);

DECLARE PROC decl4 (id INT) OUT (A INT!, B BOOL) USING TRANSACTION;

DECLARE INTERFACE decl5 (A INT!, B BOOL);

DECLARE INTERFACE decl6 (A INT!, B BOOL);

DECLARE ENUM things INT (
  foo,
  bar,
  baz = 3 + 1,
  bing
);

SELECT 1, 2, 3
UNION
SELECT 4, 5, 6;

SELECT 1, 2, 3
UNION ALL
SELECT 4, 5, 6;

SELECT 1, 2, 3
UNION ALL
SELECT 4, 5, 6
UNION ALL
SELECT 7, 8, 9;

SELECT 1 AS a, 2, 3
UNION
SELECT 4 AS a, 5, 6
UNION
SELECT 7 AS a, 8, 9
  ORDER BY a
  LIMIT 2
  OFFSET 3;

SELECT nullable(1);

WITH
  x (a, b) AS (
    SELECT 1, 2
  )
SELECT a, b
  FROM x;

WITH
  x (a, b) AS (
    SELECT 1, 2
  ),
  y (c, d) AS (
    SELECT 5.4, 7.3
  )
SELECT a, b
  FROM x
    INNER JOIN y ON x.a = y.c;

WITH
  x (a, b) AS (
    SELECT 1, 2
  )
SELECT *
  FROM x AS X
    INNER JOIN (      WITH
        y (a, b) AS (
          SELECT 1, 3
        )
      SELECT *
        FROM y) AS Y ON X.a = y.A;

WITH RECURSIVE
  cnt (x) AS (
    SELECT 1
    UNION ALL
    SELECT x + 1
      FROM cnt
      LIMIT 20
  )
SELECT x
  FROM cnt;

SELECT T.*
  FROM (SELECT 1) AS T;

DECLARE FUNC foo (x INT, y TEXT!) INT!;

DECLARE obj_var OBJECT;

DECLARE var_obj_var OBJECT;

DECLARE FUNC createobj () CREATE OBJECT;

DECLARE FUNC createobj () CREATE OBJECT!;

@ECHO c, "foo\n";

DECLARE foo_obj OBJECT<Foo>;

SELECT valid_utf8_or_null('xxx');

INSERT INTO foo(a, b)
  VALUES (1, 2);

INSERT OR REPLACE INTO foo(a, b)
  VALUES (1, 2);

INSERT OR IGNORE INTO foo(a, b)
  VALUES (1, 2);

CREATE TEMP VIEW foo AS
  SELECT 1 AS A;

ALTER TABLE foo ADD COLUMN bar INT!;

CREATE TABLE foo(
  id INT @CREATE(1, Foo)
);

CREATE TABLE foo(
  id INT @CREATE(1, cql:from_recreate)
);

CREATE TABLE foo(
  id INT @DELETE(2, Bar)
);

CREATE TABLE foo(
  id INT @CREATE(1, Foo) @DELETE(2, Bar)
);

CREATE TABLE foo(
  id INT @CREATE(1) @DELETE(2)
);

@SCHEMA_UPGRADE_VERSION (112);

CREATE TABLE foo(
  id INT
) @CREATE(1, foo) @DELETE(2, bar);

DROP TABLE foo;

DROP TABLE IF EXISTS foo;

@PREVIOUS_SCHEMA;

SELECT text
  FROM foo;

@SCHEMA_UPGRADE_SCRIPT;

CREATE VIEW foo AS
  SELECT 1
    FROM bar @DELETE(2);

SELECT 3147483647L;

DROP VIEW foo;

CREATE INDEX foo ON bazzle (goo) @DELETE(7);

DROP INDEX foo;

INSERT INTO foo(x, y)
  VALUES (1, 2) @DUMMY_SEED(1 + 2 * 3) @DUMMY_DEFAULTS @DUMMY_NULLABLES;

INSERT INTO foo()
  VALUES ();

DECLARE foo BLOB;

DECLARE var_foo BLOB;

DECLARE FUNC foo (x BLOB!) CREATE BLOB!;

OUT my_cursor;

CURSOR C FETCH FROM CALL x();

CURSOR C FETCH FROM CALL x();

FETCH C FROM CALL x();

FETCH C FROM VALUES (1, 2, 3);

FETCH C(id, x) FROM VALUES (1.3, 4);

FETCH C(x, y) FROM VALUES (1, 2) @DUMMY_SEED(1 + 2 * 3) @DUMMY_DEFAULTS @DUMMY_NULLABLES;

FETCH C USING 1 AS a, 2 AS b @DUMMY_SEED(1 + 2 * 3) @DUMMY_DEFAULTS @DUMMY_NULLABLES;

CURSOR C0 LIKE C1;

CURSOR C LIKE SELECT 1 AS A, 2.5 AS B;

SET x := "this is a test";

SET x := "\"this is a test\" '\n";

@ATTRIBUTE(foo)
@ATTRIBUTE(foo=1)
@ATTRIBUTE(foo=bar)
@ATTRIBUTE(foo='bazzle')
@ATTRIBUTE(foo=('bazzle', (2.5, 'razzle'), foo))
CREATE TABLE bar(
  @ATTRIBUTE(cute)
  @ATTRIBUTE(smart)
  @ATTRIBUTE(coolstuff:main=1)
  @ATTRIBUTE(coolstuff:alt=1)
  id INT
);

CREATE UNIQUE INDEX IF NOT EXISTS my_unique_index ON foo (id ASC, name DESC, zone);

CREATE TABLE foo(
  id INT!,
  name TEXT,
  rate LONG,
  PRIMARY KEY (id, name),
  FOREIGN KEY (id, name) REFERENCES baz (id, name2) ON UPDATE CASCADE ON DELETE NO ACTION NOT DEFERRABLE INITIALLY DEFERRED,
  FOREIGN KEY (rate) REFERENCES rater (r) ON UPDATE RESTRICT ON DELETE SET DEFAULT DEFERRABLE INITIALLY IMMEDIATE,
  FOREIGN KEY (name) REFERENCES name_thing (n) ON UPDATE SET NULL ON DELETE SET DEFAULT DEFERRABLE INITIALLY IMMEDIATE
);

CREATE TABLE foo(
  id INT REFERENCES goo (another_id) ON UPDATE CASCADE ON DELETE SET NULL
);

CREATE TABLE lots_o_defaults(
  c1 INT DEFAULT 2,
  c2 INT DEFAULT -7,
  c3 REAL DEFAULT 2.5,
  c4 TEXT DEFAULT '''',
  c5 TEXT DEFAULT "xyzzy"
);

CREATE TABLE foo(
  id INT
) @RECREATE;

CREATE TABLE foo2(
  id INT
) @RECREATE @DELETE;

CREATE TABLE foo3(
  id INT
) @RECREATE(foo3_group) @DELETE;

WITH
  x (a, b) AS (
    SELECT 111, 222
  )
INSERT INTO foo
  VALUES (( SELECT a
    FROM x ), ( SELECT b
    FROM x ));

WITH RECURSIVE
  x (a, b) AS (
    SELECT 111, 222
  )
INSERT INTO foo(a, b)
  VALUES (( SELECT a
    FROM x ), ( SELECT b
    FROM x ));

INSERT INTO foo()
  SELECT 1, 2, 3
    FROM bar;

DECLARE SELECT FUNC foo (id INT) INT!;

FETCH a_cursor FROM ARGUMENTS;

FETCH a_cursor FROM ARGUMENTS(LIKE some_table);

FETCH a_cursor(x) FROM ARGUMENTS @DUMMY_SEED(7) @DUMMY_DEFAULTS;

FETCH to_cursor FROM from_cursor;

INSERT INTO foo(a, b) FROM ARGUMENTS;

PROC var_x (LIKE table_name, id INT)
BEGIN
  DECLARE x INT;
END;

PROC x (LIKE table_name, id INT)
BEGIN
  DECLARE x INT;
END;

SELECT x MATCH y;

SELECT 1 | 2 & 3;

SELECT 1 & (~2 | 3);

SELECT 1 << 2 + 1 >> 4;

SELECT 1 || 2;

SELECT 'a' || 'b';

SELECT 'x' GLOB 'y';

SELECT 'x' REGEXP 'y';

SELECT 'x' MATCH 'y';

SELECT 1:min(2);

DECLARE FUNC dummy_func (x TEXT, y INT) INT;

SELECT "a":dummy_func(3);

CREATE TEMP TRIGGER IF NOT EXISTS trigger1
  BEFORE DELETE ON target_table1
  FOR EACH ROW
  WHEN complex_when_expression
BEGIN
  SELECT a_result;
END;

CREATE TEMP TRIGGER IF NOT EXISTS trigger1
  BEFORE DELETE ON target_table1
  FOR EACH ROW
  WHEN complex_when_expression
BEGIN
  SELECT a_result;
END;

CREATE TRIGGER trigger2
  AFTER INSERT ON target_table2
BEGIN
  DELETE FROM foo WHERE id = 1;
END;

CREATE TRIGGER trigger3
  INSTEAD OF UPDATE ON target_table3
BEGIN
  UPDATE goo
    SET foo = bar
    WHERE miz = wiz;
  INSERT INTO stew
    VALUES (1);
END;

CREATE TRIGGER trigger4
  INSTEAD OF UPDATE OF x, y, z ON target_table4
BEGIN
  SELECT 1;
END;

DROP TRIGGER foo;

DROP TRIGGER IF EXISTS foo;

SELECT RAISE(IGNORE);

SELECT RAISE(FAIL, 'fail it');

SELECT RAISE(ABORT, 'abort it');

SELECT RAISE(ROLLBACK, 'roll it back');

[[identity=(id)]]
PROC simple_identity ()
BEGIN
  SELECT 1 AS id, 2 AS data;
END;

[[identity=(col1, col2)]]
PROC complex_identity ()
BEGIN
  SELECT 1 AS col1, 2 AS col2, 3 AS data;
END;

CREATE TABLE with_sensitive(
  id INT,
  name TEXT @SENSITIVE
);

WITH
  x (a, b) AS (
    SELECT 1, 2
  )
DELETE FROM foo WHERE foo.id IN (SELECT *
  FROM x);

WITH
  x (a, b) AS (
    SELECT 1, 2
  )
UPDATE foo
  SET xyzzy = 7
  WHERE foo.id IN (SELECT *
    FROM x);

@ENFORCE_STRICT FOREIGN KEY ON UPDATE;

@ENFORCE_NORMAL FOREIGN KEY ON DELETE;

@ENFORCE_STRICT JOIN;

@ENFORCE_NORMAL JOIN;

@ENFORCE_STRICT CAST;

@ENFORCE_NORMAL CAST;

@ENFORCE_STRICT UPSERT STATEMENT;

@ENFORCE_NORMAL UPSERT STATEMENT;

@ENFORCE_STRICT TRANSACTION;

@ENFORCE_NORMAL TRANSACTION;

@ENFORCE_STRICT SELECT IF NOTHING;

@ENFORCE_NORMAL SELECT IF NOTHING;

@ENFORCE_STRICT ENCODE CONTEXT COLUMN;

@ENFORCE_NORMAL ENCODE CONTEXT COLUMN;

@ENFORCE_RESET;

SET rc := @RC;

@DECLARE_SCHEMA_REGION foo;

@DECLARE_SCHEMA_REGION bar USING foo;

@DECLARE_SCHEMA_REGION baz USING foo, bar;

@DECLARE_SCHEMA_REGION goo USING foo, bar, baz PRIVATE;

@DECLARE_DEPLOYABLE_REGION dep1;

@DECLARE_DEPLOYABLE_REGION dep2 USING foo, bar;

@BEGIN_SCHEMA_REGION foo;

@END_SCHEMA_REGION;

DECLARE SELECT FUNC garbonzo (id INT) (t TEXT);

SELECT *
  FROM garbonzo(1, 2, 3) AS T1
    INNER JOIN xyzzy() AS T2 ON T1.id = T2.id;

CREATE TRIGGER deleted_trigger
  AFTER INSERT ON target_table2
BEGIN
  DELETE FROM foo WHERE id = 1;
END @DELETE(100);

INSERT INTO foo
  SELECT C11
    FROM T1
    WHERE 1
ON CONFLICT (id)
DO NOTHING;

INSERT INTO foo(id)
  VALUES (1)
ON CONFLICT (id)
WHERE id = 10 
DO UPDATE
  SET id = id + 1
  WHERE id = 20;

INSERT INTO foo(id)
  VALUES (1)
ON CONFLICT
DO NOTHING;

SELECT 10 * a AS T
  WHERE T = 1;

EXPLAIN QUERY PLAN
SELECT *
  FROM foo;

EXPLAIN
SELECT 1;

CURSOR E FOR
  EXPLAIN
  SELECT 1;

@SCHEMA_AD_HOC_MIGRATION(11, YourProcHere);

@SCHEMA_AD_HOC_MIGRATION FOR @RECREATE(some_group, some_proc);

PROC emit_several_rows ()
BEGIN
  CURSOR C LIKE SELECT 1 AS x, "2" AS y;
  FETCH C FROM VALUES (1, "2");
  OUT UNION C;
  OUT UNION C;
END;

PROC emit_several_rows ()
BEGIN
  CURSOR C LIKE SELECT 1 AS x, "2" AS y;
  FETCH C FROM VALUES (1, "2");
  OUT UNION C;
  OUT UNION C;
END;

PROC compound_select_expr ()
BEGIN
  DECLARE x INT;
  SET x := ( SELECT 1
    WHERE 0
  UNION
  SELECT 2 );
END;

SELECT id, 
  row_number() FILTER (WHERE 1) OVER (RANGE BETWEEN id >= 70 PRECEDING AND id < 100 FOLLOWING EXCLUDE NO OTHERS) AS row_num
  FROM foo;

SELECT id, 
  row_number() OVER win1, 
  rank() OVER win2
  FROM foo
  WINDOW 
    win1 AS (), 
    win2 AS ()
  ORDER BY id;

PROC foo (x INT, y INT)
BEGIN
  INSERT INTO bar(x, y) FROM ARGUMENTS @DUMMY_SEED(1) @DUMMY_NULLABLES;
END;

UPDATE CURSOR d(a, b) FROM VALUES (1, 'x');

UPDATE CURSOR d USING 1 AS a, 'x' AS b;

WITH
  foo AS (
    SELECT 1 AS x, '2' AS y
  )
SELECT *
  FROM foo;

UPDATE CURSOR d(LIKE x) FROM VALUES (1, 2);

UPDATE CURSOR d(LIKE x) FROM zz;

FETCH x(a, b) FROM n @DUMMY_SEED(1);

SELECT count(DISTINCT id) FILTER (WHERE 1)
  FROM foo;

SELECT 'x' COLLATE nocase;

SELECT nullif('a', 'b');

SELECT char(1);

SELECT x'1234abcd';

INSERT INTO foo DEFAULT VALUES;

DECLARE PROC p (LIKE foo) (LIKE bar);

CALL something(FROM a_cursor);

CALL something(FROM a_cursor LIKE another);

CALL something(FROM ARGUMENTS, FROM ARGUMENTS);

CALL something(FROM ARGUMENTS LIKE something);

SET x := foo(FROM ARGUMENTS LIKE X, FROM C LIKE A, FROM X, FROM ARGUMENTS);

PROC foo ()
BEGIN
  DECLARE w TEXT;
  SET w := 'foo';
  SAVEPOINT foo;
  RELEASE foo;
  ROLLBACK TO foo;
END;

DECLARE obj OBJECT<foo CURSOR>;

CURSOR C FOR obj;

CURSOR C FOR obj;

CURSOR C FOR some_func(obj);

CURSOR C FOR some_func(obj);

SET X FROM CURSOR C;

CURSOR C LIKE P2 ARGUMENTS;

CURSOR C LIKE P2 ARGUMENTS;

CREATE TABLE foo(
  id INT COLLATE bar CHECK(id = 3 AND goo = 5) 
);

PROC foo ()
BEGIN
  PROC SAVEPOINT
  BEGIN
    IF 1 THEN
      ROLLBACK RETURN;
    ELSE
      COMMIT RETURN;
    END;
  END;
END;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  SUM(amount) OVER (ORDER BY month) AS RunningTotal
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING EXCLUDE NO OTHERS) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month ROWS BETWEEN 3 PRECEDING AND 4 FOLLOWING EXCLUDE CURRENT ROW) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month ROWS BETWEEN 4 PRECEDING AND 5 FOLLOWING EXCLUDE GROUP) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month ROWS BETWEEN 6 PRECEDING AND 7 FOLLOWING EXCLUDE TIES) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month RANGE BETWEEN 8 PRECEDING AND 9 FOLLOWING EXCLUDE TIES) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month GROUPS BETWEEN 10 PRECEDING AND 11 FOLLOWING EXCLUDE TIES) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month GROUPS BETWEEN UNBOUNDED PRECEDING AND 12 FOLLOWING EXCLUDE TIES) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month GROUPS BETWEEN 13 FOLLOWING AND 14 PRECEDING) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month GROUPS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month GROUPS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (ORDER BY month GROUPS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE TIES) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (PARTITION BY something ORDER BY month GROUPS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE TIES) AS SalesMovingAverage
  FROM SalesInfo;

SELECT month, amount, 
  AVG(amount) OVER (GROUPS CURRENT ROW) AS SalesMovingAverage
  FROM SalesInfo;

SET trigger := 1;

DECLARE x INT! @SENSITIVE;

DECLARE x INT! @SENSITIVE;

SET z := 1 BETWEEN 1 & 2 AND 3;

SET z := 1 BETWEEN 1 | 2 AND 3;

SET z := 1 BETWEEN 1 << 2 AND 3;

SET z := 1 BETWEEN 1 >> 2 AND 3;

SET z := 1 BETWEEN 1 + 2 AND 3;

SET z := 1 BETWEEN 1 - 2 AND 3;

SET z := 1 BETWEEN 1 * 2 AND 3;

SET z := 1 BETWEEN 1 / 2 AND 3;

SET z := 1 BETWEEN 1 % 2 AND 3;

SET z := 1 BETWEEN -1 AND 3;

SET z := 1 BETWEEN 'x' || 'y' AND 'z';

SET key := 3;

SET virtual := 3;

SET hidden := 2;

PROC foo (x LIKE this, y LIKE that)
BEGIN
END;

CREATE VIRTUAL TABLE foo USING bar (this, that, the_other) AS (
  id INT,
  t TEXT
);

CREATE VIRTUAL TABLE @EPONYMOUS foo USING bar (this, that, the_other) AS (
  id INT,
  t TEXT
);

CREATE VIRTUAL TABLE IF NOT EXISTS @EPONYMOUS foo USING bar (this, that, the_other) AS (
  id INT,
  t TEXT
);

CREATE VIRTUAL TABLE IF NOT EXISTS @EPONYMOUS foo USING bar (this, that, the_other) AS (
  id INT,
  t TEXT
);

CREATE VIRTUAL TABLE foo USING bar AS (
  id INT,
  t TEXT
);

CREATE VIRTUAL TABLE foo USING bar (ARGUMENTS FOLLOWING) AS (
  id INT,
  t TEXT
);

CREATE VIRTUAL TABLE foo USING bar (ARGUMENTS FOLLOWING) AS (
  id INT,
  t TEXT
) @DELETE(5);

CREATE TABLE foo(
  id INT,
  v INT,
  CHECK (v > 5),
  CONSTRAINT goo CHECK (v < 20)
);

@EMIT_ENUMS;

@EMIT_ENUMS foo;

@EMIT_ENUMS foo, bar;

TYPE fbid TEXT @SENSITIVE;

DECLARE my_fbid fbid;

DECLARE x INT<special>;

DECLARE y REAL<special>;

SET x := 1;

DECLARE PROC p (x INT<special>);

DECLARE FUNC f (x INT<special>) REAL<not_so_special>;

DECLARE PROC p2 () (x INT<special>, y INT<also_special>);

CREATE TABLE special(
  id INT<special>,
  id2 INT<less_special>,
  id3 INT
);

DECLARE l1 LONG<one>;

DECLARE l1 LONG<two>;

DECLARE l1 LONG<three>;

DECLARE l1 LONG<four>;

SELECT CASE
  WHEN 1 THEN 2
  ELSE ifnull(x, y)
END;

CREATE TABLE foo(
  x INT HIDDEN
);

@ENFORCE_PUSH;

@ENFORCE_POP;

SET x := ( SELECT x
  FROM y IF NOTHING THEN 3 );

SET x := ( SELECT x
  FROM y IF NOTHING OR NULL THEN 3 );

SET x := ( SELECT x
  FROM y IF NOTHING THEN THROW );

SET x := ( SELECT x
  FROM y IF NOTHING THEN 3 );

SET x := ( SELECT x
  FROM y IF NOTHING OR NULL THEN 3 );

SET x := ( SELECT x
  FROM y IF NOTHING THEN THROW );

LET z := 1 + 2;

SWITCH x
  WHEN 1, 3 THEN
    SELECT 1;
  WHEN 4 THEN
    SET x := 1;
    SET y := 2;
  WHEN 5 THEN NOTHING
  ELSE
    SET y := 2;
END;

SWITCH x ALL VALUES
  WHEN 1, 3 THEN
    SELECT 1;
  WHEN 4 THEN
    SET x := 1;
    SET y := 2;
  WHEN 5 THEN NOTHING
  ELSE
    SET y := 2;
END;

DECLARE OUT CALL foo(a, b);

INSERT INTO foo USING SELECT 1 AS a, 2 AS b;

CREATE TABLE foo(
  id INT!,
  CONSTRAINT pk1 PRIMARY KEY (id, name) ON CONFLICT ROLLBACK
);

CREATE TABLE foo(
  id INT!,
  CONSTRAINT pk1 PRIMARY KEY (id, name) ON CONFLICT FAIL
);

CREATE TABLE foo(
  id INT!,
  CONSTRAINT pk1 PRIMARY KEY (id, name) ON CONFLICT IGNORE
);

CREATE TABLE foo(
  id INT!,
  CONSTRAINT pk1 PRIMARY KEY (id, name) ON CONFLICT REPLACE
);

CREATE TABLE foo(
  id INT!,
  CONSTRAINT pk1 UNIQUE (id, name) ON CONFLICT ABORT
);

CREATE TABLE foo(
  id INT!,
  CONSTRAINT pk1 UNIQUE (id + 5, name) ON CONFLICT ABORT
);

CREATE TABLE foo(
  id INT UNIQUE ON CONFLICT ROLLBACK
);

CREATE TABLE foo(
  id INT PRIMARY KEY ON CONFLICT FAIL
);

CREATE TABLE foo(
  id INT PRIMARY KEY ON CONFLICT FAIL AUTOINCREMENT
);

CREATE TABLE foo(
  id INT! ON CONFLICT FAIL
);

SELECT CAST(1 AS REAL) + 1;

SELECT CAST(1 AS REAL) - 1;

SELECT CAST(1 AS REAL) * 1;

SELECT CAST(1 AS REAL) / 1;

SELECT 0 BETWEEN 0 AND 3 BETWEEN 2 AND 3;

SELECT 0 BETWEEN 0 AND (3 BETWEEN 2 AND 3);

SELECT 0 BETWEEN 0 AND 3 BETWEEN 2 AND 3;

SELECT 4 || (3 * 2) || '3';

SELECT 4 || 3 * 2 || '3';

SELECT 4 || 3 * 2 || '3';

SELECT x * y COLLATE foo;

SELECT x * y COLLATE foo;

SELECT (x * y) COLLATE foo;

SELECT NOT inas;

SELECT NOT likeas;

SELECT 1 IS notas;

SELECT NOT betweenas;

SELECT NOT deferrableas;

SELECT 'x' NOT MATCH 'y';

SELECT 'x' NOT GLOB 'y';

SELECT 'x' NOT REGEXP 'y';

SELECT NOT matchas;

SELECT NOT globas;

SELECT NOT likeas;

SELECT NOT regexpas;

SELECT 2 IS TRUE;

SELECT 2 IS FALSE;

SELECT 2 IS NOT TRUE;

SELECT 2 IS NOT FALSE;

SELECT 2 IS trueas;

SELECT 2 IS falseas;

SELECT 2 IS NOT trueas;

SELECT 2 IS NOT falseas;

SELECT 1 IS NULL;

SELECT NULL IS NULL;

SELECT NULL IS NOT NULL;

DECLARE PROC printf NO CHECK;

DECLARE SELECT FUNC no_check_select_fun NO CHECK TEXT;

DECLARE SELECT FUNC no_check_select_table_valued_fun NO CHECK (t TEXT);

@ENFORCE_STRICT IS TRUE;

DECLARE CONST GROUP foo (
  x = 'this',
  y = 5 + 3,
  z = 3.0
);

@EMIT_CONSTANTS foo;

WITH
  foo AS (CALL bar(1, 2) USING a AS x, b AS y)
SELECT *
  FROM foo;

WITH
  foo AS (CALL bar(1, 2))
SELECT *
  FROM foo;

CALL foo(*);

WITH
  (CALL bar(1, 5) USING goo AS too),
  (CALL tar(3) USING soo AS woo, goo AS too)
SELECT *
  FROM bar,
    tar;

SELECT *
  FROM (CALL foo() USING stuff AS source);

SELECT @COLUMNS(LIKE foo)
  FROM foo2;

SELECT @COLUMNS(LIKE foo, y LIKE bar)
  FROM foo2;

SELECT @COLUMNS(LIKE foo, y LIKE bar)
  FROM foo2;

SELECT @COLUMNS(DISTINCT LIKE foo, y LIKE bar)
  FROM foo2;

SELECT @COLUMNS(DISTINCT a.b, LIKE bar)
  FROM foo2;

CREATE TABLE T(
  x INT,
  y INT
);

CREATE TABLE U(
  u TEXT,
  v TEXT
);

CREATE TABLE V(
  x INT,
  y INT,
  u TEXT,
  v TEXT
);

PROC p ()
BEGIN
  CURSOR C FOR
    SELECT T.*, 1 AS u, 2 AS v
      FROM T;
  FETCH C;
  INSERT INTO T
    VALUES (FROM C LIKE T);
  CURSOR D FOR
    SELECT *
      FROM U;
  FETCH D;
  CURSOR R LIKE V;
  FETCH R FROM VALUES (FROM C LIKE T, FROM D);
  UPDATE CURSOR R FROM VALUES (FROM C LIKE T, FROM D);
  CURSOR S FOR
    WITH
      cte (l, m, n, o) AS (
        VALUES (FROM C LIKE T, FROM D)
      )
    SELECT *
      FROM cte;
  FETCH S;
END;

DECLARE GROUP foo
BEGIN
  DECLARE x INT;
  CURSOR y LIKE foo;
  CURSOR y LIKE SELECT 2 AS x, "foo" AS y;
END;

@UNSUB(foo);

@UNSUB(foo);

DECLARE FUNC foo (x CURSOR) INT;

CURSOR X LIKE (x INT, y REAL, LIKE goo);

CURSOR X LIKE (x INT, y REAL, LIKE goo);

CURSOR Z LIKE foo(x, y);

OUT UNION CALL foo(a, b, c) JOIN 
  CALL bar(a, b) USING (u, v) AND
  CALL baz(1, 3) USING (x, y);

OUT UNION CALL foo(a, b, c) JOIN 
  CALL bar(a, b) USING (u, v) AND
  CALL baz(1, 3) USING (x, y) AS my_child;

@ATTRIBUTE(unary_plus_test=5)
LET x := y;

CREATE TABLE unary_plus_default_value(
  x INT DEFAULT 7
);

DECLARE PROC foo (LIKE X(-x));

SELECT NOTHING;

LET z := "abc\n123\r\n\x02lmnop''";

@KEEP_TABLE_NAME_IN_ALIASES;

[[backing_table]]
CREATE TABLE backing(
  k BLOB! PRIMARY KEY,
  v BLOB
);

@ENFORCE_STRICT UPDATE FROM;

UPDATE foo
  SET name = baz.name
  FROM bar
  INNER JOIN baz ON bar.id = baz.id
  WHERE bar.name = 'x' AND foo.id = bar.id;

[[private]]
[[potato=bar]]
[[garbonzo=(bar, baz)]]
@ATTRIBUTE(other:something)
PROC foo ()
BEGIN
END;

LET view := 5;

LET add := 7;

LET after := 9;

LET before := 11;

add := add + 1;

add += 5;

sub -= 3;

times *= 7;

div /= 3;

mod %= 32;

_or |= 7;

_and &= 12;

lshift <<= 3;

rshift >>= 3;

DECLARE FUNC stew1 NO CHECK INT!;

DECLARE FUNC stew2 NO CHECK CREATE TEXT!;

b.f[x] := g.y[x] + z[x] + ~z[y];

(NOT 'x')[5] IS "(not 'x')[5]";

NOT 'x'[5] IS "not 'x'[5]";

(a * b)[5] IS "(a*b)[5]";

a * b[5] IS "a*b[5]";

~x[5] IS "~x[5]";

(~x)[5] IS "(~x)[5]";

~foo:bar(x) IS "~foo:bar(x)";

~a.b:bar(x) IS "~a.b:bar(x)";

~a.b:bar(x) IS "~a.b:bar(x) (a.b) parens removed";

(x + y).q IS "(x+y).q";

x + y.q IS "x+y.q";

x + y.q IS "x+y.q";

foo(x).q IS "foo(x).q";

~q.r IS "~q.r";

~q.r IS "~q.r";

(~q).r IS "(~q).r";

* := *;

T.* := U.*;

foo(x).q;

(a + b).r;

foo(q).r;

(~q).r;

foo:bar().baz;

column := 1;

LET z := 1 IN ();

@ECHO c, "foobar";

DECLARE foo int;

@ENFORCE_STRICT AND OR NOT NULL CHECK;

CONST a_const_variable := 1;

UPDATE some_table
  SET (LIKE some_table(-id)) = (FROM ARGUMENTS LIKE bar, baz.one, baz.two, baz.three)
  FROM baz
  WHERE some_table.id = locals.id AND some_table.id = baz.id
  ORDER BY some_table.id
    LIMIT 1;

TRY
  LET x := 5;
CATCH
  x := 7;
END;

IF x THEN
  LET u := 5;
END;

WITH
  foo AS (
    SELECT 1 AS x, '2' AS y
  )
SELECT *
  FROM foo;

'{ "x" : 1}' -> '$.x';

'{ "x" : 1}' ->> ~INT~ '$.x';

LET list := new_builder():(5):(7.0):(1, 2):to_list();

1 + CAST(2 AS REAL);

~1 + 2;

CAST(5 AS INT);

x + CAST(y AS INT);

x:y();

@OP OBJECT<foo> : get bar AS foo_get_bar;

@OP OBJECT<foo> : get bar AS foo_get_bar;

@OP OBJECT<foo> : call zoo AS foo_zoo;

@OP INT<foo> : arrow bool<foo> AS do_int_foo_arrow;

@OP INT<foo> : arrow int<foo> AS do_int_foo_arrow;

@OP INT<foo> : arrow long<foo> AS do_int_foo_arrow;

@OP INT<foo> : arrow real<foo> AS do_int_foo_arrow;

@OP INT<foo> : arrow text<foo> AS do_int_foo_arrow;

@OP INT<foo> : arrow blob<foo> AS do_int_foo_arrow;

@OP INT<foo> : arrow object<foo> AS do_int_foo_arrow;

@OP NULL : call foo AS foo_foo;

x:glob('x');

x:like('x', 'y');

x:right('x', 'y');

x:left('x', 'y');

right('a', 'b');

CALL foo(1, 2);

@IFDEF goo
  @MACRO(STMT_LIST) c!()
  BEGIN
    foo!();
    boo!;
  END;
@ELSE
  @MACRO(STMT_LIST) c!()
  BEGIN
    foo!();
    boo!;
  END;
@ENDIF


@MACRO(STMT_LIST) test_big_all!(a! EXPR, b! QUERY_PARTS, c! SELECT_CORE, d! SELECT_EXPR, e! CTE_TABLES, f! STMT_LIST)
BEGIN
  IF a! THEN
    f!;
  ELSE
    WITH
      e!
    SELECT d!
      FROM b!
    UNION ALL
    ROWS(c!);
  END;
END;

IF 1 + 2 THEN
  LET qq := 201;
ELSE
  WITH
    f AS (
      SELECT 99
        FROM yy
    )
  SELECT 20 AS xx
    FROM (
        x
        INNER JOIN y)
  UNION ALL
  SELECT 1
    FROM foo
  UNION
  SELECT 2
    FROM bar;
END;

WITH
  X (`foo bar`) AS (
    SELECT 1 AS x
  )
SELECT *
  FROM X;

CURSOR x LIKE y;

CURSOR x LIKE (x y);

CURSOR x LIKE SELECT x AS y;

CURSOR x FOR
  SELECT 1 AS x;

FETCH x;

CURSOR x FETCH FROM CALL y();

SELECT x
  FROM x
    INNER JOIN y;

LET abort := 0;

LET action := 0;

LET alter := 0;

LET asc := 0;

LET autoincrement := 0;

LET cascade := 0;

LET create := 0;

LET default := 0;

LET deferrable := 0;

LET deferred := 0;

LET delete := 0;

LET desc := 0;

LET drop := 0;

LET encode := 0;

LET exclusive := 0;

LET explain := 0;

LET fail := 0;

LET fetch := 0;

LET following := 0;

LET groups := 0;

LET ignore := 0;

LET immediate := 0;

LET initially := 0;

LET instead := 0;

LET into := 0;

LET nulls := 0;

LET outer := 0;

LET partition := 0;

LET preceding := 0;

LET range := 0;

LET references := 0;

LET release := 0;

LET rename := 0;

LET restrict := 0;

LET savepoint := 0;

LET statement := 0;

LET table := 0;

LET temp := 0;

LET transaction := 0;

LET without := 0;

INSERT INTO foo
  VALUES (1)
  RETURNING (a, b, c);

WITH
  blah AS (
    SELECT 1 AS x
  )
INSERT INTO foo
  VALUES (1)
  RETURNING (a, b, c);

DELETE FROM jbacked WHERE id = 5
  RETURNING (id, name, age);

WITH
  a_cte AS (
    SELECT 1 AS x
  )
DELETE FROM jbacked WHERE id IN (SELECT *
  FROM a_cte)
  RETURNING (id, name, age);

UPDATE jbacked
  SET id = 7
  WHERE id = 5
  RETURNING (id, name, age);

WITH
  a_cte AS (
    SELECT 1 AS x
  )
UPDATE jbacked
  SET id = 7
  WHERE id = 5
  RETURNING (id, name, age);

CURSOR C FOR
  UPDATE jbacked
    SET id = 5
    WHERE 1;

CREATE TABLE `a table`(
  `col 1` INT,
  `col 2` INT
);

INSERT INTO `a table`(id)
  VALUES (1, 2)
ON CONFLICT (`col 1`)
WHERE `col 2` = 1 
DO UPDATE
  SET `col 1` = `col 2`
  RETURNING (`col 1`, `col 2`);

CURSOR C FOR
  INSERT INTO `a table`(id)
    VALUES (1, 2)
  ON CONFLICT (`col 1`)
  WHERE `col 2` = 1 
  DO UPDATE
    SET `col 1` = `col 2`
    RETURNING (`col 1`, `col 2`);

CURSOR C FOR
  INSERT INTO `a table`(id)
    VALUES (1, 2)
  ON CONFLICT (`col 1`)
  WHERE `col 2` = 1 
  DO UPDATE
    SET `col 1` = `col 2`;
