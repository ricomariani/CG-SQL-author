
DECLARE PROC test (i INT!);
DECLARE PROC proc_with_return_guard (a INT);
DECLARE PROC out_test (OUT i INT!, OUT ii INT);
DECLARE PROC outparm_test (OUT foo INT!) USING TRANSACTION;
DECLARE PROC throwing () USING TRANSACTION;
DECLARE PROC with_result_set () (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC select_from_view () (id INT!, type INT);
DECLARE PROC make_view () USING TRANSACTION;
DECLARE PROC make_index () USING TRANSACTION;
DECLARE PROC get_data (name_ TEXT!, id_ INT!) (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC easy_fetch () USING TRANSACTION;
DECLARE PROC copy_int (a INT, OUT b INT);
DECLARE PROC insert_rowid_reader () USING TRANSACTION;
DECLARE PROC changes_reader () USING TRANSACTION;
DECLARE PROC xyzzy_test () USING TRANSACTION;
DECLARE PROC complex_return () (_bool BOOL!, _int INT!, _longint LONG!, _real REAL!, _text TEXT!, _nullable_bool BOOL);
DECLARE PROC hierarchical_query (rate_ LONG!, limit_ INT!, offset_ INT!) (id INT!);
DECLARE PROC hierarchical_unmatched_query (rate_ LONG!, limit_ INT!, offset_ INT!) (id INT!);
DECLARE PROC union_select () (A INT!);
DECLARE PROC union_all_select () (A INT!);
DECLARE PROC union_all_with_nullable () (name TEXT);
DECLARE PROC with_stmt_using_cursor () USING TRANSACTION;
DECLARE PROC with_stmt () (a INT!, b INT!, c INT!);
DECLARE PROC with_recursive_stmt () (a INT!, b INT!, c INT!);
DECLARE PROC parent_proc () (one INT!, two INT!, three INT!);
DECLARE PROC parent_proc_child () (four INT!, five INT!, six INT!);
DECLARE PROC outint_nullable (OUT output INT, OUT result BOOL!) USING TRANSACTION;
DECLARE PROC outint_notnull (OUT output INT!, OUT result BOOL!) USING TRANSACTION;
DECLARE PROC obj_proc (OUT an_object OBJECT);
DECLARE PROC cursor_with_object (object_ OBJECT) OUT (object_ OBJECT);
DECLARE PROC unused_temp (i INT, OUT o INT!);
DECLARE PROC echo_test ();
DECLARE PROC insert_values (id_ INT!, type_ INT) USING TRANSACTION;
DECLARE PROC alter_table_test () USING TRANSACTION;
DECLARE PROC drop_table_test () USING TRANSACTION;
DECLARE PROC uses_proc_for_result () (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC index_dropper () USING TRANSACTION;
DECLARE PROC misc_dml_proc () USING TRANSACTION;
DECLARE PROC dummy_user () USING TRANSACTION;
DECLARE PROC proc_with_out_arg (OUT foo TEXT);
DECLARE PROC calls_out_proc (OUT foo TEXT);
DECLARE PROC blob_proc (OUT a_blob BLOB);
DECLARE PROC blob_returner () (blob_id INT!, b_notnull BLOB!, b_nullable BLOB);
DECLARE PROC voidproc ();
DECLARE PROC out_cursor_proc () OUT (id INT!, name TEXT, rate LONG, type INT, size REAL, extra1 TEXT!, extra2 TEXT!) USING TRANSACTION;
DECLARE PROC read_cursor_proc () USING TRANSACTION;
DECLARE PROC declare_cursor_then_fetch_from_proc () USING TRANSACTION;
DECLARE PROC dml_user (OUT a_ INT!) USING TRANSACTION;
DECLARE PROC thread_theme_info_list (thread_key_ LONG!) (thread_key LONG!);
DECLARE PROC fetch_values_dummy ();
DECLARE PROC fetch_values_extended ();
DECLARE PROC c_literal (OUT x TEXT);
DECLARE PROC no_cleanup_label_needed_proc () USING TRANSACTION;
DECLARE PROC no_code_after_catch () USING TRANSACTION;
DECLARE PROC out_no_db () OUT (A INT!, B REAL!);
DECLARE PROC declare_cursor_like_cursor () OUT (A INT!, B REAL!);
DECLARE PROC declare_cursor_like_proc () OUT (a INT, b TEXT);
DECLARE PROC declare_cursor_like_table () OUT (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC declare_cursor_like_view () OUT (f1 INT!, f2 INT!, f3 INT!);
DECLARE PROC weird_quoting () USING TRANSACTION;
DECLARE PROC long_auto_table_maker () USING TRANSACTION;
DECLARE PROC blob_call1 ();
DECLARE PROC blob_call2 ();
DECLARE PROC blob_no_else ();
DECLARE PROC with_inserter () USING TRANSACTION;
DECLARE PROC multi_rewrite (blob_id_ INT!, b_notnull_ BLOB!, b_nullable_ BLOB, id_ INT!, name_ TEXT, rate_ LONG, type_ INT, size_ REAL, OUT out_arg INT!) USING TRANSACTION;
DECLARE PROC fetch_to_cursor_from_cursor () OUT (A INT!, B TEXT!);
DECLARE PROC loop_statement_cursor () USING TRANSACTION;
DECLARE PROC loop_statement_not_auto_cursor () USING TRANSACTION;
DECLARE PROC simple_select () (x INT!);
DECLARE PROC call_in_loop () USING TRANSACTION;
DECLARE PROC call_in_loop_with_nullable_condition () USING TRANSACTION;
DECLARE PROC call_in_loop_boxed () USING TRANSACTION;
DECLARE PROC out_union_helper () OUT UNION (x INT!);
DECLARE PROC out_union_dml_helper () OUT UNION (x INT!) USING TRANSACTION;
DECLARE PROC call_out_union_in_loop () USING TRANSACTION;
DECLARE PROC forward_out_union () OUT UNION (x INT!);
DECLARE PROC forward_out_union_extern () OUT UNION (x INT!);
DECLARE PROC forward_out_union_dml () OUT UNION (x INT!) USING TRANSACTION;
DECLARE PROC make_trigger () USING TRANSACTION;
DECLARE PROC is_test ();
DECLARE PROC is_blob ();
DECLARE PROC is_not_test ();
DECLARE PROC in_test (x INT, OUT b BOOL);
DECLARE PROC not_in_test (x INT, OUT b BOOL);
DECLARE PROC drop_trigger_test () USING TRANSACTION;
DECLARE PROC simple_identity () (id INT!, data INT!);
DECLARE PROC complex_identity () (col1 INT!, col2 INT!, data INT!);
DECLARE PROC out_cursor_identity () OUT (id INT!, data INT!) USING TRANSACTION;
DECLARE PROC radioactive_proc () (id INT!, data TEXT @SENSITIVE);
DECLARE PROC with_deleter () USING TRANSACTION;
DECLARE PROC with_updater () USING TRANSACTION;
DECLARE PROC autodropper () (a INT!, b INT!);
DECLARE PROC simple_cursor_proc () OUT (id INT!);
DECLARE PROC redundant_cast () (plugh INT!, five INT!);
DECLARE PROC view_creator () USING TRANSACTION;
DECLARE PROC settings_info () USING TRANSACTION;
DECLARE PROC top_level_select_alias_unused () (id INT!, x INT!);
DECLARE PROC top_level_select_alias_used_in_orderby () (id INT!, x INT!);
DECLARE PROC use_with_select () USING TRANSACTION;
DECLARE PROC rowset_object_reader (rowset OBJECT<rowset>) USING TRANSACTION;
DECLARE PROC upsert_do_something () USING TRANSACTION;
DECLARE PROC with_upsert_form () USING TRANSACTION;
DECLARE PROC upsert_do_nothing (id_ INT!) USING TRANSACTION;
DECLARE PROC use_many_out_cursors () USING TRANSACTION;
DECLARE PROC fetch_many_times (arg BOOL!) USING TRANSACTION;
DECLARE PROC out_union_two () OUT UNION (x INT!, y TEXT!);
DECLARE PROC out_union_reader () USING TRANSACTION;
DECLARE PROC out_union_from_select () OUT UNION (x INT!, y TEXT!) USING TRANSACTION;
DECLARE PROC out_union_dml_reader () USING TRANSACTION;
DECLARE PROC out_union_values (a INT!, b INT!) OUT UNION (x INT!, y INT!);
DECLARE PROC read_out_union_values (a INT!, b INT!) USING TRANSACTION;
DECLARE PROC out_union_dml () OUT UNION (id INT!, data TEXT @SENSITIVE) USING TRANSACTION;
DECLARE PROC out_union_dml_for_call () USING TRANSACTION;
DECLARE PROC compound_select_expr () USING TRANSACTION;
DECLARE PROC window_function_invocation () (id INT!, row_num INT!);
DECLARE PROC update_cursor () USING TRANSACTION;
DECLARE PROC use_return () (x INT!);
DECLARE PROC use_return_no_error_flow ();
DECLARE PROC empty_proc ();
DECLARE PROC empty_blocks () USING TRANSACTION;
DECLARE PROC tail_catch () USING TRANSACTION;
DECLARE PROC pretty_print_with_quote () USING TRANSACTION;
DECLARE PROC hex_quote () USING TRANSACTION;
DECLARE PROC lotsa_columns_no_getters () (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC sproc_with_copy () (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC emit_object_with_setters (o OBJECT!, x OBJECT!, i INT!, l LONG!, b BOOL!, d REAL!, t TEXT!, bl BLOB!) OUT (o OBJECT!, x OBJECT!, i INT!, l LONG!, b BOOL!, d REAL!, t TEXT!, bl BLOB!);
DECLARE PROC emit_setters_with_nullables (o OBJECT, x OBJECT, i INT, l LONG, b BOOL, d REAL, t TEXT, bl BLOB) OUT (o OBJECT, x OBJECT, i INT, l LONG, b BOOL, d REAL, t TEXT, bl BLOB);
DECLARE PROC no_out_with_setters () (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC lotsa_columns_no_result_set () (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC early_out_rc_cleared (OUT x INT) USING TRANSACTION;
DECLARE PROC vault_sensitive_with_values_proc () (id INT!, name TEXT @SENSITIVE, title TEXT, type LONG @SENSITIVE);
DECLARE PROC vault_not_nullable_sensitive_with_values_proc () (id INT!, name TEXT! @SENSITIVE, title TEXT!, type LONG! @SENSITIVE);
DECLARE PROC vault_sensitive_with_no_values_proc () (id INT!, name TEXT @SENSITIVE, title TEXT, type LONG @SENSITIVE);
DECLARE PROC vault_union_all_table_proc () (id INT!, name TEXT @SENSITIVE, title TEXT, type LONG @SENSITIVE);
DECLARE PROC vault_alias_column_proc () (alias_name TEXT @SENSITIVE);
DECLARE PROC vault_alias_column_name_proc () (alias_name TEXT @SENSITIVE);
DECLARE PROC vault_cursor_proc () USING TRANSACTION;
DECLARE PROC vault_sensitive_with_context_and_sensitive_columns_proc () (id INT!, name TEXT @SENSITIVE, title TEXT, type LONG @SENSITIVE);
DECLARE PROC vault_sensitive_with_no_context_and_sensitive_columns_proc () (id INT!, name TEXT @SENSITIVE, title TEXT, type LONG @SENSITIVE);
DECLARE PROC vault_sensitive_with_context_and_no_sensitive_columns_proc () (id INT!, name TEXT, title TEXT, type LONG);
DECLARE PROC try_boxing (OUT result OBJECT<bar CURSOR>) USING TRANSACTION;
DECLARE PROC try_unboxing (boxed_cursor OBJECT<bar CURSOR>) USING TRANSACTION;
DECLARE PROC local_cast_int_notnull ();
DECLARE PROC local_cast_int ();
DECLARE PROC local_cast_long_notnull ();
DECLARE PROC local_cast_long ();
DECLARE PROC local_cast_real_notnull ();
DECLARE PROC local_cast_real ();
DECLARE PROC local_cast_bool_notnull ();
DECLARE PROC local_cast_bool ();
DECLARE PROC local_cast_from_bool_notnull ();
DECLARE PROC local_cast_from_bool ();
DECLARE PROC local_cast_from_bool_no_op_notnull ();
DECLARE PROC local_cast_from_bool_no_op ();
DECLARE PROC base_proc_savepoint () USING TRANSACTION;
DECLARE PROC base_proc_savepoint_commit_return () USING TRANSACTION;
DECLARE PROC base_proc_savepoint_rollback_return () USING TRANSACTION;
DECLARE PROC window1 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window2 () (month INT, amount REAL, RunningTotal REAL);
DECLARE PROC window3 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window4 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window5 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window6 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window7 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window8 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window9 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window10 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window11 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window12 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window13 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window14 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window15 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC window16 () (month INT, amount REAL, SalesMovingAverage REAL);
DECLARE PROC emit_rc (OUT result_code INT!) USING TRANSACTION;
DECLARE PROC rc_test () USING TRANSACTION;
DECLARE PROC rc_test_lazy1 () USING TRANSACTION;
DECLARE PROC rc_test_lazy2 () USING TRANSACTION;
DECLARE PROC virtual_table_creator () USING TRANSACTION;
DECLARE PROC out_arg_cursor (x INT!, OUT y INT!);
DECLARE PROC make_virt_table () USING TRANSACTION;
DECLARE PROC virtual1 () (vx INT!, vy INT, vz INT!);
DECLARE PROC virtual2 () (vx INT!, vy INT, vz INT!);
DECLARE PROC proc_with_alt_prefix (OUT x INT);
DECLARE PROC use_private_out_union () USING TRANSACTION;
DECLARE PROC no_getters_out_union () OUT UNION (a_field INT!);
DECLARE PROC use_no_getters_out_union () USING TRANSACTION;
DECLARE PROC suppress_results_out_union () OUT UNION (a_field INT!);
DECLARE PROC use_suppress_results_out_union () USING TRANSACTION;
DECLARE PROC set_out_arg_ref_test (OUT x TEXT);
DECLARE PROC set_out_arg_null_test (OUT x INT);
DECLARE PROC set_out_arg_notnull_test (OUT x INT!);
DECLARE PROC early_close_cursor () USING TRANSACTION;
DECLARE PROC various_lets ();
DECLARE PROC try_catch_rc () USING TRANSACTION;
DECLARE PROC out_decl_test (x INT);
DECLARE PROC out_decl_loop_test (x INT);
DECLARE PROC binary_ops_with_null ();
DECLARE PROC uses_throw () USING TRANSACTION;
DECLARE PROC uses_ifnull_throw (x INT) USING TRANSACTION;
DECLARE PROC out_object (o OBJECT!) OUT (o OBJECT!);
DECLARE PROC exercise_contracts (a INT, b INT!, c TEXT, d TEXT!, e BLOB, f BLOB!, g OBJECT, h OBJECT!, OUT i INT, OUT j INT!, OUT k TEXT, OUT l TEXT!, INOUT m INT, INOUT n INT!, INOUT o TEXT, INOUT p TEXT!);
DECLARE PROC public_proc_with_a_contract (t TEXT!);
DECLARE PROC result_set_proc_with_contract_in_fetch_results (t TEXT!) (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC out_proc_with_contract_in_fetch_results (t TEXT!) OUT (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC nullability_improvements_are_erased_for_sql () (b INT!);
DECLARE PROC nullability_improvements_do_not_change_access ();
DECLARE PROC BigFormat () USING TRANSACTION;
DECLARE PROC ltor_proc_int_not_null (a INT!, b INT!, OUT c INT!);
DECLARE PROC ltor_proc_int (a INT, b INT, OUT c INT);
DECLARE PROC ltor_proc_text_not_null (a TEXT!, b TEXT!, OUT c TEXT!);
DECLARE PROC ltor_proc_text (a TEXT, b TEXT, OUT c TEXT);
DECLARE PROC arguments_are_evaluated_left_to_right ();
DECLARE PROC f1 (OUT x INT!);
DECLARE PROC f2 (OUT x INT);
DECLARE PROC f3 (y INT, OUT x INT);
DECLARE PROC multi_call_temp_reuse ();
DECLARE PROC sensitive_function_is_a_no_op () (y TEXT! @SENSITIVE);
DECLARE PROC and_preserves_temps (a LONG, b LONG, c LONG);
DECLARE PROC or_preserves_temps (a LONG, b LONG, c LONG);
DECLARE PROC foo () (shared_something INT!);
DECLARE PROC shared_conditional_user (x INT!) (id INT!, name TEXT, rate LONG, type INT, size REAL);
DECLARE PROC nested_shared_stuff () (x INT!);
DECLARE PROC use_nested_select_shared_frag_form () (x INT!);
DECLARE PROC shared_frag_else_nothing_test () (id INT!);
DECLARE PROC shared_frag_else_nothing_in_from_clause_test () (id1 INT, text1 TEXT!);
DECLARE PROC slash_star_and_star_slash ();
DECLARE PROC blob_serialization_test () USING TRANSACTION;
DECLARE PROC deserialize_func () USING TRANSACTION;
DECLARE PROC bigstuff ();
DECLARE PROC use_gr_cursor_for_serialization (OUT b BLOB<structured_storage>!) USING TRANSACTION;
DECLARE PROC mutated_in_param_ref (x TEXT);
DECLARE PROC some_redeclared_out_proc () OUT (x INT) USING TRANSACTION;
DECLARE PROC some_redeclared_out_union_proc () OUT UNION (x INT) USING TRANSACTION;
DECLARE PROC external_cursor_caller ();
DECLARE PROC clobber1 (INOUT x TEXT);
DECLARE PROC clobber2 (OUT x TEXT);
DECLARE PROC mutated_in_arg1 (x TEXT);
DECLARE PROC mutated_in_arg2 (x TEXT);
DECLARE PROC mutated_in_arg3 (x TEXT) USING TRANSACTION;
DECLARE PROC mutated_not_null (x TEXT!);
DECLARE PROC a_proc_we_need () (id INT, t TEXT);
DECLARE PROC a_proc_that_needs_dependents () OUT UNION (a_foo OBJECT<a_proc_we_need SET>, another_foo OBJECT<a_proc_we_need SET>) USING TRANSACTION;
DECLARE PROC another_proc_that_needs_dependents (a_foo OBJECT<a_proc_we_need SET>);
DECLARE PROC simple_child_proc () (x INT!, y INT!);
DECLARE PROC simple_container_proc () OUT UNION (a INT, b INT!, c OBJECT<simple_child_proc SET>) USING TRANSACTION;
DECLARE PROC use_cql_blob_get_backed () USING TRANSACTION;
DECLARE PROC use_cql_blob_get_backed2 () USING TRANSACTION;
DECLARE PROC insert_into_backed2 () USING TRANSACTION;
DECLARE PROC update_backed2 () USING TRANSACTION;
DECLARE PROC use_generated_fragment () (rowid LONG!, flag BOOL!, id LONG, name TEXT, age REAL, storage BLOB, pk INT!);
DECLARE PROC use_backed_table_directly () (rowid LONG!, flag BOOL!, id LONG, name TEXT, age REAL, storage BLOB, pk INT!);
DECLARE PROC use_backed_table_with_cursor () USING TRANSACTION;
DECLARE PROC use_backed_table_directly_in_with_select () (rowid LONG!, flag BOOL!, id LONG, name TEXT, age REAL, storage BLOB, pk INT!);
DECLARE PROC use_backed_table_with_select_and_cursor () USING TRANSACTION;
DECLARE PROC use_backed_table_select_expr (OUT x BOOL!) USING TRANSACTION;
DECLARE PROC use_backed_table_select_expr_value_offsets (OUT x BOOL!) USING TRANSACTION;
DECLARE PROC insert_backed_values () USING TRANSACTION;
DECLARE PROC insert_backed_values_using_with () USING TRANSACTION;
DECLARE PROC insert_backed_values_using_form () USING TRANSACTION;
DECLARE PROC inserted_backed_from_select () USING TRANSACTION;
DECLARE PROC delete_from_backed () USING TRANSACTION;
DECLARE PROC delete_from_backed_no_where_clause () USING TRANSACTION;
DECLARE PROC test_blob_update_expand () USING TRANSACTION;
DECLARE PROC test_blob_insert_key_codes () USING TRANSACTION;
DECLARE PROC test_blob_insert_val_offsets () USING TRANSACTION;
DECLARE PROC update_backed_set_value () USING TRANSACTION;
DECLARE PROC update_backed_with_clause () USING TRANSACTION;
DECLARE PROC update_backed_set_key () USING TRANSACTION;
DECLARE PROC update_backed_set_both () USING TRANSACTION;
DECLARE PROC stmt_in_loop () USING TRANSACTION;
DECLARE PROC cursor_in_loop () USING TRANSACTION;
DECLARE PROC select_in_loop () USING TRANSACTION;
DECLARE PROC select_if_nothing_in_loop () USING TRANSACTION;
DECLARE PROC select_if_nothing_or_null_in_loop () USING TRANSACTION;
DECLARE PROC my_proc_check_type () USING TRANSACTION;
DECLARE PROC no_check_func_calls (OUT result TEXT!);
DECLARE PROC qid_t0 () USING TRANSACTION;
DECLARE PROC qid_t1 () USING TRANSACTION;
DECLARE PROC qid_t2 () USING TRANSACTION;
DECLARE PROC qid_t3 () USING TRANSACTION;
DECLARE PROC qid_t4a ();
DECLARE PROC qid_t4b ();
DECLARE PROC qid_t5 () USING TRANSACTION;
DECLARE PROC qid_t6 () USING TRANSACTION;
DECLARE PROC declare_constant_variable ();
DECLARE PROC jdata_dml_select () USING TRANSACTION;
DECLARE PROC jdata_dml_insert () USING TRANSACTION;
DECLARE PROC jdata_dml_update () USING TRANSACTION;
DECLARE PROC a_dml_delete () USING TRANSACTION;
DECLARE PROC a_backed_join () (jname TEXT!, jage INT, bname TEXT);
DECLARE PROC end_proc ();
