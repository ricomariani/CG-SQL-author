
#include "out/cg_test_c_globals.h"

#ifndef _MSC_VER
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunknown-warning-option"
#pragma clang diagnostic ignored "-Wbitwise-op-parentheses"
#pragma clang diagnostic ignored "-Wshift-op-parentheses"
#pragma clang diagnostic ignored "-Wlogical-not-parentheses"
#pragma clang diagnostic ignored "-Wlogical-op-parentheses"
#pragma clang diagnostic ignored "-Wliteral-conversion"
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#pragma clang diagnostic ignored "-Wunused-function"
#endif
extern cql_object_ref _Nonnull cql_partition_create(void);
extern cql_bool cql_partition_cursor(cql_object_ref _Nonnull p, cql_dynamic_cursor *_Nonnull key, cql_dynamic_cursor *_Nonnull value);
extern cql_object_ref _Nonnull cql_extract_partition(cql_object_ref _Nonnull p, cql_dynamic_cursor *_Nonnull key);
extern cql_object_ref _Nonnull cql_string_dictionary_create(void);
extern cql_bool cql_string_dictionary_add(cql_object_ref _Nonnull dict, cql_string_ref _Nonnull key, cql_string_ref _Nonnull value);
extern cql_string_ref _Nullable cql_string_dictionary_find(cql_object_ref _Nonnull dict, cql_string_ref _Nullable key);
extern cql_object_ref _Nonnull cql_long_dictionary_create(void);
extern cql_bool cql_long_dictionary_add(cql_object_ref _Nonnull dict, cql_string_ref _Nonnull key, cql_int64 value);
extern cql_nullable_int64 cql_long_dictionary_find(cql_object_ref _Nonnull dict, cql_string_ref _Nullable key);
extern cql_object_ref _Nonnull cql_real_dictionary_create(void);
extern cql_bool cql_real_dictionary_add(cql_object_ref _Nonnull dict, cql_string_ref _Nonnull key, cql_double value);
extern cql_nullable_double cql_real_dictionary_find(cql_object_ref _Nonnull dict, cql_string_ref _Nullable key);
extern cql_object_ref _Nonnull cql_object_dictionary_create(void);
extern cql_bool cql_object_dictionary_add(cql_object_ref _Nonnull dict, cql_string_ref _Nonnull key, cql_object_ref _Nonnull value);
extern cql_object_ref _Nullable cql_object_dictionary_find(cql_object_ref _Nonnull dict, cql_string_ref _Nullable key);
extern cql_object_ref _Nonnull cql_blob_dictionary_create(void);
extern cql_bool cql_blob_dictionary_add(cql_object_ref _Nonnull dict, cql_string_ref _Nonnull key, cql_blob_ref _Nonnull value);
extern cql_blob_ref _Nullable cql_blob_dictionary_find(cql_object_ref _Nonnull dict, cql_string_ref _Nullable key);
extern cql_string_ref _Nonnull cql_cursor_format(cql_dynamic_cursor *_Nonnull C);
extern cql_int64 cql_cursor_hash(cql_dynamic_cursor *_Nonnull C);
extern cql_bool cql_cursors_equal(cql_dynamic_cursor *_Nonnull l, cql_dynamic_cursor *_Nonnull r);
extern cql_string_ref _Nullable cql_cursor_diff_col(cql_dynamic_cursor *_Nonnull l, cql_dynamic_cursor *_Nonnull r);
extern cql_string_ref _Nullable cql_cursor_diff_val(cql_dynamic_cursor *_Nonnull l, cql_dynamic_cursor *_Nonnull r);
extern cql_object_ref _Nonnull cql_box_int(cql_nullable_int32 x);
extern cql_nullable_int32 cql_unbox_int(cql_object_ref _Nullable box);
extern cql_object_ref _Nonnull cql_box_real(cql_nullable_double x);
extern cql_nullable_double cql_unbox_real(cql_object_ref _Nullable box);
extern cql_object_ref _Nonnull cql_box_bool(cql_nullable_bool x);
extern cql_nullable_bool cql_unbox_bool(cql_object_ref _Nullable box);
extern cql_object_ref _Nonnull cql_box_long(cql_nullable_int64 x);
extern cql_nullable_int64 cql_unbox_long(cql_object_ref _Nullable box);
extern cql_object_ref _Nonnull cql_box_text(cql_string_ref _Nullable x);
extern cql_string_ref _Nullable cql_unbox_text(cql_object_ref _Nullable box);
extern cql_object_ref _Nonnull cql_box_blob(cql_blob_ref _Nullable x);
extern cql_blob_ref _Nullable cql_unbox_blob(cql_object_ref _Nullable box);
extern cql_object_ref _Nonnull cql_box_object(cql_object_ref _Nullable x);
extern cql_object_ref _Nullable cql_unbox_object(cql_object_ref _Nullable box);
extern cql_int32 cql_box_get_type(cql_object_ref _Nullable box);
extern cql_object_ref _Nonnull cql_string_list_create(void);
extern cql_object_ref _Nonnull cql_string_list_set_at(cql_object_ref _Nonnull list, cql_int32 index_, cql_string_ref _Nonnull value_);
extern cql_string_ref _Nullable cql_string_list_get_at(cql_object_ref _Nonnull list, cql_int32 index_);
extern cql_int32 cql_string_list_count(cql_object_ref _Nonnull list);
extern cql_object_ref _Nonnull cql_string_list_add(cql_object_ref _Nonnull list, cql_string_ref _Nonnull string);
extern cql_object_ref _Nonnull cql_blob_list_create(void);
extern cql_object_ref _Nonnull cql_blob_list_set_at(cql_object_ref _Nonnull list, cql_int32 index_, cql_blob_ref _Nonnull value_);
extern cql_blob_ref _Nullable cql_blob_list_get_at(cql_object_ref _Nonnull list, cql_int32 index_);
extern cql_int32 cql_blob_list_count(cql_object_ref _Nonnull list);
extern cql_object_ref _Nonnull cql_blob_list_add(cql_object_ref _Nonnull list, cql_blob_ref _Nonnull value);
extern cql_object_ref _Nonnull cql_long_list_create(void);
extern cql_object_ref _Nonnull cql_long_list_set_at(cql_object_ref _Nonnull list, cql_int32 index_, cql_int64 value_);
extern cql_int64 cql_long_list_get_at(cql_object_ref _Nonnull list, cql_int32 index_);
extern cql_int32 cql_long_list_count(cql_object_ref _Nonnull list);
extern cql_object_ref _Nonnull cql_long_list_add(cql_object_ref _Nonnull list, cql_int64 value_);
extern cql_object_ref _Nonnull cql_real_list_create(void);
extern cql_object_ref _Nonnull cql_real_list_set_at(cql_object_ref _Nonnull list, cql_int32 index_, cql_double value_);
extern cql_double cql_real_list_get_at(cql_object_ref _Nonnull list, cql_int32 index_);
extern cql_int32 cql_real_list_count(cql_object_ref _Nonnull list);
extern cql_object_ref _Nonnull cql_real_list_add(cql_object_ref _Nonnull list, cql_double value_);
extern cql_int32 cql_cursor_column_count(cql_dynamic_cursor *_Nonnull C);
extern cql_int32 cql_cursor_column_type(cql_dynamic_cursor *_Nonnull C, cql_int32 icol);
extern cql_string_ref _Nullable cql_cursor_column_name(cql_dynamic_cursor *_Nonnull C, cql_int32 icol);
extern cql_nullable_bool cql_cursor_get_bool(cql_dynamic_cursor *_Nonnull C, cql_int32 icol);
extern cql_nullable_int32 cql_cursor_get_int(cql_dynamic_cursor *_Nonnull C, cql_int32 icol);
extern cql_nullable_int64 cql_cursor_get_long(cql_dynamic_cursor *_Nonnull C, cql_int32 icol);
extern cql_nullable_double cql_cursor_get_real(cql_dynamic_cursor *_Nonnull C, cql_int32 icol);
extern cql_string_ref _Nullable cql_cursor_get_text(cql_dynamic_cursor *_Nonnull C, cql_int32 icol);
extern cql_blob_ref _Nullable cql_cursor_get_blob(cql_dynamic_cursor *_Nonnull C, cql_int32 icol);
extern cql_object_ref _Nullable cql_cursor_get_object(cql_dynamic_cursor *_Nonnull C, cql_int32 icol);
extern CQL_WARN_UNUSED cql_code cql_throw(sqlite3 *_Nonnull _db_, cql_int32 code);

extern CQL_WARN_UNUSED cql_code cql_cursor_to_blob(sqlite3 *_Nonnull _db_, cql_dynamic_cursor *_Nonnull C, cql_blob_ref _Nullable *_Nonnull result);

extern CQL_WARN_UNUSED cql_code cql_cursor_from_blob(sqlite3 *_Nonnull _db_, cql_dynamic_cursor *_Nonnull C, cql_blob_ref _Nullable b);

extern cql_blob_ref _Nonnull cql_blob_from_int(cql_string_ref _Nullable prefix, cql_int32 val);

// The statement ending at line XXXX

// The statement ending at line XXXX

#define serialized_cursor_refs_offset cql_offsetof(serialized_cursor_row, t) // count = 1

// The statement ending at line XXXX

/*
[[builtin]]
DECLARE PROC cql_throw (code INT!) USING TRANSACTION;
*/

// The statement ending at line XXXX

/*
[[builtin]]
DECLARE PROC cql_cursor_to_blob (C CURSOR, OUT result BLOB!) USING TRANSACTION;
*/

// The statement ending at line XXXX

/*
[[builtin]]
DECLARE PROC cql_cursor_from_blob (C CURSOR, b BLOB) USING TRANSACTION;
*/

// The statement ending at line XXXX

// The statement ending at line XXXX

/*
PROC p (x BLOB<blobshape>!)
BEGIN
  CALL cql_cursor_from_blob(serialized_cursor, x);
END;
*/

#define _PROC_ "p"
/*
export:
DECLARE PROC p (x BLOB<blobshape>!) USING TRANSACTION;
*/
CQL_WARN_UNUSED cql_code p(sqlite3 *_Nonnull _db_, cql_blob_ref _Nonnull x) {
  cql_contract_argument_notnull((void *)x, 1);

  cql_code _rc_ = SQLITE_OK;
  cql_error_prepare();

  _rc_ = cql_cursor_from_blob(_db_, &serialized_cursor_dyn, x);
  if (_rc_ != SQLITE_OK) { cql_error_trace(); goto cql_cleanup; }
  _rc_ = SQLITE_OK;

cql_cleanup:
  cql_error_report();
  return _rc_;
}
#undef _PROC_

// The statement ending at line XXXX
c_row c = { 0 };
cql_nullable_int32 x = { .is_null = 1 };
serialized_cursor_row serialized_cursor = { ._refs_count_ = 1, ._refs_offset_ = serialized_cursor_refs_offset };

cql_uint16 serialized_cursor_cols[] = { 2,
  cql_offsetof(serialized_cursor_row, id),
  cql_offsetof(serialized_cursor_row, t)
};

uint8_t serialized_cursor_data_types[] = {
  CQL_DATA_TYPE_INT32 | CQL_DATA_TYPE_NOT_NULL,
  CQL_DATA_TYPE_STRING
};
const char *serialized_cursor_fields[] = {
  "id",
  "t",
};
cql_dynamic_cursor serialized_cursor_dyn = {
  .cursor_data = (void *)&serialized_cursor,
  .cursor_has_row = (void *)&serialized_cursor._has_row_,
  .cursor_data_types = serialized_cursor_data_types,
  .cursor_col_offsets = serialized_cursor_cols,
  .cursor_size = sizeof(serialized_cursor),
  .cursor_fields = serialized_cursor_fields,
  .cursor_refs_count = 1,
  .cursor_refs_offset = serialized_cursor_refs_offset,
};
#pragma clang diagnostic pop
