
CREATE TABLE [quoted foo](
  [an id] INTEGER PRIMARY KEY,
  rate LONG_INT,
  [rate 2] LONG_INT,
  [id 2] INTEGER DEFAULT 12345,
  name TEXT,
  name_2 TEXT
);

CREATE TABLE added_table(
  [an id] INTEGER NOT NULL,
  name1 TEXT,
  name2 TEXT
);

CREATE TABLE g1(
  [an id] INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE [use g1](
  [an id] INTEGER PRIMARY KEY REFERENCES g1 ([an id]),
  name2 TEXT
);

CREATE TABLE table2(
  [an id] INTEGER NOT NULL REFERENCES [quoted foo] ([an id]),
  name1 TEXT,
  name2 TEXT,
  name3 TEXT,
  name4 TEXT
);

CREATE TABLE other_table(
  [an id] INTEGER
);

CREATE TABLE table_to_recreate(
  [an id] INTEGER NOT NULL,
  name TEXT
);

CREATE TABLE grouped_table_1(
  [an id] INTEGER NOT NULL,
  name TEXT
);

CREATE TABLE grouped_table_2(
  [an id] INTEGER NOT NULL,
  name TEXT
);

CREATE TABLE grouped_table_3(
  [an id] INTEGER NOT NULL,
  name TEXT
);

CREATE TABLE t5(
  [an id] INTEGER PRIMARY KEY AUTOINCREMENT,
  data TEXT
);

CREATE TABLE t6(
  [an id] LONG_INT PRIMARY KEY,
  FOREIGN KEY ([an id]) REFERENCES t5 ([an id]) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE VIRTUAL TABLE a_virtual_table USING a_module (this, that, the_other);

CREATE VIRTUAL TABLE epon USING epon;

CREATE VIRTUAL TABLE complex_virtual_table USING a_module (
  [an id] INTEGER,
  t TEXT);

CREATE VIRTUAL TABLE deleted_virtual_table USING a_module (
  [an id] INTEGER,
  t TEXT);

CREATE TABLE [migrated from recreate](
  [an id] INTEGER PRIMARY KEY,
  t TEXT
);

CREATE TABLE migrated_from_recreate2(
  [an id] INTEGER PRIMARY KEY REFERENCES [migrated from recreate] ([an id]),
  t TEXT
);

CREATE TABLE conflict_clause_t(
  [an id] INTEGER NOT NULL ON CONFLICT FAIL
);

CREATE TABLE conflict_clause_pk(
  [an id] INTEGER NOT NULL,
  CONSTRAINT [pk 1] PRIMARY KEY ([an id]) ON CONFLICT ROLLBACK
);

CREATE TABLE expression_pk(
  [an id] INTEGER NOT NULL,
  CONSTRAINT [pk 1] PRIMARY KEY ([an id] / 2, [an id] % 2)
);

CREATE TABLE expression_uk(
  [an id] INTEGER NOT NULL,
  CONSTRAINT uk1 UNIQUE ([an id] / 2, [an id] % 2)
);

CREATE TABLE delete__second(
  [an id] INTEGER PRIMARY KEY
);

CREATE TABLE delete_first(
  [an id] INTEGER REFERENCES delete__second ([an id])
);

CREATE TABLE [create first](
  [an id] INTEGER PRIMARY KEY
);

CREATE TABLE create_second(
  [an id] INTEGER REFERENCES [create first] ([an id])
);

CREATE TABLE unsub_recreated(
  anything TEXT
);

CREATE TABLE backing(
  k BLOB PRIMARY KEY,
  v BLOB NOT NULL
);

CREATE TABLE recreate_backing(
  k BLOB PRIMARY KEY,
  v BLOB NOT NULL
);

CREATE TABLE after_backed_table(
  x INTEGER PRIMARY KEY
);

CREATE TABLE unsub_voyage(
  v1 INTEGER,
  v3 TEXT,
  v5 TEXT,
  v7 TEXT
);

CREATE TABLE unsub_inner(
  [an id] INTEGER PRIMARY KEY,
  name_inner TEXT
);

CREATE TABLE unsub_outer(
  [an id] INTEGER PRIMARY KEY REFERENCES unsub_inner ([an id]),
  name_outer TEXT
);

CREATE TABLE some_table(
  [an id] INTEGER
);

CREATE VIEW shared_view AS
  SELECT
      [quoted foo].[an id],
      [quoted foo].[id 2],
      [quoted foo].name,
      [quoted foo].name_2
    FROM [quoted foo];

CREATE VIEW live_view AS
  SELECT
      [quoted foo].[an id],
      [quoted foo].[id 2],
      [quoted foo].name,
      [quoted foo].name_2
    FROM [quoted foo];

CREATE VIEW dead_view AS
  SELECT
      [quoted foo].[an id],
      [quoted foo].[id 2],
      [quoted foo].name,
      [quoted foo].name_2
    FROM [quoted foo];

CREATE VIEW another_live_view AS
  SELECT
      table2.[an id],
      table2.name1,
      table2.name2,
      table2.name3,
      table2.name4
    FROM table2;

CREATE VIEW [foo view unsubscribed] AS
  SELECT some_table.[an id]
    FROM some_table;

CREATE VIEW [foo view normal] AS
  SELECT some_table.[an id]
    FROM some_table;

CREATE INDEX shared_index ON [quoted foo] (name, name_2);

CREATE INDEX gr1_index ON g1 (name);

CREATE INDEX gr1_index2 ON g1 (name, [an id]);

CREATE INDEX gr1_index3 ON g1 (my_func(name), [an id]);

CREATE INDEX not_shared_present_index ON table2 (name1, name2);

CREATE INDEX index_going_away ON table2 (name3);

CREATE INDEX recreate_index_needs_deleting ON [migrated from recreate] (t);

CREATE INDEX recreate_index_needs_deleting2 ON [migrated from recreate] (t);

CREATE INDEX recreate_index_needs_deleting3 ON migrated_from_recreate2 (t);

CREATE INDEX unsub_recreated_index ON unsub_recreated (anything);

CREATE INDEX unsub_voyage_index ON unsub_voyage (v1);

CREATE INDEX us1 ON unsub_inner (name_inner);

CREATE INDEX us2 ON unsub_outer (name_outer);

CREATE TRIGGER shared_trigger
  BEFORE INSERT ON [quoted foo]
BEGIN
SELECT 1;
END;

CREATE TRIGGER not_shared_trigger
  BEFORE INSERT ON [quoted foo]
BEGIN
SELECT new.[an id];
END;

CREATE TRIGGER insert_trigger
  BEFORE INSERT ON [quoted foo]
  FOR EACH ROW
  WHEN new.[an id] > 7
BEGIN
SELECT new.[an id];
END;

CREATE TRIGGER old_trigger_was_deleted
  BEFORE INSERT ON [quoted foo]
BEGIN
SELECT new.[an id];
END;

CREATE TRIGGER trig_with_filter
  BEFORE INSERT ON [quoted foo]
  WHEN filter_(new.[an id]) = 3
BEGIN
DELETE FROM [quoted foo] WHERE [an id] = 77;
END;

CREATE TRIGGER unsub_recreated_trigger
  BEFORE INSERT ON unsub_recreated
BEGIN
SELECT 1;
END;

CREATE TRIGGER unsub_voyage_trigger
  BEFORE INSERT ON unsub_voyage
BEGIN
SELECT 1;
END;

CREATE TEMP TABLE this_table_appears_in_temp_section(
  temp_section_integer INTEGER
);

CREATE TEMP VIEW temp_view_in_temp_section AS
  SELECT
      [quoted foo].[an id],
      [quoted foo].[id 2],
      [quoted foo].name,
      [quoted foo].name_2
    FROM [quoted foo];

CREATE TEMP TRIGGER temp_trigger_in_temp_section
  BEFORE DELETE ON [quoted foo]
  FOR EACH ROW
  WHEN old.[an id] > 7
BEGIN
SELECT old.[an id];
END;

