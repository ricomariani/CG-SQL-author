
-- no columns will be considered hidden in this script
-- DDL in procs will not count as declarations
@SCHEMA_UPGRADE_SCRIPT;

-- schema crc -684282064796579108

-- declare facet helpers-- 
DECLARE facet_data TYPE OBJECT<facet_data>;
DECLARE test_facets facet_data;
DECLARE FUNCTION cql_facets_create() create facet_data not null;
DECLARE FUNCTION cql_facet_add(facets facet_data, facet TEXT NOT NULL, crc LONG NOT NULL) BOOL NOT NULL;
DECLARE FUNCTION cql_facet_upsert(facets facet_data, facet TEXT NOT NULL, crc LONG NOT NULL) BOOL NOT NULL;
DECLARE FUNCTION cql_facet_find(facets facet_data, facet TEXT NOT NULL) LONG NOT NULL;

-- declare recreate update helpers-- 
DECLARE PROCEDURE cql_rebuild_recreate_group (tables TEXT NOT NULL, indices TEXT NOT NULL, deletes TEXT NOT NULL, out result BOOL NOT NULL) USING TRANSACTION;
-- declare sqlite_master -- 
CREATE TABLE sqlite_master (
  type TEXT NOT NULL,
  name TEXT NOT NULL,
  tbl_name TEXT NOT NULL,
  rootpage INTEGER NOT NULL,
  sql TEXT
);

-- declare full schema of tables and views to be upgraded and their dependencies -- 
@ATTRIBUTE(cql:deterministic)
DECLARE SELECT FUNC my_func (x TEXT) TEXT;

DECLARE SELECT FUNC filter_ (id INT) INT!;

@DECLARE_SCHEMA_REGION shared;

@DECLARE_SCHEMA_REGION extra USING shared;

@DECLARE_SCHEMA_REGION other;

@begin_schema_region shared;
CREATE TABLE `quoted foo`(
  `an id` INT PRIMARY KEY,
  rate LONG @DELETE(5),
  `rate 2` LONG @DELETE(4, DeleteRate2Proc),
  `id 2` INT DEFAULT 12345 @CREATE(4, CreateId2Proc),
  name TEXT @CREATE(5),
  name_2 TEXT @CREATE(6)
);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE added_table(
  `an id` INT!,
  name1 TEXT,
  name2 TEXT @CREATE(4)
) @CREATE(3) @DELETE(5);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE g1(
  `an id` INT PRIMARY KEY,
  name TEXT
) @RECREATE(gr1);
@end_schema_region;

@begin_schema_region shared;
CREATE TABLE `use g1`(
  `an id` INT PRIMARY KEY REFERENCES g1 (`an id`),
  name2 TEXT
) @RECREATE(gr1);
@end_schema_region;

@begin_schema_region extra;
CREATE TABLE table2(
  `an id` INT! REFERENCES `quoted foo` (`an id`),
  name1 TEXT @CREATE(2, CreateName1Proc),
  name2 TEXT @CREATE(2, CreateName2Proc),
  name3 TEXT @CREATE(2),
  name4 TEXT @CREATE(2)
);
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW shared_view AS
  SELECT *
    FROM `quoted foo`;
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW live_view AS
  SELECT *
    FROM `quoted foo`;
@end_schema_region;

@begin_schema_region shared;
CREATE VIEW dead_view AS
  SELECT *
    FROM `quoted foo` @DELETE(2, DeadViewMigration);
@end_schema_region;

@begin_schema_region extra;
CREATE VIEW another_live_view AS
  SELECT *
    FROM table2;
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX shared_index ON `quoted foo` (name, name_2);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index ON g1 (name);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index2 ON g1 (name, `an id`);
@end_schema_region;

@begin_schema_region shared;
CREATE INDEX gr1_index3 ON g1 (my_func(name), `an id`) @DELETE(5);
@end_schema_region;

@begin_schema_region extra;
CREATE INDEX not_shared_present_index ON table2 (name1, name2);
@end_schema_region;

@begin_schema_region extra;
CREATE INDEX index_going_away ON table2 (name3) @DELETE(3);
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER shared_trigger
  BEFORE INSERT ON `quoted foo`
BEGIN
SELECT 1;
END;
@end_schema_region;

@begin_schema_region extra;
CREATE TRIGGER not_shared_trigger
  BEFORE INSERT ON `quoted foo`
BEGIN
SELECT new.`an id`;
END;
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER insert_trigger
  BEFORE INSERT ON `quoted foo`
  FOR EACH ROW
  WHEN new.`an id` > 7
BEGIN
SELECT new.`an id`;
END;
@end_schema_region;

@begin_schema_region shared;
CREATE TRIGGER old_trigger_was_deleted
  BEFORE INSERT ON `quoted foo`
BEGIN
SELECT new.`an id`;
END @DELETE(3);
@end_schema_region;

@begin_schema_region shared;
@SCHEMA_AD_HOC_MIGRATION(5, MyAdHocMigrationScript);
@end_schema_region;

-- facets table declaration --
CREATE TABLE IF NOT EXISTS test_cql_schema_facets(
  facet TEXT NOT NULL PRIMARY KEY,
  version LONG INTEGER NOT NULL
);

-- rebuilt_tables table declaration --
CREATE TEMP TABLE IF NOT EXISTS cql_schema_rebuilt_tables(
  rebuild_facet TEXT NOT NULL 
);

-- helper proc for getting the schema version of a facet
PROC test_cql_get_facet_version(_facet TEXT NOT NULL, out _version LONG INTEGER NOT NULL)
BEGIN
  TRY
    SET _version := (SELECT version FROM test_cql_schema_facets WHERE facet = _facet LIMIT 1 IF NOTHING THEN -1);
  CATCH
    SET _version := -1;
  END;
END;

-- saved facets table declaration --
CREATE TEMP TABLE test_cql_schema_facets_saved(
  facet TEXT NOT NULL PRIMARY KEY,
  version LONG INTEGER NOT NULL
);

-- holds all the table definitions out of sqlite_master
DECLARE test_tables_dict_ OBJECT<cql_string_dictionary>;

-- helper proc for creating the dictionary of table defs from sqlite_master
@attribute(cql:private)
PROC test_get_table_defs()
BEGIN
  DECLARE C CURSOR FOR SELECT name, sql from sqlite_master where type = 'table';
  SET test_tables_dict_ := cql_string_dictionary_create();
  LOOP FETCH C
  BEGIN
    IF C.sql IS NOT NULL THEN
      LET added := cql_string_dictionary_add(test_tables_dict_, C.name, C.sql);
    END IF;
  END;
END;

-- helper proc for creating the schema version table
@attribute(cql:private)
PROC test_create_cql_schema_facets_if_needed()
BEGIN
  CREATE TABLE IF NOT EXISTS test_cql_schema_facets(
    facet TEXT NOT NULL PRIMARY KEY,
    version LONG INTEGER NOT NULL
  );
END;

-- helper proc for creating the rebuilt facets table
@attribute(cql:private)
PROC test_create_cql_schema_rebuilt_tables_if_needed()
BEGIN
  CREATE TEMP TABLE IF NOT EXISTS cql_schema_rebuilt_tables(
    rebuild_facet TEXT NOT NULL
  );
END;

-- helper proc for saving the schema version table
@attribute(cql:private)
PROC test_save_cql_schema_facets()
BEGIN
  DROP TABLE IF EXISTS test_cql_schema_facets_saved;
  CREATE TEMP TABLE test_cql_schema_facets_saved(
    facet TEXT NOT NULL PRIMARY KEY,
    version LONG INTEGER NOT NULL
  );
  INSERT INTO test_cql_schema_facets_saved
    SELECT * FROM test_cql_schema_facets;
END;

-- helper proc for setting the schema version of a facet
PROC test_cql_set_facet_version(_facet TEXT NOT NULL, _version LONG INTEGER NOT NULL)
BEGIN
  INSERT OR REPLACE INTO test_cql_schema_facets (facet, version) VALUES(_facet, _version);
  LET added := cql_facet_upsert(test_facets, _facet, _version);
END;

-- helper proc for getting the schema version CRC for a version index
@attribute(cql:private)
PROC test_cql_get_version_crc(_v INTEGER NOT NULL, out _crc LONG INTEGER NOT NULL)
BEGIN
  SET _crc := cql_facet_find(test_facets, printf('cql_schema_v%d', _v));
END;

-- helper proc for setting the schema version CRC for a version index
PROC test_cql_set_version_crc(_v INTEGER NOT NULL, _crc LONG INTEGER NOT NULL)
BEGIN
  INSERT OR REPLACE INTO test_cql_schema_facets (facet, version) VALUES('cql_schema_v'||_v, _crc);
END;

-- helper proc to reset any triggers that are on the old plan --
DECLARE PROCEDURE cql_exec_internal(sql TEXT NOT NULL) USING TRANSACTION;

PROC test_drop_table_helper(table_name TEXT NOT NULL)
BEGIN
  CALL cql_exec_internal(printf('DROP TABLE IF EXISTS [%s]', table_name));
  -- remove the table from our dictionary marking it dropped
  IF test_tables_dict_ IS NULL THROW;
  LET added := cql_string_dictionary_add(test_tables_dict_, table_name, '');
END;

-- helper proc to insert facet into cql_rebuilt_tables --
PROC test_rebuilt_tables_insert_helper(facet TEXT NOT NULL)
BEGIN
  INSERT INTO cql_schema_rebuilt_tables VALUES(facet);
END;

-- helper proc to delete facet from cql_schema_facets_saved table --
PROC test_cql_schema_delete_saved_facet(delete_facet TEXT NOT NULL)
BEGIN
  DELETE FROM test_cql_schema_facets_saved WHERE facet = delete_facet;
END;

-- declared upgrade procedures if any
DECLARE PROC CreateName1Proc() USING TRANSACTION;
DECLARE PROC CreateName2Proc() USING TRANSACTION;

PROC test_cql_install_baseline_schema()
BEGIN
  CREATE TABLE IF NOT EXISTS table2(
    `an id` INT! REFERENCES `quoted foo` (`an id`)
  );

END;
-- drop all the views we know
@attribute(cql:private)
PROC test_cql_drop_all_views()
BEGIN
  DROP VIEW IF EXISTS another_live_view;
END;

-- create all the views we know
@attribute(cql:private)
PROC test_cql_create_all_views()
BEGIN
  CREATE VIEW another_live_view AS
    SELECT *
      FROM table2;
END;


-- drop all the indices that are deleted or changing
@attribute(cql:private)
PROC test_cql_drop_all_indices()
BEGIN
  IF cql_facet_find(test_facets, 'not_shared_present_index_index_crc') != -4019575091142856767 THEN
    DROP INDEX IF EXISTS not_shared_present_index;
  END IF;
  DROP INDEX IF EXISTS index_going_away;
  CALL test_cql_set_facet_version('index_going_away_index_crc', -1);
END;

-- create all the indices we need
@attribute(cql:private)
PROC test_cql_create_all_indices()
BEGIN
  IF cql_facet_find(test_facets, 'not_shared_present_index_index_crc') != -4019575091142856767 THEN
    CREATE INDEX not_shared_present_index ON table2 (name1, name2);
    CALL test_cql_set_facet_version('not_shared_present_index_index_crc', -4019575091142856767);
  END IF;
END;

-- drop all the triggers we know
@attribute(cql:private)
PROC test_cql_drop_all_triggers()
BEGIN
  DROP TRIGGER IF EXISTS not_shared_trigger;
END;

-- create all the triggers we know
@attribute(cql:private)
PROC test_cql_create_all_triggers()
BEGIN
  CREATE TRIGGER not_shared_trigger
    BEFORE INSERT ON `quoted foo`
  BEGIN
  SELECT new.`an id`;
  END;
END;

-- recreate all the non-virtual @recreate tables that might have changed
@attribute(cql:private)
PROC test_cql_recreate_non_virtual_tables()
BEGIN
  IF cql_facet_find(test_facets, 'all_nonvirtual_tables_crc') == 2282658103124508505 RETURN; 
  CALL test_cql_set_facet_version('all_nonvirtual_tables_crc', 2282658103124508505);
END;

-- recreate all the virtual @recreate tables that might have changed
@attribute(cql:private)
PROC test_cql_recreate_virtual_tables()
BEGIN
  IF cql_facet_find(test_facets, 'all_virtual_tables_crc') == 2282658103124508505 RETURN; 
  CALL test_cql_set_facet_version('all_virtual_tables_crc', 2282658103124508505);
END;

@attribute(cql:private)
PROC test_setup_facets()
BEGIN
  TRY
    SET test_facets := cql_facets_create();
    DECLARE C CURSOR FOR SELECT * from test_cql_schema_facets;
    LOOP FETCH C
    BEGIN
      LET added := cql_facet_add(test_facets, C.facet, C.version);
    END;
  CATCH
    -- if table doesn't exist we just have empty facets, that's ok
  END;
END;

DECLARE FUNCTION _cql_contains_column_def(needle TEXT, haystack TEXT) BOOL NOT NULL;
@attribute(cql:private)
PROC test_column_exists(table_ TEXT NOT NULL, col_info TEXT NOT NULL, OUT exists_ BOOL NOT NULL)
BEGIN
  IF test_tables_dict_ IS NULL THROW;
  LET table_str := cql_string_dictionary_find(test_tables_dict_, table_);
  SET exists_ := _cql_contains_column_def(table_str, col_info);
END;

@attribute(cql:private)
PROC test_table_exists(table_ TEXT NOT NULL, OUT exists_ BOOL NOT NULL)
BEGIN
  IF test_tables_dict_ IS NULL THROW;
  LET result := cql_string_dictionary_find(test_tables_dict_, table_);
  SET exists_ := result IS NOT NULL and result IS NOT '';
END;


@attribute(cql:private)
PROC test_perform_upgrade_steps(include_virtual_tables BOOL NOT NULL)
BEGIN
  LET facet := cql_compressed('cql_schema_crc_no_virtual');
  IF cql_facet_find(test_facets, facet) <> -684282064796579108 THEN
    DECLARE schema_version LONG INTEGER NOT NULL;
    -- dropping all views --
    CALL test_cql_drop_all_views();

    -- dropping condemned or changing indices --
    CALL test_cql_drop_all_indices();

    -- dropping condemned or changing triggers --
    CALL test_cql_drop_all_triggers();

    ---- install baseline schema if needed ----

    CALL test_cql_get_version_crc(0, schema_version);
    IF schema_version != -2368304323947832088 THEN
      CALL test_cql_install_baseline_schema();
      CALL test_cql_set_version_crc(0, -2368304323947832088);
    END IF;

    CALL test_get_table_defs();

    ---- upgrade to schema version 2 ----

    -- altering table table2 to add column name1 TEXT;

    IF NOT test_column_exists(cql_compressed('table2'), cql_compressed('name1 TEXT')) THEN 
      ALTER TABLE table2 ADD COLUMN name1 TEXT;
    END IF;

    -- altering table table2 to add column name2 TEXT;

    IF NOT test_column_exists(cql_compressed('table2'), cql_compressed('name2 TEXT')) THEN 
      ALTER TABLE table2 ADD COLUMN name2 TEXT;
    END IF;

    -- altering table table2 to add column name3 TEXT;

    IF NOT test_column_exists(cql_compressed('table2'), cql_compressed('name3 TEXT')) THEN 
      ALTER TABLE table2 ADD COLUMN name3 TEXT;
    END IF;

    -- altering table table2 to add column name4 TEXT;

    IF NOT test_column_exists(cql_compressed('table2'), cql_compressed('name4 TEXT')) THEN 
      ALTER TABLE table2 ADD COLUMN name4 TEXT;
    END IF;

    -- data migration procedures
    IF cql_facet_find(test_facets, 'CreateName1Proc') = -1 THEN
      CALL CreateName1Proc();
      CALL test_cql_set_facet_version('CreateName1Proc', 2);
    END IF;
    IF cql_facet_find(test_facets, 'CreateName2Proc') = -1 THEN
      CALL CreateName2Proc();
      CALL test_cql_set_facet_version('CreateName2Proc', 2);
    END IF;

    CALL test_cql_recreate_non_virtual_tables();
    CALL test_cql_create_all_views();
    CALL test_cql_create_all_indices();
    CALL test_cql_create_all_triggers();

    CALL test_cql_set_facet_version('cql_schema_version', 7);
    CALL test_cql_set_facet_version('cql_schema_crc_no_virtual', -684282064796579108);
  END IF;
  IF include_virtual_tables THEN
    CALL test_cql_recreate_virtual_tables();
    CALL test_cql_set_facet_version('cql_schema_crc', -684282064796579108);
  END IF;
END;

PROC test_get_current_and_proposed_versions(
    out current long not null,
    out proposed long not null
    )
BEGIN
    SET current := test_cql_get_facet_version('cql_schema_version');
    SET proposed := 7;
END;

PROC test_fetch_changed_facets()
BEGIN
    SELECT T1.facet FROM
      test_cql_schema_facets T1
      LEFT OUTER JOIN test_cql_schema_facets_saved T2
        ON T1.facet = T2.facet
      WHERE T1.version is not T2.version;
END;

PROC test_fetch_rebuilt_facets()
BEGIN
    SELECT rebuild_facet FROM cql_schema_rebuilt_tables;
END;

@attribute(cql:private)
PROC test_perform_needed_upgrades(include_virtual_tables BOOL NOT NULL)
BEGIN
  -- check for downgrade --
  IF cql_facet_find(test_facets, 'cql_schema_version') > 7 THEN
    SELECT 'downgrade detected' facet;
  ELSE
    -- save the current facets so we can diff them later --
    CALL test_save_cql_schema_facets();
    CALL test_perform_upgrade_steps(include_virtual_tables);

    -- finally produce the list of differences
    CALL test_fetch_changed_facets();
  END IF;
END;

@attribute(cql:private)
PROC test_helper(include_virtual_tables BOOL NOT NULL)
BEGIN
  DECLARE schema_crc LONG INTEGER NOT NULL;

  -- create schema facets information table --
  CALL test_create_cql_schema_facets_if_needed();

  -- create rebuilt facets table --
  CALL test_create_cql_schema_rebuilt_tables_if_needed();

  -- fetch the last known schema crc, if it's different do the upgrade --
  CALL test_cql_get_facet_version('cql_schema_crc', schema_crc);

  IF schema_crc <> -684282064796579108 THEN
    TRY
      CALL test_setup_facets();
      CALL test_perform_needed_upgrades(include_virtual_tables);
    CATCH
      SET test_facets := NULL;
      SET test_tables_dict_ := NULL;
      THROW;
    END;
    SET test_facets := NULL;
    SET test_tables_dict_ := NULL;
  ELSE
    -- some canonical result for no differences --
    SELECT 'no differences' facet;
  END IF;
END;

PROC test()
BEGIN
  CALL test_helper(TRUE);
END;

PROC test_no_virtual_tables()
BEGIN
  CALL test_helper(FALSE);
END;

