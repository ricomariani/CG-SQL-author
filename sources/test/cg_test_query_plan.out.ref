
declare proc printf no check;
@keep_table_name_in_aliases;
declare proc cql_create_udf_stub(name TEXT!) using transaction;

proc trivial_object()
begin
  select 1 x;
end;

proc trivial_blob(out result blob not null)
begin
  set result := (select x'41');
end;

-- The statement ending at line XXXX

DECLARE SELECT FUNC is_declare_func_enabled () BOOL!;
DECLARE SELECT FUNC is_declare_func_wall (id LONG) BOOL!;
DECLARE SELECT FUNC array_num_at (array_object_ptr LONG!, idx INT!) LONG;
DECLARE SELECT FUNC select_virtual_table (b TEXT) (id LONG, t TEXT, b BLOB, r REAL);
[[deterministic]]
DECLARE SELECT FUNC bgetkey_type (x BLOB!) LONG!;
[[deterministic]]
DECLARE SELECT FUNC bgetval_type (x BLOB!) LONG!;
[[deterministic]]
DECLARE SELECT FUNC bgetkey NO CHECK BLOB;
[[deterministic]]
DECLARE SELECT FUNC bgetval NO CHECK BLOB;
[[deterministic]]
DECLARE SELECT FUNC bcreatekey NO CHECK BLOB;
[[deterministic]]
DECLARE SELECT FUNC bcreateval NO CHECK BLOB;
[[deterministic]]
DECLARE SELECT FUNC bupdatekey NO CHECK BLOB;
[[deterministic]]
DECLARE SELECT FUNC bupdateval NO CHECK BLOB;
DECLARE SELECT FUNC stuff () INT!;
PROC create_schema()
BEGIN
  call cql_create_udf_stub("is_declare_func_enabled");
  call cql_create_udf_stub("is_declare_func_wall");
  call cql_create_udf_stub("array_num_at");
  call cql_create_udf_stub("select_virtual_table");
  call cql_create_udf_stub("bgetkey_type");
  call cql_create_udf_stub("bgetval_type");
  call cql_create_udf_stub("bgetkey");
  call cql_create_udf_stub("bgetval");
  call cql_create_udf_stub("bcreatekey");
  call cql_create_udf_stub("bcreateval");
  call cql_create_udf_stub("bupdatekey");
  call cql_create_udf_stub("bupdateval");
  call cql_create_udf_stub("stuff");
  CREATE TABLE `table one`(
    id INT PRIMARY KEY,
    name TEXT
  );
  CREATE TABLE t2(
    id INT PRIMARY KEY,
    name TEXT
  );
  CREATE TABLE t3(
    id INT PRIMARY KEY,
    name TEXT
  );
  CREATE TABLE t4(
    id LONG PRIMARY KEY AUTOINCREMENT,
    data BLOB
  );
  CREATE TABLE t5(
    id LONG,
    FOREIGN KEY (id) REFERENCES t4 (id) ON UPDATE CASCADE ON DELETE CASCADE
  );
  CREATE TABLE scan_ok(
    id INT
  );
  CREATE TABLE foo(
    id INT
  );
  CREATE TABLE _foo(
    id INT
  );
  CREATE TABLE foo_(
    id INT
  );
  CREATE INDEX `table one index` ON `table one` (name, id);
  CREATE INDEX it4 ON t4 (data, id);
  CREATE VIEW my_view AS
    SELECT *
      FROM `table one`
        INNER JOIN t2 USING (id);
  CREATE VIEW my_view_using_table_alias AS
    SELECT foo.*, bar.id AS id2, bar.rowid AS rowid
      FROM `table one` AS foo
        INNER JOIN t2 AS bar USING (id);
  CREATE TRIGGER my_trigger
    AFTER INSERT ON `table one`
    WHEN is_declare_func_enabled() AND is_declare_func_wall(new.id) = 1
  BEGIN
  DELETE FROM t2 WHERE id > new.id;
  END;
  CREATE TABLE virtual_table(
    id INT,
    t TEXT,
    b BLOB,
    r REAL
  );
  CREATE TABLE C(
    id INT!,
    name TEXT
  );
  CREATE TABLE select_virtual_table (
    id INT,
    t TEXT,
    b BLOB,
    r REAL
  );
  [[backing_table]]
  CREATE TABLE backing(
    k BLOB PRIMARY KEY,
    v BLOB!
  );
  CREATE INDEX backing_index ON backing (bgetkey_type(k));
  CREATE TABLE sql_temp(
    id INT! PRIMARY KEY,
    sql TEXT!
  ) WITHOUT ROWID;
  CREATE TABLE plan_temp(
    iselectid INT!,
    iorder INT!,
    ifrom INT!,
    zdetail TEXT!,
    sql_id INT!,
    FOREIGN KEY (sql_id) REFERENCES sql_temp(id)
  );
  CREATE TABLE no_table_scan(
    table_name TEXT! PRIMARY KEY
  );
  CREATE TABLE table_scan_alert(
    info TEXT!
  );
  CREATE TABLE b_tree_alert(
    info TEXT!
  );
  CREATE TABLE ok_table_scan(
    sql_id INT! PRIMARY KEY,
    proc_name TEXT!,
    table_names TEXT!
  ) WITHOUT ROWID;
END;

[[backed_by=backing]]
CREATE TABLE backed(
  id INT PRIMARY KEY,
  name TEXT
);
PROC populate_no_table_scan()
BEGIN
  INSERT OR IGNORE INTO no_table_scan(table_name) VALUES
    ("table one"),
    ("t2"),
    ("scan_ok"),
    ("foo");
END;
PROC populate_query_plan_1()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT *\\n  FROM `table one`\\n  WHERE name = 'Nelly' AND id IN (SELECT id\\n  FROM t2\\n  WHERE id = 1\\nUNION\\nSELECT id\\n  FROM t3)\\n  ORDER BY name ASC";
  INSERT INTO sql_temp(id, sql) VALUES(1, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT *
    FROM `table one`
    WHERE name = 'Nelly' AND id IN (SELECT id
    FROM t2
    WHERE id = 1
  UNION
  SELECT id
    FROM t3)
    ORDER BY name ASC;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(1, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_2()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT is_declare_func_wall(id)\\n  FROM t4\\n  WHERE data = query_plan_trivial_blob";
  INSERT INTO sql_temp(id, sql) VALUES(2, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT is_declare_func_wall(id)
    FROM t4
    WHERE data = query_plan_trivial_blob;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(2, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_3()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "UPDATE `table one`\\n  SET id = 1, name = '1'\\n  WHERE name IN (SELECT T.NAME\\n    FROM t3 AS T)";
  INSERT INTO sql_temp(id, sql) VALUES(3, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  UPDATE `table one`
    SET id = 1, name = '1'
    WHERE name IN (SELECT T.NAME
      FROM t3 AS T);
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(3, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_4()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  some_cte (id, name) AS (\\n    SELECT T.*\\n      FROM t2 AS T\\n  )\\nUPDATE `table one`\\n  SET id = 1, name = '1'\\n  WHERE name IN (SELECT name\\n    FROM some_cte)";
  INSERT INTO sql_temp(id, sql) VALUES(4, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    some_cte (id, name) AS (
      SELECT T.*
        FROM t2 AS T
    )
  UPDATE `table one`
    SET id = 1, name = '1'
    WHERE name IN (SELECT name
      FROM some_cte);
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(4, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_5()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "DELETE FROM `table one` WHERE name IN (SELECT foo.name\\n  FROM t2 AS foo\\n    INNER JOIN t3 USING (name))";
  INSERT INTO sql_temp(id, sql) VALUES(5, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  DELETE FROM `table one` WHERE name IN (SELECT foo.name
    FROM t2 AS foo
      INNER JOIN t3 USING (name));
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(5, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_6()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  some_cte (name) AS (\\n    SELECT foo.name\\n      FROM t2 AS foo\\n        INNER JOIN t3 USING (id)\\n  )\\nDELETE FROM `table one` WHERE name NOT IN (SELECT *\\n  FROM some_cte)";
  INSERT INTO sql_temp(id, sql) VALUES(6, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    some_cte (name) AS (
      SELECT foo.name
        FROM t2 AS foo
          INNER JOIN t3 USING (id)
    )
  DELETE FROM `table one` WHERE name NOT IN (SELECT *
    FROM some_cte);
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(6, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_7()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "INSERT INTO `table one`(id, name)\\n  SELECT foo.*\\n    FROM t2 AS foo\\n  UNION ALL\\n  SELECT bar.*\\n    FROM t3 AS bar";
  INSERT INTO sql_temp(id, sql) VALUES(7, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  INSERT INTO `table one`(id, name)
    SELECT foo.*
      FROM t2 AS foo
    UNION ALL
    SELECT bar.*
      FROM t3 AS bar;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(7, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_8()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  some_cte (id, name) AS (\\n    SELECT T.*\\n      FROM t2 AS T\\n  )\\nINSERT INTO `table one`(id, name)\\n  SELECT *\\n    FROM some_cte";
  INSERT INTO sql_temp(id, sql) VALUES(8, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    some_cte (id, name) AS (
      SELECT T.*
        FROM t2 AS T
    )
  INSERT INTO `table one`(id, name)
    SELECT *
      FROM some_cte;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(8, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_9()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "BEGIN";
  INSERT INTO sql_temp(id, sql) VALUES(9, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  BEGIN;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(9, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_10()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "INSERT INTO `table one`(id, name)\\n  VALUES (1, 'Irene')\\nON CONFLICT (id)\\nDO UPDATE\\n  SET name = excluded.name || 'replace' || ' \\u00e2\\u0080\\u00a2 ' || '\\\\x01\\\\x02\\\\xA1\\\\x1b\\\\x00\\\\xg' || 'it''s high noon\\\\r\\\\n\\\\f\\\\b\\\\t\\\\v' || \\\"it's\\\" || name";
  INSERT INTO sql_temp(id, sql) VALUES(10, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  INSERT INTO `table one`(id, name)
    VALUES (1, 'Irene')
  ON CONFLICT (id)
  DO UPDATE
    SET name = excluded.name || 'replace' || ' • ' || '\x01\x02\xA1\x1b\x00\xg' || 'it''s high noon\r\n\f\b\t\v' || "it's" || name;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(10, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_11()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  some_cte (id, name) AS (\\n    SELECT 1, 'Irene'\\n  )\\nINSERT INTO `table one`(id, name)\\n  SELECT *\\n    FROM some_cte\\n    WHERE id = 1\\nON CONFLICT (id)\\nDO UPDATE\\n  SET name = excluded.name || 'replace' || ' \\u00e2\\u0080\\u00a2 ' || '\\\\x01\\\\x02\\\\xA1\\\\x1b\\\\x00\\\\xg' || 'it''s high noon\\\\r\\\\n\\\\f\\\\b\\\\t\\\\v' || \\\"it's\\\" || name";
  INSERT INTO sql_temp(id, sql) VALUES(11, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    some_cte (id, name) AS (
      SELECT 1, 'Irene'
    )
  INSERT INTO `table one`(id, name)
    SELECT *
      FROM some_cte
      WHERE id = 1
  ON CONFLICT (id)
  DO UPDATE
    SET name = excluded.name || 'replace' || ' • ' || '\x01\x02\xA1\x1b\x00\xg' || 'it''s high noon\r\n\f\b\t\v' || "it's" || name;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(11, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_12()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "COMMIT";
  INSERT INTO sql_temp(id, sql) VALUES(12, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  COMMIT;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(12, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_13()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "DROP TABLE IF EXISTS `table one`";
  INSERT INTO sql_temp(id, sql) VALUES(13, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  DROP TABLE IF EXISTS `table one`;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(13, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_14()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "DROP VIEW my_view";
  INSERT INTO sql_temp(id, sql) VALUES(14, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  DROP VIEW my_view;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(14, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_15()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "DROP INDEX `table one index`";
  INSERT INTO sql_temp(id, sql) VALUES(15, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  DROP INDEX `table one index`;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(15, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_16()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  some_cte (name) AS (\\n    SELECT t2.name\\n      FROM t2\\n        INNER JOIN t3 USING (id)\\n  )\\nSELECT *\\n  FROM some_cte";
  INSERT INTO sql_temp(id, sql) VALUES(16, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    some_cte (name) AS (
      SELECT t2.name
        FROM t2
          INNER JOIN t3 USING (id)
    )
  SELECT *
    FROM some_cte;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(16, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_17()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT array_num_at(ptr(query_plan_trivial_object), id) AS idx\\n  FROM `table one`";
  INSERT INTO sql_temp(id, sql) VALUES(17, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT array_num_at(ptr(query_plan_trivial_object), id) AS idx
    FROM `table one`;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(17, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_18()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT *\\n  FROM scan_ok";
  INSERT INTO sql_temp(id, sql) VALUES(18, stmt);
  INSERT INTO ok_table_scan(sql_id, proc_name, table_names) VALUES(18, "use_ok_table_scan_attr", "#scan_ok#,#t3#");
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT *
    FROM scan_ok;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(18, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_19()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT 1 AS n\\n  FROM foo_,\\n    _foo";
  INSERT INTO sql_temp(id, sql) VALUES(19, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT 1 AS n
    FROM foo_,
      _foo;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(19, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_20()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT ifnull(nullable(1), 42) AS nullable_result";
  INSERT INTO sql_temp(id, sql) VALUES(20, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT ifnull(nullable(1), 42) AS nullable_result;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(20, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

[[shared_fragment]]
PROC split_commas (str TEXT)
BEGIN
WITH
  splitter (tok, rest) AS (
    SELECT "", IFNULL(str || ",", "")
    UNION ALL
    SELECT substr(rest, 1, instr(rest, ",") - 1), substr(rest, instr(rest, ",") + 1)
      FROM splitter
      WHERE rest <> ""
  )
SELECT tok
  FROM splitter
  WHERE tok <> "";
END;

[[shared_fragment]]
PROC ids_from_string (str TEXT)
BEGIN
WITH
  toks (tok) AS (CALL split_commas(str))
SELECT CAST(tok AS LONG) AS id
  FROM toks;
END;

PROC populate_query_plan_21()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  I (id) AS (CALL ids_from_string('1')),\\n  E (id) AS (CALL ids_from_string('1'))\\nSELECT C.*\\n  FROM C\\n  WHERE C.id IN (SELECT *\\n  FROM I) AND C.id NOT IN (SELECT *\\n  FROM E)";
  INSERT INTO sql_temp(id, sql) VALUES(21, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    I (id) AS (CALL ids_from_string('1')),
    E (id) AS (CALL ids_from_string('1'))
  SELECT C.*
    FROM C
    WHERE C.id IN (SELECT *
    FROM I) AND C.id NOT IN (SELECT *
    FROM E);
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(21, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

[[shared_fragment]]
[[query_plan_branch=11]]
PROC frag1 (x INT)
BEGIN
SELECT 2 AS a;
END;

[[shared_fragment]]
[[query_plan_branch=4]]
PROC frag2 (y INT)
BEGIN
SELECT 40 AS b;
END;

[[shared_fragment]]
PROC frag3 (z INT)
BEGIN
SELECT 100 AS c;
END;

[[shared_fragment]]
PROC frag_with_select ()
BEGIN
WITH
  cte (a) AS (
    SELECT 1 AS a
  )
SELECT *
  FROM cte;
END;

[[shared_fragment]]
[[query_plan_branch=2]]
PROC frag_with_select_nothing ()
BEGIN
SELECT 1 AS a;
END;

[[shared_fragment]]
PROC frag (v INT!)
BEGIN
SELECT v AS val;
END;

PROC populate_query_plan_22()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  frag (val) AS (CALL frag(1))\\nSELECT *\\n  FROM frag";
  INSERT INTO sql_temp(id, sql) VALUES(22, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    frag (val) AS (CALL frag(1))
  SELECT *
    FROM frag;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(22, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_23()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  frag (val) AS (CALL frag(1))\\nSELECT *\\n  FROM frag";
  INSERT INTO sql_temp(id, sql) VALUES(23, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    frag (val) AS (CALL frag(1))
  SELECT *
    FROM frag;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(23, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_24()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT\\n    one.id,\\n    one.t,\\n    one.b,\\n    one.r,\\n    two.id AS id_,\\n    two.t AS t_,\\n    two.b AS b_,\\n    two.r AS r_\\n  FROM select_virtual_table AS one,\\n    select_virtual_table AS two";
  INSERT INTO sql_temp(id, sql) VALUES(24, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT
      one.id,
      one.t,
      one.b,
      one.r,
      two.id AS id_,
      two.t AS t_,
      two.b AS b_,
      two.r AS r_
    FROM select_virtual_table AS one,
      select_virtual_table AS two;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(24, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_25()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  backed (rowid, id, name) AS (CALL _backed())\\nSELECT *\\n  FROM backed\\n  WHERE name = 'x'";
  INSERT INTO sql_temp(id, sql) VALUES(25, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    backed (rowid, id, name) AS (CALL _backed())
  SELECT *
    FROM backed
    WHERE name = 'x';
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(25, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_26()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT CAST(1L AS INT)";
  INSERT INTO sql_temp(id, sql) VALUES(26, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT CAST(1L AS INT);
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(26, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_27()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT CAST(1.0 AS INT)";
  INSERT INTO sql_temp(id, sql) VALUES(27, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT CAST(1.0 AS INT);
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(27, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_28()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT CAST(1 AS REAL)";
  INSERT INTO sql_temp(id, sql) VALUES(28, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT CAST(1 AS REAL);
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(28, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_29()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT CAST(true AS INT)";
  INSERT INTO sql_temp(id, sql) VALUES(29, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT CAST(true AS INT);
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(29, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

[[shared_fragment]]
PROC notnull_int_frag (v INT!)
BEGIN
SELECT v AS val;
END;

PROC populate_query_plan_30()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT *\\n  FROM (CALL notnull_int_frag(1))";
  INSERT INTO sql_temp(id, sql) VALUES(30, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT *
    FROM (CALL notnull_int_frag(1));
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(30, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_31()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT stuff() AS x, notnull_int_frag(1) AS y, T1.*\\n  FROM (CALL notnull_int_frag(1 + 1)) AS T1";
  INSERT INTO sql_temp(id, sql) VALUES(31, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT stuff() AS x, notnull_int_frag(1) AS y, T1.*
    FROM (CALL notnull_int_frag(1 + 1)) AS T1;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(31, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

[[shared_fragment]]
PROC simple_blob_fragment (x BLOB)
BEGIN
SELECT 1 AS xx;
END;

PROC populate_query_plan_32()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT *\\n  FROM (CALL simple_blob_fragment(nullable(trivial_blob())))";
  INSERT INTO sql_temp(id, sql) VALUES(32, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT *
    FROM (CALL simple_blob_fragment(nullable(trivial_blob())));
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(32, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

[[shared_fragment]]
PROC simple_object_fragment (x OBJECT)
BEGIN
SELECT 1 AS xx;
END;

PROC populate_query_plan_33()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT *\\n  FROM (CALL simple_object_fragment(nullable(trivial_object())))";
  INSERT INTO sql_temp(id, sql) VALUES(33, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT *
    FROM (CALL simple_object_fragment(nullable(trivial_object())));
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(33, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

[[shared_fragment]]
PROC qp_take_inner_blob (foo BLOB)
BEGIN
SELECT foo AS inner_a;
END;

[[shared_fragment]]
PROC qp_take_blob (foo BLOB)
BEGIN
WITH
  qp_take_inner_blob (inner_a) AS (CALL qp_take_inner_blob(LOCALS.foo))
SELECT *
  FROM qp_take_inner_blob;
END;

PROC populate_query_plan_34()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  qp_take_blob (inner_a) AS (CALL qp_take_blob(nullable(query_plan_trivial_blob)))\\nSELECT *\\n  FROM qp_take_blob";
  INSERT INTO sql_temp(id, sql) VALUES(34, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    qp_take_blob (inner_a) AS (CALL qp_take_blob(nullable(query_plan_trivial_blob)))
  SELECT *
    FROM qp_take_blob;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(34, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_35()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "WITH\\n  qp_take_inner_blob (inner_a) AS (CALL qp_take_inner_blob(nullable(query_plan_trivial_blob)))\\nSELECT *\\n  FROM qp_take_inner_blob";
  INSERT INTO sql_temp(id, sql) VALUES(35, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  WITH
    qp_take_inner_blob (inner_a) AS (CALL qp_take_inner_blob(nullable(query_plan_trivial_blob)))
  SELECT *
    FROM qp_take_inner_blob;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(35, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_36()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT nullable(query_plan_trivial_blob) AS foo";
  INSERT INTO sql_temp(id, sql) VALUES(36, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT nullable(query_plan_trivial_blob) AS foo;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(36, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

[[shared_fragment]]
PROC object_frag (o OBJECT)
BEGIN
SELECT 1 AS x;
END;

[[shared_fragment]]
PROC outer_frag ()
BEGIN
SELECT *
  FROM (CALL object_frag(nullable(trivial_object())));
END;

PROC populate_query_plan_37()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT *\\n  FROM (CALL outer_frag())";
  INSERT INTO sql_temp(id, sql) VALUES(37, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT *
    FROM (CALL outer_frag());
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(37, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_38()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT alias.*\\n  FROM `table one` AS alias";
  INSERT INTO sql_temp(id, sql) VALUES(38, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT alias.*
    FROM `table one` AS alias;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(38, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_39()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT alias.rowid\\n  FROM `table one` AS alias";
  INSERT INTO sql_temp(id, sql) VALUES(39, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT alias.rowid
    FROM `table one` AS alias;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(39, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_query_plan_40()
BEGIN
  LET query_plan_trivial_object := trivial_object();
  LET query_plan_trivial_blob := trivial_blob();

  DECLARE stmt TEXT!;
  SET stmt := "SELECT view.*\\n  FROM my_view_using_table_alias AS view";
  INSERT INTO sql_temp(id, sql) VALUES(40, stmt);
  DECLARE C CURSOR FOR EXPLAIN QUERY PLAN
  SELECT view.*
    FROM my_view_using_table_alias AS view;
  LOOP FETCH C
  BEGIN
    INSERT INTO plan_temp(sql_id, iselectid, iorder, ifrom, zdetail) VALUES(40, C.iselectid, C.iorder, C.ifrom, C.zdetail);
  END;
END;

PROC populate_table_scan_alert_table(table_ text!)
BEGIN
  INSERT OR IGNORE INTO table_scan_alert
    SELECT upper(table_) || '(' || count(*) || ')' as info FROM plan_temp
    WHERE ( zdetail GLOB ('*[Ss][Cc][Aa][Nn]* ' || table_) OR 
            zdetail GLOB ('*[Ss][Cc][Aa][Nn]* ' || table_ || ' *')
          )
    AND sql_id NOT IN (
      SELECT sql_id from ok_table_scan
        WHERE table_names GLOB ('*#' || table_ || '#*')
    ) GROUP BY table_;
END;

PROC populate_b_tree_alert_table()
BEGIN
  INSERT OR IGNORE INTO b_tree_alert
    SELECT '#' || sql_id || '(' || count(*) || ')' as info FROM plan_temp
    WHERE zdetail LIKE '%temp b-tree%'
    GROUP BY sql_id;
END;

PROC print_query_violation()
BEGIN
  CALL populate_b_tree_alert_table();
  DECLARE C CURSOR FOR SELECT table_name FROM no_table_scan;
  LOOP FETCH C
  BEGIN
    CALL populate_table_scan_alert_table(C.table_name);
  END;

  LET first := true;
  CALL printf("\"alerts\" : {\n");
  DECLARE C2 CURSOR FOR
    SELECT 'tableScanViolation' AS key, group_concat(info, ', ') AS info_list FROM table_scan_alert
    UNION ALL
    SELECT 'tempBTreeViolation' AS key, group_concat(info, ', ') AS info_list FROM b_tree_alert;
  LOOP FETCH C2
  BEGIN
    IF C2.info_list IS NOT NULL THEN
      CALL printf("%s", IIF(first, "", ",\n"));
      CALL printf("  \"%s\" : ", C2.key);
      CALL printf("\"%s\"", C2.info_list);
      SET first := false;
    END IF;
  END;
  CALL printf("\n},\n");
END;

PROC print_sql_statement(sql_id int!)
BEGIN
  DECLARE C CURSOR FOR SELECT * FROM sql_temp WHERE id = sql_id LIMIT 1;
  FETCH C;
  CALL printf("   \"query\" : \"%s\",\n", C.sql);
END;

PROC print_query_plan_stat(id_ int!)
BEGIN
  CALL printf("   \"stats\" : {\n");
  DECLARE Ca CURSOR FOR
  WITH
    scan(name, count, priority) AS (
      SELECT 'scan', COUNT(*), 0 
        FROM plan_temp 
        WHERE zdetail LIKE '%scan%' AND sql_id = id_
    ),
    b_tree(name, count, priority) AS (
      SELECT 'tempBTree', COUNT(*), 1 
        FROM plan_temp 
        WHERE zdetail LIKE '%temp b-tree%' AND sql_id = id_
    ),
    compound_subqueries(name, count, priority) AS (
      SELECT 'compoundSubquery', COUNT(*), 2 
        FROM plan_temp 
        WHERE zdetail LIKE '%compound subqueries%' AND sql_id = id_
    ),
    execute_scalar(name, count, priority) AS (
      SELECT 'executeScalar', COUNT(*), 3 
        FROM plan_temp 
        WHERE zdetail LIKE '%execute scalar%' AND sql_id = id_
    ),
    search(name, count, priority) AS (
      SELECT 'search', COUNT(*), 4 
        FROM plan_temp 
        WHERE zdetail LIKE '%search%' AND iselectid NOT IN (
          SELECT iselectid 
          FROM plan_temp 
          WHERE zdetail LIKE '%search%using%covering%'
        ) AND sql_id = id_
    ),
    search_fast(name, count, priority) AS (
      SELECT 'searchUsingCovering', COUNT(*), 5 
        FROM plan_temp 
        WHERE zdetail LIKE '%search%using%covering%' AND sql_id = id_
    )
  SELECT 
   '"' || name || '"' name,
   count value
   FROM (
   SELECT * FROM scan
   UNION ALL
   SELECT * FROM search
   UNION ALL
   SELECT * FROM search_fast
   UNION ALL
   SELECT * FROM b_tree
   UNION ALL
   SELECT * FROM compound_subqueries
   UNION ALL
   SELECT * FROM execute_scalar
  )
  WHERE count > 0 ORDER BY priority ASC, count DESC;
  LET first := true;
  LOOP FETCH Ca
  BEGIN
    CALL printf("%s", IIF(first, "", ",\n"));
    CALL printf("      %s : %d", Ca.name, Ca.value);
    SET first := false;
  END;
  CALL printf("\n    },\n");
END;

PROC print_query_plan_graph(id_ int!)
BEGIN
  DECLARE C CURSOR FOR
  WITH RECURSIVE
    plan_chain(iselectid,  zdetail, level) AS (
     SELECT 0 as  iselectid, 'QUERY PLAN' as  zdetail, 0 as level
     UNION ALL
     SELECT plan_temp.iselectid, plan_temp.zdetail, plan_chain.level+1 as level
      FROM plan_temp JOIN plan_chain ON plan_temp.iorder=plan_chain.iselectid WHERE plan_temp.sql_id = id_
     ORDER BY 3 DESC
    )
    SELECT
     level,
     substr('                              ', 1, max(level - 1, 0)*3) ||
     substr('|.............................', 1, min(level, 1)*3) ||
     zdetail as graph_line FROM plan_chain;

  CALL printf("   \"plan\" : \"");
  LOOP FETCH C
  BEGIN
    CALL printf("%s%s", IIF(C.level, "\\n", ""), C.graph_line);
  END;
  CALL printf("\"\n");
END;

PROC print_query_plan(sql_id int!)
BEGIN
  CALL printf("  {\n");
  CALL printf("   \"id\" : %d,\n", sql_id);
  CALL print_sql_statement(sql_id);
  CALL print_query_plan_stat(sql_id);
  CALL print_query_plan_graph(sql_id);
  CALL printf("  }");
END;

PROC query_plan()
BEGIN
  CALL create_schema();
  TRY
    CALL populate_no_table_scan();
  CATCH
    CALL printf("failed populating no_table_scan table\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_1();
  CATCH
    CALL printf("failed populating query 1\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_2();
  CATCH
    CALL printf("failed populating query 2\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_3();
  CATCH
    CALL printf("failed populating query 3\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_4();
  CATCH
    CALL printf("failed populating query 4\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_5();
  CATCH
    CALL printf("failed populating query 5\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_6();
  CATCH
    CALL printf("failed populating query 6\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_7();
  CATCH
    CALL printf("failed populating query 7\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_8();
  CATCH
    CALL printf("failed populating query 8\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_9();
  CATCH
    CALL printf("failed populating query 9\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_10();
  CATCH
    CALL printf("failed populating query 10\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_11();
  CATCH
    CALL printf("failed populating query 11\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_12();
  CATCH
    CALL printf("failed populating query 12\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_13();
  CATCH
    CALL printf("failed populating query 13\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_14();
  CATCH
    CALL printf("failed populating query 14\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_15();
  CATCH
    CALL printf("failed populating query 15\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_16();
  CATCH
    CALL printf("failed populating query 16\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_17();
  CATCH
    CALL printf("failed populating query 17\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_18();
  CATCH
    CALL printf("failed populating query 18\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_19();
  CATCH
    CALL printf("failed populating query 19\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_20();
  CATCH
    CALL printf("failed populating query 20\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_21();
  CATCH
    CALL printf("failed populating query 21\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_22();
  CATCH
    CALL printf("failed populating query 22\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_23();
  CATCH
    CALL printf("failed populating query 23\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_24();
  CATCH
    CALL printf("failed populating query 24\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_25();
  CATCH
    CALL printf("failed populating query 25\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_26();
  CATCH
    CALL printf("failed populating query 26\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_27();
  CATCH
    CALL printf("failed populating query 27\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_28();
  CATCH
    CALL printf("failed populating query 28\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_29();
  CATCH
    CALL printf("failed populating query 29\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_30();
  CATCH
    CALL printf("failed populating query 30\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_31();
  CATCH
    CALL printf("failed populating query 31\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_32();
  CATCH
    CALL printf("failed populating query 32\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_33();
  CATCH
    CALL printf("failed populating query 33\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_34();
  CATCH
    CALL printf("failed populating query 34\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_35();
  CATCH
    CALL printf("failed populating query 35\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_36();
  CATCH
    CALL printf("failed populating query 36\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_37();
  CATCH
    CALL printf("failed populating query 37\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_38();
  CATCH
    CALL printf("failed populating query 38\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_39();
  CATCH
    CALL printf("failed populating query 39\n");
    THROW;
  END;
  TRY
    CALL populate_query_plan_40();
  CATCH
    CALL printf("failed populating query 40\n");
    THROW;
  END;
  CALL printf("{\n");
  CALL print_query_violation();
  CALL printf("\"plans\" : [\n");
  LET q := 1;
  WHILE q <= 40
  BEGIN
    CALL printf("%s", IIF(q == 1, "", ",\n"));
    CALL print_query_plan(q);
    SET q := q + 1;
  END;
  CALL printf("\n]\n");
  CALL printf("}");
END;
